// -----------------------------------------------------------------------------
// Auto-Generated by:        __   _ __      _  __
//                          / /  (_) /____ | |/_/
//                         / /__/ / __/ -_)>  <
//                        /____/_/\__/\__/_/|_|
//                     Build your hardware, easily!
//                   https://github.com/enjoy-digital/litex
//
// Filename   : radiona_ulx3s_custom.v
// Device     : LFE5U-85F-6BG381C
// LiteX sha1 : 2deb47df
// Date       : 2023-10-03 19:59:31
//------------------------------------------------------------------------------

`timescale 1ns / 1ps

//------------------------------------------------------------------------------
// Module
//------------------------------------------------------------------------------

module radiona_ulx3s_custom (
    input  wire          clk25,
    input  wire          rst,
    output wire   [12:0] sdram_a,
    output wire    [1:0] sdram_ba,
    output wire          sdram_cas_n,
    output wire          sdram_cke,
    output wire          sdram_clock,
    output wire          sdram_cs_n,
    output wire    [1:0] sdram_dm,
    input  wire   [15:0] sdram_dq,
    output wire          sdram_ras_n,
    output wire          sdram_we_n,
    input  wire          serial_rx,
    output reg           serial_tx,
    output reg           spisdcard_clk,
    output reg           spisdcard_cs_n,
    input  wire          spisdcard_miso,
    output reg           spisdcard_mosi,
    output wire          user_led0,
    output wire          user_led1,
    output wire          user_led2,
    output wire          user_led3,
    output wire          user_led4,
    output wire          user_led5,
    output wire          user_led6,
    output wire          user_led7,
    output wire          wifi_gpio0
);


//------------------------------------------------------------------------------
// Signals
//------------------------------------------------------------------------------

wire   [15:0] basesoc_clk_divider0;
reg    [15:0] basesoc_clk_divider1 = 16'd0;
reg           basesoc_clk_enable = 1'd0;
wire          basesoc_clk_fall;
wire          basesoc_clk_rise;
reg           basesoc_control_re = 1'd0;
reg    [15:0] basesoc_control_storage = 16'd0;
reg     [2:0] basesoc_count = 3'd0;
reg     [2:0] basesoc_count_spimaster_next_value = 3'd0;
reg           basesoc_count_spimaster_next_value_ce = 1'd0;
wire          basesoc_cs;
wire          basesoc_cs_mode;
reg           basesoc_cs_re = 1'd0;
reg    [16:0] basesoc_cs_storage = 17'd1;
reg           basesoc_done0 = 1'd0;
wire          basesoc_done1;
reg           basesoc_irq = 1'd0;
wire    [7:0] basesoc_length0;
wire    [7:0] basesoc_length1;
wire          basesoc_loopback;
reg           basesoc_loopback_re = 1'd0;
reg           basesoc_loopback_storage = 1'd0;
reg     [7:0] basesoc_miso = 8'd0;
reg     [7:0] basesoc_miso_data = 8'd0;
reg           basesoc_miso_latch = 1'd0;
reg           basesoc_miso_re = 1'd0;
wire    [7:0] basesoc_miso_status;
wire          basesoc_miso_we;
wire          basesoc_mode0;
wire          basesoc_mode1;
wire          basesoc_mode2;
wire    [7:0] basesoc_mosi;
reg     [7:0] basesoc_mosi_data = 8'd0;
reg           basesoc_mosi_latch = 1'd0;
reg           basesoc_mosi_re = 1'd0;
reg     [2:0] basesoc_mosi_sel = 3'd0;
reg     [7:0] basesoc_mosi_storage = 8'd0;
reg           basesoc_re = 1'd0;
wire          basesoc_sel;
wire          basesoc_start0;
reg           basesoc_start1 = 1'd0;
reg           basesoc_status_re = 1'd0;
reg     [1:0] basesoc_status_status = 2'd0;
wire          basesoc_status_we;
reg    [15:0] basesoc_storage = 16'd100;
reg           basesoc_xfer_enable = 1'd0;
reg    [13:0] builder_basesoc_adr = 14'd0;
reg    [13:0] builder_basesoc_adr_wishbone2csr_next_value1 = 14'd0;
reg           builder_basesoc_adr_wishbone2csr_next_value_ce1 = 1'd0;
wire          builder_basesoc_crg_ecp5pll;
wire          builder_basesoc_crg_locked;
wire   [31:0] builder_basesoc_dat_r;
reg    [31:0] builder_basesoc_dat_w = 32'd0;
reg    [31:0] builder_basesoc_dat_w_wishbone2csr_next_value0 = 32'd0;
reg           builder_basesoc_dat_w_wishbone2csr_next_value_ce0 = 1'd0;
reg     [1:0] builder_basesoc_fsm_next_state = 2'd0;
reg     [1:0] builder_basesoc_fsm_state = 2'd0;
reg     [1:0] builder_basesoc_fullmemorywe_next_state = 2'd0;
reg     [1:0] builder_basesoc_fullmemorywe_state = 2'd0;
reg     [2:0] builder_basesoc_litedramcore_bankmachine0_next_state = 3'd0;
reg     [2:0] builder_basesoc_litedramcore_bankmachine0_state = 3'd0;
reg     [2:0] builder_basesoc_litedramcore_bankmachine1_next_state = 3'd0;
reg     [2:0] builder_basesoc_litedramcore_bankmachine1_state = 3'd0;
reg     [2:0] builder_basesoc_litedramcore_bankmachine2_next_state = 3'd0;
reg     [2:0] builder_basesoc_litedramcore_bankmachine2_state = 3'd0;
reg     [2:0] builder_basesoc_litedramcore_bankmachine3_next_state = 3'd0;
reg     [2:0] builder_basesoc_litedramcore_bankmachine3_state = 3'd0;
reg           builder_basesoc_litedramcore_locked0 = 1'd0;
reg           builder_basesoc_litedramcore_locked1 = 1'd0;
reg           builder_basesoc_litedramcore_locked2 = 1'd0;
reg           builder_basesoc_litedramcore_locked3 = 1'd0;
reg     [2:0] builder_basesoc_litedramcore_multiplexer_next_state = 3'd0;
reg     [2:0] builder_basesoc_litedramcore_multiplexer_state = 3'd0;
reg           builder_basesoc_litedramcore_new_master_rdata_valid0 = 1'd0;
reg           builder_basesoc_litedramcore_new_master_rdata_valid1 = 1'd0;
reg           builder_basesoc_litedramcore_new_master_rdata_valid2 = 1'd0;
reg           builder_basesoc_litedramcore_new_master_rdata_valid3 = 1'd0;
reg           builder_basesoc_litedramcore_new_master_wdata_ready = 1'd0;
reg     [1:0] builder_basesoc_litedramcore_refresher_next_state = 2'd0;
reg     [1:0] builder_basesoc_litedramcore_refresher_state = 2'd0;
wire          builder_basesoc_litedramcore_roundrobin0_ce;
wire          builder_basesoc_litedramcore_roundrobin0_grant;
wire          builder_basesoc_litedramcore_roundrobin0_request;
wire          builder_basesoc_litedramcore_roundrobin1_ce;
wire          builder_basesoc_litedramcore_roundrobin1_grant;
wire          builder_basesoc_litedramcore_roundrobin1_request;
wire          builder_basesoc_litedramcore_roundrobin2_ce;
wire          builder_basesoc_litedramcore_roundrobin2_grant;
wire          builder_basesoc_litedramcore_roundrobin2_request;
wire          builder_basesoc_litedramcore_roundrobin3_ce;
wire          builder_basesoc_litedramcore_roundrobin3_grant;
wire          builder_basesoc_litedramcore_roundrobin3_request;
reg           builder_basesoc_litedramnativeportconverter_next_state = 1'd0;
reg           builder_basesoc_litedramnativeportconverter_state = 1'd0;
reg           builder_basesoc_rs232phyrx_next_state = 1'd0;
reg           builder_basesoc_rs232phyrx_state = 1'd0;
reg           builder_basesoc_rs232phytx_next_state = 1'd0;
reg           builder_basesoc_rs232phytx_state = 1'd0;
reg     [1:0] builder_basesoc_spimaster_next_state = 2'd0;
reg     [1:0] builder_basesoc_spimaster_state = 2'd0;
reg     [2:0] builder_basesoc_uartbone_next_state = 3'd0;
reg     [2:0] builder_basesoc_uartbone_state = 3'd0;
reg           builder_basesoc_we = 1'd0;
reg           builder_basesoc_we_wishbone2csr_next_value2 = 1'd0;
reg           builder_basesoc_we_wishbone2csr_next_value_ce2 = 1'd0;
reg     [1:0] builder_basesoc_wishbone2csr_next_state = 2'd0;
reg     [1:0] builder_basesoc_wishbone2csr_state = 2'd0;
reg           builder_basesoc_wishbone_ack = 1'd0;
wire   [29:0] builder_basesoc_wishbone_adr;
wire    [1:0] builder_basesoc_wishbone_bte;
wire    [2:0] builder_basesoc_wishbone_cti;
wire          builder_basesoc_wishbone_cyc;
reg    [31:0] builder_basesoc_wishbone_dat_r = 32'd0;
wire   [31:0] builder_basesoc_wishbone_dat_w;
reg           builder_basesoc_wishbone_err = 1'd0;
wire    [3:0] builder_basesoc_wishbone_sel;
wire          builder_basesoc_wishbone_stb;
wire          builder_basesoc_wishbone_we;
reg    [31:0] builder_comb_rhs_self0 = 32'd0;
reg    [31:0] builder_comb_rhs_self1 = 32'd0;
reg     [1:0] builder_comb_rhs_self10 = 2'd0;
reg           builder_comb_rhs_self11 = 1'd0;
reg           builder_comb_rhs_self12 = 1'd0;
reg           builder_comb_rhs_self13 = 1'd0;
reg           builder_comb_rhs_self14 = 1'd0;
reg    [12:0] builder_comb_rhs_self15 = 13'd0;
reg     [1:0] builder_comb_rhs_self16 = 2'd0;
reg           builder_comb_rhs_self17 = 1'd0;
reg           builder_comb_rhs_self18 = 1'd0;
reg           builder_comb_rhs_self19 = 1'd0;
reg     [3:0] builder_comb_rhs_self2 = 4'd0;
reg    [21:0] builder_comb_rhs_self20 = 22'd0;
reg           builder_comb_rhs_self21 = 1'd0;
reg           builder_comb_rhs_self22 = 1'd0;
reg    [21:0] builder_comb_rhs_self23 = 22'd0;
reg           builder_comb_rhs_self24 = 1'd0;
reg           builder_comb_rhs_self25 = 1'd0;
reg    [21:0] builder_comb_rhs_self26 = 22'd0;
reg           builder_comb_rhs_self27 = 1'd0;
reg           builder_comb_rhs_self28 = 1'd0;
reg    [21:0] builder_comb_rhs_self29 = 22'd0;
reg           builder_comb_rhs_self3 = 1'd0;
reg           builder_comb_rhs_self30 = 1'd0;
reg           builder_comb_rhs_self31 = 1'd0;
reg           builder_comb_rhs_self4 = 1'd0;
reg           builder_comb_rhs_self5 = 1'd0;
reg     [2:0] builder_comb_rhs_self6 = 3'd0;
reg     [1:0] builder_comb_rhs_self7 = 2'd0;
reg           builder_comb_rhs_self8 = 1'd0;
reg    [12:0] builder_comb_rhs_self9 = 13'd0;
reg           builder_comb_t_self0 = 1'd0;
reg           builder_comb_t_self1 = 1'd0;
reg           builder_comb_t_self2 = 1'd0;
reg           builder_comb_t_self3 = 1'd0;
reg           builder_comb_t_self4 = 1'd0;
reg           builder_comb_t_self5 = 1'd0;
reg    [19:0] builder_count = 20'd1000000;
wire    [5:0] builder_csr_bankarray_adr;
wire   [31:0] builder_csr_bankarray_csrbank0_bus_errors_r;
reg           builder_csr_bankarray_csrbank0_bus_errors_re = 1'd0;
wire   [31:0] builder_csr_bankarray_csrbank0_bus_errors_w;
reg           builder_csr_bankarray_csrbank0_bus_errors_we = 1'd0;
wire    [1:0] builder_csr_bankarray_csrbank0_reset0_r;
reg           builder_csr_bankarray_csrbank0_reset0_re = 1'd0;
wire    [1:0] builder_csr_bankarray_csrbank0_reset0_w;
reg           builder_csr_bankarray_csrbank0_reset0_we = 1'd0;
wire   [31:0] builder_csr_bankarray_csrbank0_scratch0_r;
reg           builder_csr_bankarray_csrbank0_scratch0_re = 1'd0;
wire   [31:0] builder_csr_bankarray_csrbank0_scratch0_w;
reg           builder_csr_bankarray_csrbank0_scratch0_we = 1'd0;
wire          builder_csr_bankarray_csrbank0_sel;
wire    [7:0] builder_csr_bankarray_csrbank1_out0_r;
reg           builder_csr_bankarray_csrbank1_out0_re = 1'd0;
wire    [7:0] builder_csr_bankarray_csrbank1_out0_w;
reg           builder_csr_bankarray_csrbank1_out0_we = 1'd0;
wire          builder_csr_bankarray_csrbank1_sel;
wire    [3:0] builder_csr_bankarray_csrbank2_dfii_control0_r;
reg           builder_csr_bankarray_csrbank2_dfii_control0_re = 1'd0;
wire    [3:0] builder_csr_bankarray_csrbank2_dfii_control0_w;
reg           builder_csr_bankarray_csrbank2_dfii_control0_we = 1'd0;
wire   [12:0] builder_csr_bankarray_csrbank2_dfii_pi0_address0_r;
reg           builder_csr_bankarray_csrbank2_dfii_pi0_address0_re = 1'd0;
wire   [12:0] builder_csr_bankarray_csrbank2_dfii_pi0_address0_w;
reg           builder_csr_bankarray_csrbank2_dfii_pi0_address0_we = 1'd0;
wire    [1:0] builder_csr_bankarray_csrbank2_dfii_pi0_baddress0_r;
reg           builder_csr_bankarray_csrbank2_dfii_pi0_baddress0_re = 1'd0;
wire    [1:0] builder_csr_bankarray_csrbank2_dfii_pi0_baddress0_w;
reg           builder_csr_bankarray_csrbank2_dfii_pi0_baddress0_we = 1'd0;
wire    [7:0] builder_csr_bankarray_csrbank2_dfii_pi0_command0_r;
reg           builder_csr_bankarray_csrbank2_dfii_pi0_command0_re = 1'd0;
wire    [7:0] builder_csr_bankarray_csrbank2_dfii_pi0_command0_w;
reg           builder_csr_bankarray_csrbank2_dfii_pi0_command0_we = 1'd0;
wire   [15:0] builder_csr_bankarray_csrbank2_dfii_pi0_rddata_r;
reg           builder_csr_bankarray_csrbank2_dfii_pi0_rddata_re = 1'd0;
wire   [15:0] builder_csr_bankarray_csrbank2_dfii_pi0_rddata_w;
reg           builder_csr_bankarray_csrbank2_dfii_pi0_rddata_we = 1'd0;
wire   [15:0] builder_csr_bankarray_csrbank2_dfii_pi0_wrdata0_r;
reg           builder_csr_bankarray_csrbank2_dfii_pi0_wrdata0_re = 1'd0;
wire   [15:0] builder_csr_bankarray_csrbank2_dfii_pi0_wrdata0_w;
reg           builder_csr_bankarray_csrbank2_dfii_pi0_wrdata0_we = 1'd0;
wire          builder_csr_bankarray_csrbank2_sel;
wire   [15:0] builder_csr_bankarray_csrbank3_clk_divider0_r;
reg           builder_csr_bankarray_csrbank3_clk_divider0_re = 1'd0;
wire   [15:0] builder_csr_bankarray_csrbank3_clk_divider0_w;
reg           builder_csr_bankarray_csrbank3_clk_divider0_we = 1'd0;
wire   [15:0] builder_csr_bankarray_csrbank3_control0_r;
reg           builder_csr_bankarray_csrbank3_control0_re = 1'd0;
wire   [15:0] builder_csr_bankarray_csrbank3_control0_w;
reg           builder_csr_bankarray_csrbank3_control0_we = 1'd0;
wire   [16:0] builder_csr_bankarray_csrbank3_cs0_r;
reg           builder_csr_bankarray_csrbank3_cs0_re = 1'd0;
wire   [16:0] builder_csr_bankarray_csrbank3_cs0_w;
reg           builder_csr_bankarray_csrbank3_cs0_we = 1'd0;
wire          builder_csr_bankarray_csrbank3_loopback0_r;
reg           builder_csr_bankarray_csrbank3_loopback0_re = 1'd0;
wire          builder_csr_bankarray_csrbank3_loopback0_w;
reg           builder_csr_bankarray_csrbank3_loopback0_we = 1'd0;
wire    [7:0] builder_csr_bankarray_csrbank3_miso_r;
reg           builder_csr_bankarray_csrbank3_miso_re = 1'd0;
wire    [7:0] builder_csr_bankarray_csrbank3_miso_w;
reg           builder_csr_bankarray_csrbank3_miso_we = 1'd0;
wire    [7:0] builder_csr_bankarray_csrbank3_mosi0_r;
reg           builder_csr_bankarray_csrbank3_mosi0_re = 1'd0;
wire    [7:0] builder_csr_bankarray_csrbank3_mosi0_w;
reg           builder_csr_bankarray_csrbank3_mosi0_we = 1'd0;
wire          builder_csr_bankarray_csrbank3_sel;
wire    [1:0] builder_csr_bankarray_csrbank3_status_r;
reg           builder_csr_bankarray_csrbank3_status_re = 1'd0;
wire    [1:0] builder_csr_bankarray_csrbank3_status_w;
reg           builder_csr_bankarray_csrbank3_status_we = 1'd0;
wire          builder_csr_bankarray_csrbank4_en0_r;
reg           builder_csr_bankarray_csrbank4_en0_re = 1'd0;
wire          builder_csr_bankarray_csrbank4_en0_w;
reg           builder_csr_bankarray_csrbank4_en0_we = 1'd0;
wire          builder_csr_bankarray_csrbank4_ev_enable0_r;
reg           builder_csr_bankarray_csrbank4_ev_enable0_re = 1'd0;
wire          builder_csr_bankarray_csrbank4_ev_enable0_w;
reg           builder_csr_bankarray_csrbank4_ev_enable0_we = 1'd0;
wire          builder_csr_bankarray_csrbank4_ev_pending_r;
reg           builder_csr_bankarray_csrbank4_ev_pending_re = 1'd0;
wire          builder_csr_bankarray_csrbank4_ev_pending_w;
reg           builder_csr_bankarray_csrbank4_ev_pending_we = 1'd0;
wire          builder_csr_bankarray_csrbank4_ev_status_r;
reg           builder_csr_bankarray_csrbank4_ev_status_re = 1'd0;
wire          builder_csr_bankarray_csrbank4_ev_status_w;
reg           builder_csr_bankarray_csrbank4_ev_status_we = 1'd0;
wire   [31:0] builder_csr_bankarray_csrbank4_load0_r;
reg           builder_csr_bankarray_csrbank4_load0_re = 1'd0;
wire   [31:0] builder_csr_bankarray_csrbank4_load0_w;
reg           builder_csr_bankarray_csrbank4_load0_we = 1'd0;
wire   [31:0] builder_csr_bankarray_csrbank4_reload0_r;
reg           builder_csr_bankarray_csrbank4_reload0_re = 1'd0;
wire   [31:0] builder_csr_bankarray_csrbank4_reload0_w;
reg           builder_csr_bankarray_csrbank4_reload0_we = 1'd0;
wire          builder_csr_bankarray_csrbank4_sel;
wire          builder_csr_bankarray_csrbank4_update_value0_r;
reg           builder_csr_bankarray_csrbank4_update_value0_re = 1'd0;
wire          builder_csr_bankarray_csrbank4_update_value0_w;
reg           builder_csr_bankarray_csrbank4_update_value0_we = 1'd0;
wire   [31:0] builder_csr_bankarray_csrbank4_value_r;
reg           builder_csr_bankarray_csrbank4_value_re = 1'd0;
wire   [31:0] builder_csr_bankarray_csrbank4_value_w;
reg           builder_csr_bankarray_csrbank4_value_we = 1'd0;
wire    [1:0] builder_csr_bankarray_csrbank5_ev_enable0_r;
reg           builder_csr_bankarray_csrbank5_ev_enable0_re = 1'd0;
wire    [1:0] builder_csr_bankarray_csrbank5_ev_enable0_w;
reg           builder_csr_bankarray_csrbank5_ev_enable0_we = 1'd0;
wire    [1:0] builder_csr_bankarray_csrbank5_ev_pending_r;
reg           builder_csr_bankarray_csrbank5_ev_pending_re = 1'd0;
wire    [1:0] builder_csr_bankarray_csrbank5_ev_pending_w;
reg           builder_csr_bankarray_csrbank5_ev_pending_we = 1'd0;
wire    [1:0] builder_csr_bankarray_csrbank5_ev_status_r;
reg           builder_csr_bankarray_csrbank5_ev_status_re = 1'd0;
wire    [1:0] builder_csr_bankarray_csrbank5_ev_status_w;
reg           builder_csr_bankarray_csrbank5_ev_status_we = 1'd0;
wire          builder_csr_bankarray_csrbank5_rxempty_r;
reg           builder_csr_bankarray_csrbank5_rxempty_re = 1'd0;
wire          builder_csr_bankarray_csrbank5_rxempty_w;
reg           builder_csr_bankarray_csrbank5_rxempty_we = 1'd0;
wire          builder_csr_bankarray_csrbank5_rxfull_r;
reg           builder_csr_bankarray_csrbank5_rxfull_re = 1'd0;
wire          builder_csr_bankarray_csrbank5_rxfull_w;
reg           builder_csr_bankarray_csrbank5_rxfull_we = 1'd0;
wire          builder_csr_bankarray_csrbank5_sel;
wire          builder_csr_bankarray_csrbank5_txempty_r;
reg           builder_csr_bankarray_csrbank5_txempty_re = 1'd0;
wire          builder_csr_bankarray_csrbank5_txempty_w;
reg           builder_csr_bankarray_csrbank5_txempty_we = 1'd0;
wire          builder_csr_bankarray_csrbank5_txfull_r;
reg           builder_csr_bankarray_csrbank5_txfull_re = 1'd0;
wire          builder_csr_bankarray_csrbank5_txfull_w;
reg           builder_csr_bankarray_csrbank5_txfull_we = 1'd0;
wire    [1:0] builder_csr_bankarray_csrbank5_xover_ev_enable0_r;
reg           builder_csr_bankarray_csrbank5_xover_ev_enable0_re = 1'd0;
wire    [1:0] builder_csr_bankarray_csrbank5_xover_ev_enable0_w;
reg           builder_csr_bankarray_csrbank5_xover_ev_enable0_we = 1'd0;
wire    [1:0] builder_csr_bankarray_csrbank5_xover_ev_pending_r;
reg           builder_csr_bankarray_csrbank5_xover_ev_pending_re = 1'd0;
wire    [1:0] builder_csr_bankarray_csrbank5_xover_ev_pending_w;
reg           builder_csr_bankarray_csrbank5_xover_ev_pending_we = 1'd0;
wire    [1:0] builder_csr_bankarray_csrbank5_xover_ev_status_r;
reg           builder_csr_bankarray_csrbank5_xover_ev_status_re = 1'd0;
wire    [1:0] builder_csr_bankarray_csrbank5_xover_ev_status_w;
reg           builder_csr_bankarray_csrbank5_xover_ev_status_we = 1'd0;
wire          builder_csr_bankarray_csrbank5_xover_rxempty_r;
reg           builder_csr_bankarray_csrbank5_xover_rxempty_re = 1'd0;
wire          builder_csr_bankarray_csrbank5_xover_rxempty_w;
reg           builder_csr_bankarray_csrbank5_xover_rxempty_we = 1'd0;
wire          builder_csr_bankarray_csrbank5_xover_rxfull_r;
reg           builder_csr_bankarray_csrbank5_xover_rxfull_re = 1'd0;
wire          builder_csr_bankarray_csrbank5_xover_rxfull_w;
reg           builder_csr_bankarray_csrbank5_xover_rxfull_we = 1'd0;
wire          builder_csr_bankarray_csrbank5_xover_txempty_r;
reg           builder_csr_bankarray_csrbank5_xover_txempty_re = 1'd0;
wire          builder_csr_bankarray_csrbank5_xover_txempty_w;
reg           builder_csr_bankarray_csrbank5_xover_txempty_we = 1'd0;
wire          builder_csr_bankarray_csrbank5_xover_txfull_r;
reg           builder_csr_bankarray_csrbank5_xover_txfull_re = 1'd0;
wire          builder_csr_bankarray_csrbank5_xover_txfull_w;
reg           builder_csr_bankarray_csrbank5_xover_txfull_we = 1'd0;
wire    [7:0] builder_csr_bankarray_dat_r;
wire   [13:0] builder_csr_bankarray_interface0_bank_bus_adr;
reg    [31:0] builder_csr_bankarray_interface0_bank_bus_dat_r = 32'd0;
wire   [31:0] builder_csr_bankarray_interface0_bank_bus_dat_w;
wire          builder_csr_bankarray_interface0_bank_bus_we;
wire   [13:0] builder_csr_bankarray_interface1_bank_bus_adr;
reg    [31:0] builder_csr_bankarray_interface1_bank_bus_dat_r = 32'd0;
wire   [31:0] builder_csr_bankarray_interface1_bank_bus_dat_w;
wire          builder_csr_bankarray_interface1_bank_bus_we;
wire   [13:0] builder_csr_bankarray_interface2_bank_bus_adr;
reg    [31:0] builder_csr_bankarray_interface2_bank_bus_dat_r = 32'd0;
wire   [31:0] builder_csr_bankarray_interface2_bank_bus_dat_w;
wire          builder_csr_bankarray_interface2_bank_bus_we;
wire   [13:0] builder_csr_bankarray_interface3_bank_bus_adr;
reg    [31:0] builder_csr_bankarray_interface3_bank_bus_dat_r = 32'd0;
wire   [31:0] builder_csr_bankarray_interface3_bank_bus_dat_w;
wire          builder_csr_bankarray_interface3_bank_bus_we;
wire   [13:0] builder_csr_bankarray_interface4_bank_bus_adr;
reg    [31:0] builder_csr_bankarray_interface4_bank_bus_dat_r = 32'd0;
wire   [31:0] builder_csr_bankarray_interface4_bank_bus_dat_w;
wire          builder_csr_bankarray_interface4_bank_bus_we;
wire   [13:0] builder_csr_bankarray_interface5_bank_bus_adr;
reg    [31:0] builder_csr_bankarray_interface5_bank_bus_dat_r = 32'd0;
wire   [31:0] builder_csr_bankarray_interface5_bank_bus_dat_w;
wire          builder_csr_bankarray_interface5_bank_bus_we;
wire          builder_csr_bankarray_sel;
reg           builder_csr_bankarray_sel_r = 1'd0;
wire   [13:0] builder_csr_bankarray_sram_bus_adr;
reg    [31:0] builder_csr_bankarray_sram_bus_dat_r = 32'd0;
wire   [31:0] builder_csr_bankarray_sram_bus_dat_w;
wire          builder_csr_bankarray_sram_bus_we;
wire   [13:0] builder_csr_interconnect_adr;
wire   [31:0] builder_csr_interconnect_dat_r;
wire   [31:0] builder_csr_interconnect_dat_w;
wire          builder_csr_interconnect_we;
wire          builder_done;
reg           builder_error = 1'd0;
reg     [1:0] builder_grant = 2'd0;
wire          builder_inferedsdrtristate0__i;
wire          builder_inferedsdrtristate0__o;
reg           builder_inferedsdrtristate0_oe = 1'd0;
wire          builder_inferedsdrtristate10__i;
wire          builder_inferedsdrtristate10__o;
reg           builder_inferedsdrtristate10_oe = 1'd0;
wire          builder_inferedsdrtristate11__i;
wire          builder_inferedsdrtristate11__o;
reg           builder_inferedsdrtristate11_oe = 1'd0;
wire          builder_inferedsdrtristate12__i;
wire          builder_inferedsdrtristate12__o;
reg           builder_inferedsdrtristate12_oe = 1'd0;
wire          builder_inferedsdrtristate13__i;
wire          builder_inferedsdrtristate13__o;
reg           builder_inferedsdrtristate13_oe = 1'd0;
wire          builder_inferedsdrtristate14__i;
wire          builder_inferedsdrtristate14__o;
reg           builder_inferedsdrtristate14_oe = 1'd0;
wire          builder_inferedsdrtristate15__i;
wire          builder_inferedsdrtristate15__o;
reg           builder_inferedsdrtristate15_oe = 1'd0;
wire          builder_inferedsdrtristate1__i;
wire          builder_inferedsdrtristate1__o;
reg           builder_inferedsdrtristate1_oe = 1'd0;
wire          builder_inferedsdrtristate2__i;
wire          builder_inferedsdrtristate2__o;
reg           builder_inferedsdrtristate2_oe = 1'd0;
wire          builder_inferedsdrtristate3__i;
wire          builder_inferedsdrtristate3__o;
reg           builder_inferedsdrtristate3_oe = 1'd0;
wire          builder_inferedsdrtristate4__i;
wire          builder_inferedsdrtristate4__o;
reg           builder_inferedsdrtristate4_oe = 1'd0;
wire          builder_inferedsdrtristate5__i;
wire          builder_inferedsdrtristate5__o;
reg           builder_inferedsdrtristate5_oe = 1'd0;
wire          builder_inferedsdrtristate6__i;
wire          builder_inferedsdrtristate6__o;
reg           builder_inferedsdrtristate6_oe = 1'd0;
wire          builder_inferedsdrtristate7__i;
wire          builder_inferedsdrtristate7__o;
reg           builder_inferedsdrtristate7_oe = 1'd0;
wire          builder_inferedsdrtristate8__i;
wire          builder_inferedsdrtristate8__o;
reg           builder_inferedsdrtristate8_oe = 1'd0;
wire          builder_inferedsdrtristate9__i;
wire          builder_inferedsdrtristate9__o;
reg           builder_inferedsdrtristate9_oe = 1'd0;
reg     [4:0] builder_master = 5'd0;
reg           builder_regs0 = 1'd0;
reg           builder_regs1 = 1'd0;
wire    [2:0] builder_request;
wire          builder_rst10;
wire          builder_rst11;
reg           builder_shared_ack = 1'd0;
wire   [29:0] builder_shared_adr;
wire    [1:0] builder_shared_bte;
wire    [2:0] builder_shared_cti;
wire          builder_shared_cyc;
reg    [31:0] builder_shared_dat_r = 32'd0;
wire   [31:0] builder_shared_dat_w;
wire          builder_shared_err;
wire    [3:0] builder_shared_sel;
wire          builder_shared_stb;
wire          builder_shared_we;
reg     [4:0] builder_slaves = 5'd0;
reg           builder_sync_f_self = 1'd0;
reg     [1:0] builder_sync_rhs_self0 = 2'd0;
reg    [12:0] builder_sync_rhs_self1 = 13'd0;
reg           builder_sync_rhs_self2 = 1'd0;
reg           builder_sync_rhs_self3 = 1'd0;
reg           builder_sync_rhs_self4 = 1'd0;
reg           builder_sync_rhs_self5 = 1'd0;
reg           builder_sync_rhs_self6 = 1'd0;
wire          builder_wait;
reg     [1:0] main_adr_offset_r = 2'd0;
reg     [1:0] main_basesoc_addr_bytes_count = 2'd0;
reg     [1:0] main_basesoc_addr_bytes_count_uartbone_next_value1 = 2'd0;
reg           main_basesoc_addr_bytes_count_uartbone_next_value_ce1 = 1'd0;
reg    [31:0] main_basesoc_address = 32'd0;
reg    [31:0] main_basesoc_address_uartbone_next_value5 = 32'd0;
reg           main_basesoc_address_uartbone_next_value_ce5 = 1'd0;
wire   [14:0] main_basesoc_adr;
reg           main_basesoc_adr_burst = 1'd0;
reg     [7:0] main_basesoc_cmd = 8'd0;
reg     [7:0] main_basesoc_cmd_uartbone_next_value3 = 8'd0;
reg           main_basesoc_cmd_uartbone_next_value_ce3 = 1'd0;
reg    [21:0] main_basesoc_count = 22'd4000000;
wire   [31:0] main_basesoc_dat_r;
reg    [31:0] main_basesoc_data = 32'd0;
reg     [1:0] main_basesoc_data_bytes_count = 2'd0;
reg     [1:0] main_basesoc_data_bytes_count_uartbone_next_value0 = 2'd0;
reg           main_basesoc_data_bytes_count_uartbone_next_value_ce0 = 1'd0;
reg    [31:0] main_basesoc_data_uartbone_next_value7 = 32'd0;
reg           main_basesoc_data_uartbone_next_value_ce7 = 1'd0;
wire          main_basesoc_done;
reg           main_basesoc_incr = 1'd0;
reg           main_basesoc_incr_uartbone_next_value6 = 1'd0;
reg           main_basesoc_incr_uartbone_next_value_ce6 = 1'd0;
reg           main_basesoc_is_ongoing = 1'd0;
reg     [7:0] main_basesoc_length = 8'd0;
reg     [7:0] main_basesoc_length_uartbone_next_value4 = 8'd0;
reg           main_basesoc_length_uartbone_next_value_ce4 = 1'd0;
reg           main_basesoc_ram_bus_ack = 1'd0;
wire   [29:0] main_basesoc_ram_bus_adr;
wire    [1:0] main_basesoc_ram_bus_bte;
wire    [2:0] main_basesoc_ram_bus_cti;
wire          main_basesoc_ram_bus_cyc;
wire   [31:0] main_basesoc_ram_bus_dat_r;
wire   [31:0] main_basesoc_ram_bus_dat_w;
reg           main_basesoc_ram_bus_err = 1'd0;
wire    [3:0] main_basesoc_ram_bus_sel;
wire          main_basesoc_ram_bus_stb;
wire          main_basesoc_ram_bus_we;
wire          main_basesoc_reset;
reg     [3:0] main_basesoc_rx_count = 4'd0;
reg     [3:0] main_basesoc_rx_count_rs232phyrx_next_value0 = 4'd0;
reg           main_basesoc_rx_count_rs232phyrx_next_value_ce0 = 1'd0;
reg     [7:0] main_basesoc_rx_data = 8'd0;
reg     [7:0] main_basesoc_rx_data_rs232phyrx_next_value1 = 8'd0;
reg           main_basesoc_rx_data_rs232phyrx_next_value_ce1 = 1'd0;
reg           main_basesoc_rx_enable = 1'd0;
reg    [31:0] main_basesoc_rx_phase = 32'd0;
wire          main_basesoc_rx_rx;
reg           main_basesoc_rx_rx_d = 1'd0;
reg     [7:0] main_basesoc_rx_source_payload_data = 8'd0;
reg           main_basesoc_rx_source_ready = 1'd0;
reg           main_basesoc_rx_source_valid = 1'd0;
reg           main_basesoc_rx_tick = 1'd0;
reg           main_basesoc_serial_tx_rs232phytx_next_value1 = 1'd0;
reg           main_basesoc_serial_tx_rs232phytx_next_value_ce1 = 1'd0;
reg     [3:0] main_basesoc_tx_count = 4'd0;
reg     [3:0] main_basesoc_tx_count_rs232phytx_next_value0 = 4'd0;
reg           main_basesoc_tx_count_rs232phytx_next_value_ce0 = 1'd0;
reg     [7:0] main_basesoc_tx_data = 8'd0;
reg     [7:0] main_basesoc_tx_data_rs232phytx_next_value2 = 8'd0;
reg           main_basesoc_tx_data_rs232phytx_next_value_ce2 = 1'd0;
reg           main_basesoc_tx_enable = 1'd0;
reg    [31:0] main_basesoc_tx_phase = 32'd0;
wire          main_basesoc_tx_sink_last;
reg     [7:0] main_basesoc_tx_sink_payload_data = 8'd0;
reg           main_basesoc_tx_sink_ready = 1'd0;
reg           main_basesoc_tx_sink_valid = 1'd0;
reg           main_basesoc_tx_tick = 1'd0;
wire          main_basesoc_wait;
wire          main_basesoc_wishbone_ack;
wire   [31:0] main_basesoc_wishbone_adr;
reg     [1:0] main_basesoc_wishbone_bte = 2'd0;
reg     [2:0] main_basesoc_wishbone_cti = 3'd0;
reg           main_basesoc_wishbone_cyc = 1'd0;
wire   [31:0] main_basesoc_wishbone_dat_r;
wire   [31:0] main_basesoc_wishbone_dat_w;
wire          main_basesoc_wishbone_err;
wire    [3:0] main_basesoc_wishbone_sel;
reg           main_basesoc_wishbone_stb = 1'd0;
reg           main_basesoc_wishbone_we = 1'd0;
reg     [7:0] main_basesoc_words_count = 8'd0;
reg     [7:0] main_basesoc_words_count_uartbone_next_value2 = 8'd0;
reg           main_basesoc_words_count_uartbone_next_value_ce2 = 1'd0;
wire          main_bus_error;
reg    [31:0] main_bus_errors = 32'd0;
reg           main_bus_errors_re = 1'd0;
wire   [31:0] main_bus_errors_status;
wire          main_bus_errors_we;
wire          main_clkin;
wire          main_clkout0;
wire          main_clkout1;
wire          main_cpu_dbus_dbus_ack;
wire   [29:0] main_cpu_dbus_dbus_adr;
wire    [1:0] main_cpu_dbus_dbus_bte;
wire    [2:0] main_cpu_dbus_dbus_cti;
wire          main_cpu_dbus_dbus_cyc;
wire   [31:0] main_cpu_dbus_dbus_dat_r;
wire   [31:0] main_cpu_dbus_dbus_dat_w;
wire          main_cpu_dbus_dbus_err;
wire    [3:0] main_cpu_dbus_dbus_sel;
wire          main_cpu_dbus_dbus_stb;
wire          main_cpu_dbus_dbus_we;
wire          main_cpu_ibus_ibus_ack;
wire   [29:0] main_cpu_ibus_ibus_adr;
wire    [1:0] main_cpu_ibus_ibus_bte;
wire    [2:0] main_cpu_ibus_ibus_cti;
wire          main_cpu_ibus_ibus_cyc;
wire   [31:0] main_cpu_ibus_ibus_dat_r;
wire   [31:0] main_cpu_ibus_ibus_dat_w;
wire          main_cpu_ibus_ibus_err;
wire    [3:0] main_cpu_ibus_ibus_sel;
wire          main_cpu_ibus_ibus_stb;
wire          main_cpu_ibus_ibus_we;
reg    [31:0] main_cpu_interrupt = 32'd0;
wire          main_cpu_reset;
wire          main_cpu_rst;
reg           main_cpu_vexriscv_dbus_err = 1'd0;
reg           main_cpu_vexriscv_debug_bus_ack = 1'd0;
wire   [29:0] main_cpu_vexriscv_debug_bus_adr;
wire    [1:0] main_cpu_vexriscv_debug_bus_bte;
wire    [2:0] main_cpu_vexriscv_debug_bus_cti;
wire          main_cpu_vexriscv_debug_bus_cyc;
reg    [31:0] main_cpu_vexriscv_debug_bus_dat_r = 32'd0;
wire   [31:0] main_cpu_vexriscv_debug_bus_dat_w;
reg           main_cpu_vexriscv_debug_bus_err = 1'd0;
wire    [3:0] main_cpu_vexriscv_debug_bus_sel;
wire          main_cpu_vexriscv_debug_bus_stb;
wire          main_cpu_vexriscv_debug_bus_we;
reg           main_cpu_vexriscv_debug_reset = 1'd0;
reg     [7:0] main_cpu_vexriscv_i_cmd_payload_address = 8'd0;
reg    [31:0] main_cpu_vexriscv_i_cmd_payload_data = 32'd0;
reg           main_cpu_vexriscv_i_cmd_payload_wr = 1'd0;
reg           main_cpu_vexriscv_i_cmd_valid = 1'd0;
reg           main_cpu_vexriscv_ibus_err = 1'd0;
wire          main_cpu_vexriscv_o_cmd_ready;
wire          main_cpu_vexriscv_o_resetOut;
wire   [31:0] main_cpu_vexriscv_o_rsp_data;
reg           main_cpu_vexriscv_reset_debug_logic = 1'd0;
reg           main_cpu_vexriscv_transfer_complete = 1'd0;
reg           main_cpu_vexriscv_transfer_in_progress = 1'd0;
reg           main_cpu_vexriscv_transfer_wait_for_ack = 1'd0;
wire    [8:0] main_data_port_adr;
wire  [127:0] main_data_port_dat_r;
reg   [127:0] main_data_port_dat_w = 128'd0;
reg    [15:0] main_data_port_we = 16'd0;
wire          main_dfi_p0_act_n;
wire   [12:0] main_dfi_p0_address;
wire    [1:0] main_dfi_p0_bank;
wire          main_dfi_p0_cas_n;
wire          main_dfi_p0_cke;
wire          main_dfi_p0_cs_n;
wire          main_dfi_p0_odt;
wire          main_dfi_p0_ras_n;
wire   [15:0] main_dfi_p0_rddata;
wire          main_dfi_p0_rddata_en;
reg           main_dfi_p0_rddata_valid = 1'd0;
wire          main_dfi_p0_reset_n;
wire          main_dfi_p0_we_n;
wire   [15:0] main_dfi_p0_wrdata;
wire          main_dfi_p0_wrdata_en;
wire    [1:0] main_dfi_p0_wrdata_mask;
reg           main_en_re = 1'd0;
reg           main_en_storage = 1'd0;
reg           main_enable_re = 1'd0;
reg           main_enable_storage = 1'd0;
reg           main_interface_ack = 1'd0;
wire   [29:0] main_interface_adr;
reg           main_interface_cyc = 1'd0;
reg   [127:0] main_interface_dat_r = 128'd0;
wire  [127:0] main_interface_dat_w;
wire   [15:0] main_interface_sel;
reg           main_interface_stb = 1'd0;
reg           main_interface_we = 1'd0;
wire          main_irq;
reg           main_load_re = 1'd0;
reg    [31:0] main_load_storage = 32'd0;
wire          main_locked;
reg           main_pending_r = 1'd0;
reg           main_pending_re = 1'd0;
reg           main_pending_status = 1'd0;
wire          main_pending_we;
reg    [23:0] main_port_cmd_payload_addr = 24'd0;
reg           main_port_cmd_payload_we = 1'd0;
wire          main_port_cmd_ready;
reg           main_port_cmd_valid = 1'd0;
reg           main_port_rdata_first = 1'd0;
reg           main_port_rdata_last = 1'd0;
wire   [15:0] main_port_rdata_payload_data;
wire          main_port_rdata_ready;
wire          main_port_rdata_valid;
wire          main_port_wdata_first;
wire          main_port_wdata_last;
wire   [15:0] main_port_wdata_payload_data;
wire    [1:0] main_port_wdata_payload_we;
wire          main_port_wdata_ready;
wire          main_port_wdata_valid;
wire   [10:0] main_ram_adr;
reg           main_ram_adr_burst = 1'd0;
reg           main_ram_bus_ram_bus_ack = 1'd0;
wire   [29:0] main_ram_bus_ram_bus_adr;
wire    [1:0] main_ram_bus_ram_bus_bte;
wire    [2:0] main_ram_bus_ram_bus_cti;
wire          main_ram_bus_ram_bus_cyc;
wire   [31:0] main_ram_bus_ram_bus_dat_r;
wire   [31:0] main_ram_bus_ram_bus_dat_w;
reg           main_ram_bus_ram_bus_err = 1'd0;
wire    [3:0] main_ram_bus_ram_bus_sel;
wire          main_ram_bus_ram_bus_stb;
wire          main_ram_bus_ram_bus_we;
wire   [31:0] main_ram_dat_r;
wire   [31:0] main_ram_dat_w;
reg     [3:0] main_ram_we = 4'd0;
reg     [2:0] main_rddata_en = 3'd0;
reg           main_re = 1'd0;
reg           main_reload_re = 1'd0;
reg    [31:0] main_reload_storage = 32'd0;
wire          main_reset;
reg           main_reset_re = 1'd0;
reg     [1:0] main_reset_storage = 2'd0;
reg           main_rst = 1'd0;
reg           main_scratch_re = 1'd0;
reg    [31:0] main_scratch_storage = 32'd305419896;
reg           main_sdram_address_re = 1'd0;
reg    [12:0] main_sdram_address_storage = 13'd0;
reg           main_sdram_baddress_re = 1'd0;
reg     [1:0] main_sdram_baddress_storage = 2'd0;
reg           main_sdram_bankmachine0_auto_precharge = 1'd0;
reg    [12:0] main_sdram_bankmachine0_cmd_payload_a = 13'd0;
wire    [1:0] main_sdram_bankmachine0_cmd_payload_ba;
reg           main_sdram_bankmachine0_cmd_payload_cas = 1'd0;
reg           main_sdram_bankmachine0_cmd_payload_is_cmd = 1'd0;
reg           main_sdram_bankmachine0_cmd_payload_is_read = 1'd0;
reg           main_sdram_bankmachine0_cmd_payload_is_write = 1'd0;
reg           main_sdram_bankmachine0_cmd_payload_ras = 1'd0;
reg           main_sdram_bankmachine0_cmd_payload_we = 1'd0;
reg           main_sdram_bankmachine0_cmd_ready = 1'd0;
reg           main_sdram_bankmachine0_cmd_valid = 1'd0;
reg     [2:0] main_sdram_bankmachine0_consume = 3'd0;
wire          main_sdram_bankmachine0_do_read;
wire          main_sdram_bankmachine0_fifo_in_first;
wire          main_sdram_bankmachine0_fifo_in_last;
wire   [21:0] main_sdram_bankmachine0_fifo_in_payload_addr;
wire          main_sdram_bankmachine0_fifo_in_payload_we;
wire          main_sdram_bankmachine0_fifo_out_first;
wire          main_sdram_bankmachine0_fifo_out_last;
wire   [21:0] main_sdram_bankmachine0_fifo_out_payload_addr;
wire          main_sdram_bankmachine0_fifo_out_payload_we;
reg     [3:0] main_sdram_bankmachine0_level = 4'd0;
wire          main_sdram_bankmachine0_pipe_valid_sink_first;
wire          main_sdram_bankmachine0_pipe_valid_sink_last;
wire   [21:0] main_sdram_bankmachine0_pipe_valid_sink_payload_addr;
wire          main_sdram_bankmachine0_pipe_valid_sink_payload_we;
wire          main_sdram_bankmachine0_pipe_valid_sink_ready;
wire          main_sdram_bankmachine0_pipe_valid_sink_valid;
reg           main_sdram_bankmachine0_pipe_valid_source_first = 1'd0;
reg           main_sdram_bankmachine0_pipe_valid_source_last = 1'd0;
reg    [21:0] main_sdram_bankmachine0_pipe_valid_source_payload_addr = 22'd0;
reg           main_sdram_bankmachine0_pipe_valid_source_payload_we = 1'd0;
wire          main_sdram_bankmachine0_pipe_valid_source_ready;
reg           main_sdram_bankmachine0_pipe_valid_source_valid = 1'd0;
reg     [2:0] main_sdram_bankmachine0_produce = 3'd0;
wire    [2:0] main_sdram_bankmachine0_rdport_adr;
wire   [24:0] main_sdram_bankmachine0_rdport_dat_r;
reg           main_sdram_bankmachine0_refresh_gnt = 1'd0;
wire          main_sdram_bankmachine0_refresh_req;
reg           main_sdram_bankmachine0_replace = 1'd0;
wire   [21:0] main_sdram_bankmachine0_req_addr;
wire          main_sdram_bankmachine0_req_lock;
reg           main_sdram_bankmachine0_req_rdata_valid = 1'd0;
wire          main_sdram_bankmachine0_req_ready;
wire          main_sdram_bankmachine0_req_valid;
reg           main_sdram_bankmachine0_req_wdata_ready = 1'd0;
wire          main_sdram_bankmachine0_req_we;
reg    [12:0] main_sdram_bankmachine0_row = 13'd0;
reg           main_sdram_bankmachine0_row_close = 1'd0;
reg           main_sdram_bankmachine0_row_col_n_addr_sel = 1'd0;
wire          main_sdram_bankmachine0_row_hit;
reg           main_sdram_bankmachine0_row_open = 1'd0;
reg           main_sdram_bankmachine0_row_opened = 1'd0;
reg           main_sdram_bankmachine0_sink_first = 1'd0;
reg           main_sdram_bankmachine0_sink_last = 1'd0;
wire   [21:0] main_sdram_bankmachine0_sink_payload_addr;
wire          main_sdram_bankmachine0_sink_payload_we;
wire          main_sdram_bankmachine0_sink_ready;
wire          main_sdram_bankmachine0_sink_sink_first;
wire          main_sdram_bankmachine0_sink_sink_last;
wire   [21:0] main_sdram_bankmachine0_sink_sink_payload_addr;
wire          main_sdram_bankmachine0_sink_sink_payload_we;
wire          main_sdram_bankmachine0_sink_sink_ready;
wire          main_sdram_bankmachine0_sink_sink_valid;
wire          main_sdram_bankmachine0_sink_valid;
wire          main_sdram_bankmachine0_source_first;
wire          main_sdram_bankmachine0_source_last;
wire   [21:0] main_sdram_bankmachine0_source_payload_addr;
wire          main_sdram_bankmachine0_source_payload_we;
wire          main_sdram_bankmachine0_source_ready;
wire          main_sdram_bankmachine0_source_source_first;
wire          main_sdram_bankmachine0_source_source_last;
wire   [21:0] main_sdram_bankmachine0_source_source_payload_addr;
wire          main_sdram_bankmachine0_source_source_payload_we;
wire          main_sdram_bankmachine0_source_source_ready;
wire          main_sdram_bankmachine0_source_source_valid;
wire          main_sdram_bankmachine0_source_valid;
wire   [24:0] main_sdram_bankmachine0_syncfifo0_din;
wire   [24:0] main_sdram_bankmachine0_syncfifo0_dout;
wire          main_sdram_bankmachine0_syncfifo0_re;
wire          main_sdram_bankmachine0_syncfifo0_readable;
wire          main_sdram_bankmachine0_syncfifo0_we;
wire          main_sdram_bankmachine0_syncfifo0_writable;
reg           main_sdram_bankmachine0_trascon_count = 1'd0;
reg           main_sdram_bankmachine0_trascon_ready = 1'd0;
wire          main_sdram_bankmachine0_trascon_valid;
reg     [1:0] main_sdram_bankmachine0_trccon_count = 2'd0;
reg           main_sdram_bankmachine0_trccon_ready = 1'd0;
wire          main_sdram_bankmachine0_trccon_valid;
reg     [1:0] main_sdram_bankmachine0_twtpcon_count = 2'd0;
reg           main_sdram_bankmachine0_twtpcon_ready = 1'd0;
wire          main_sdram_bankmachine0_twtpcon_valid;
reg     [2:0] main_sdram_bankmachine0_wrport_adr = 3'd0;
wire   [24:0] main_sdram_bankmachine0_wrport_dat_r;
wire   [24:0] main_sdram_bankmachine0_wrport_dat_w;
wire          main_sdram_bankmachine0_wrport_we;
reg           main_sdram_bankmachine1_auto_precharge = 1'd0;
reg    [12:0] main_sdram_bankmachine1_cmd_payload_a = 13'd0;
wire    [1:0] main_sdram_bankmachine1_cmd_payload_ba;
reg           main_sdram_bankmachine1_cmd_payload_cas = 1'd0;
reg           main_sdram_bankmachine1_cmd_payload_is_cmd = 1'd0;
reg           main_sdram_bankmachine1_cmd_payload_is_read = 1'd0;
reg           main_sdram_bankmachine1_cmd_payload_is_write = 1'd0;
reg           main_sdram_bankmachine1_cmd_payload_ras = 1'd0;
reg           main_sdram_bankmachine1_cmd_payload_we = 1'd0;
reg           main_sdram_bankmachine1_cmd_ready = 1'd0;
reg           main_sdram_bankmachine1_cmd_valid = 1'd0;
reg     [2:0] main_sdram_bankmachine1_consume = 3'd0;
wire          main_sdram_bankmachine1_do_read;
wire          main_sdram_bankmachine1_fifo_in_first;
wire          main_sdram_bankmachine1_fifo_in_last;
wire   [21:0] main_sdram_bankmachine1_fifo_in_payload_addr;
wire          main_sdram_bankmachine1_fifo_in_payload_we;
wire          main_sdram_bankmachine1_fifo_out_first;
wire          main_sdram_bankmachine1_fifo_out_last;
wire   [21:0] main_sdram_bankmachine1_fifo_out_payload_addr;
wire          main_sdram_bankmachine1_fifo_out_payload_we;
reg     [3:0] main_sdram_bankmachine1_level = 4'd0;
wire          main_sdram_bankmachine1_pipe_valid_sink_first;
wire          main_sdram_bankmachine1_pipe_valid_sink_last;
wire   [21:0] main_sdram_bankmachine1_pipe_valid_sink_payload_addr;
wire          main_sdram_bankmachine1_pipe_valid_sink_payload_we;
wire          main_sdram_bankmachine1_pipe_valid_sink_ready;
wire          main_sdram_bankmachine1_pipe_valid_sink_valid;
reg           main_sdram_bankmachine1_pipe_valid_source_first = 1'd0;
reg           main_sdram_bankmachine1_pipe_valid_source_last = 1'd0;
reg    [21:0] main_sdram_bankmachine1_pipe_valid_source_payload_addr = 22'd0;
reg           main_sdram_bankmachine1_pipe_valid_source_payload_we = 1'd0;
wire          main_sdram_bankmachine1_pipe_valid_source_ready;
reg           main_sdram_bankmachine1_pipe_valid_source_valid = 1'd0;
reg     [2:0] main_sdram_bankmachine1_produce = 3'd0;
wire    [2:0] main_sdram_bankmachine1_rdport_adr;
wire   [24:0] main_sdram_bankmachine1_rdport_dat_r;
reg           main_sdram_bankmachine1_refresh_gnt = 1'd0;
wire          main_sdram_bankmachine1_refresh_req;
reg           main_sdram_bankmachine1_replace = 1'd0;
wire   [21:0] main_sdram_bankmachine1_req_addr;
wire          main_sdram_bankmachine1_req_lock;
reg           main_sdram_bankmachine1_req_rdata_valid = 1'd0;
wire          main_sdram_bankmachine1_req_ready;
wire          main_sdram_bankmachine1_req_valid;
reg           main_sdram_bankmachine1_req_wdata_ready = 1'd0;
wire          main_sdram_bankmachine1_req_we;
reg    [12:0] main_sdram_bankmachine1_row = 13'd0;
reg           main_sdram_bankmachine1_row_close = 1'd0;
reg           main_sdram_bankmachine1_row_col_n_addr_sel = 1'd0;
wire          main_sdram_bankmachine1_row_hit;
reg           main_sdram_bankmachine1_row_open = 1'd0;
reg           main_sdram_bankmachine1_row_opened = 1'd0;
reg           main_sdram_bankmachine1_sink_first = 1'd0;
reg           main_sdram_bankmachine1_sink_last = 1'd0;
wire   [21:0] main_sdram_bankmachine1_sink_payload_addr;
wire          main_sdram_bankmachine1_sink_payload_we;
wire          main_sdram_bankmachine1_sink_ready;
wire          main_sdram_bankmachine1_sink_sink_first;
wire          main_sdram_bankmachine1_sink_sink_last;
wire   [21:0] main_sdram_bankmachine1_sink_sink_payload_addr;
wire          main_sdram_bankmachine1_sink_sink_payload_we;
wire          main_sdram_bankmachine1_sink_sink_ready;
wire          main_sdram_bankmachine1_sink_sink_valid;
wire          main_sdram_bankmachine1_sink_valid;
wire          main_sdram_bankmachine1_source_first;
wire          main_sdram_bankmachine1_source_last;
wire   [21:0] main_sdram_bankmachine1_source_payload_addr;
wire          main_sdram_bankmachine1_source_payload_we;
wire          main_sdram_bankmachine1_source_ready;
wire          main_sdram_bankmachine1_source_source_first;
wire          main_sdram_bankmachine1_source_source_last;
wire   [21:0] main_sdram_bankmachine1_source_source_payload_addr;
wire          main_sdram_bankmachine1_source_source_payload_we;
wire          main_sdram_bankmachine1_source_source_ready;
wire          main_sdram_bankmachine1_source_source_valid;
wire          main_sdram_bankmachine1_source_valid;
wire   [24:0] main_sdram_bankmachine1_syncfifo1_din;
wire   [24:0] main_sdram_bankmachine1_syncfifo1_dout;
wire          main_sdram_bankmachine1_syncfifo1_re;
wire          main_sdram_bankmachine1_syncfifo1_readable;
wire          main_sdram_bankmachine1_syncfifo1_we;
wire          main_sdram_bankmachine1_syncfifo1_writable;
reg           main_sdram_bankmachine1_trascon_count = 1'd0;
reg           main_sdram_bankmachine1_trascon_ready = 1'd0;
wire          main_sdram_bankmachine1_trascon_valid;
reg     [1:0] main_sdram_bankmachine1_trccon_count = 2'd0;
reg           main_sdram_bankmachine1_trccon_ready = 1'd0;
wire          main_sdram_bankmachine1_trccon_valid;
reg     [1:0] main_sdram_bankmachine1_twtpcon_count = 2'd0;
reg           main_sdram_bankmachine1_twtpcon_ready = 1'd0;
wire          main_sdram_bankmachine1_twtpcon_valid;
reg     [2:0] main_sdram_bankmachine1_wrport_adr = 3'd0;
wire   [24:0] main_sdram_bankmachine1_wrport_dat_r;
wire   [24:0] main_sdram_bankmachine1_wrport_dat_w;
wire          main_sdram_bankmachine1_wrport_we;
reg           main_sdram_bankmachine2_auto_precharge = 1'd0;
reg    [12:0] main_sdram_bankmachine2_cmd_payload_a = 13'd0;
wire    [1:0] main_sdram_bankmachine2_cmd_payload_ba;
reg           main_sdram_bankmachine2_cmd_payload_cas = 1'd0;
reg           main_sdram_bankmachine2_cmd_payload_is_cmd = 1'd0;
reg           main_sdram_bankmachine2_cmd_payload_is_read = 1'd0;
reg           main_sdram_bankmachine2_cmd_payload_is_write = 1'd0;
reg           main_sdram_bankmachine2_cmd_payload_ras = 1'd0;
reg           main_sdram_bankmachine2_cmd_payload_we = 1'd0;
reg           main_sdram_bankmachine2_cmd_ready = 1'd0;
reg           main_sdram_bankmachine2_cmd_valid = 1'd0;
reg     [2:0] main_sdram_bankmachine2_consume = 3'd0;
wire          main_sdram_bankmachine2_do_read;
wire          main_sdram_bankmachine2_fifo_in_first;
wire          main_sdram_bankmachine2_fifo_in_last;
wire   [21:0] main_sdram_bankmachine2_fifo_in_payload_addr;
wire          main_sdram_bankmachine2_fifo_in_payload_we;
wire          main_sdram_bankmachine2_fifo_out_first;
wire          main_sdram_bankmachine2_fifo_out_last;
wire   [21:0] main_sdram_bankmachine2_fifo_out_payload_addr;
wire          main_sdram_bankmachine2_fifo_out_payload_we;
reg     [3:0] main_sdram_bankmachine2_level = 4'd0;
wire          main_sdram_bankmachine2_pipe_valid_sink_first;
wire          main_sdram_bankmachine2_pipe_valid_sink_last;
wire   [21:0] main_sdram_bankmachine2_pipe_valid_sink_payload_addr;
wire          main_sdram_bankmachine2_pipe_valid_sink_payload_we;
wire          main_sdram_bankmachine2_pipe_valid_sink_ready;
wire          main_sdram_bankmachine2_pipe_valid_sink_valid;
reg           main_sdram_bankmachine2_pipe_valid_source_first = 1'd0;
reg           main_sdram_bankmachine2_pipe_valid_source_last = 1'd0;
reg    [21:0] main_sdram_bankmachine2_pipe_valid_source_payload_addr = 22'd0;
reg           main_sdram_bankmachine2_pipe_valid_source_payload_we = 1'd0;
wire          main_sdram_bankmachine2_pipe_valid_source_ready;
reg           main_sdram_bankmachine2_pipe_valid_source_valid = 1'd0;
reg     [2:0] main_sdram_bankmachine2_produce = 3'd0;
wire    [2:0] main_sdram_bankmachine2_rdport_adr;
wire   [24:0] main_sdram_bankmachine2_rdport_dat_r;
reg           main_sdram_bankmachine2_refresh_gnt = 1'd0;
wire          main_sdram_bankmachine2_refresh_req;
reg           main_sdram_bankmachine2_replace = 1'd0;
wire   [21:0] main_sdram_bankmachine2_req_addr;
wire          main_sdram_bankmachine2_req_lock;
reg           main_sdram_bankmachine2_req_rdata_valid = 1'd0;
wire          main_sdram_bankmachine2_req_ready;
wire          main_sdram_bankmachine2_req_valid;
reg           main_sdram_bankmachine2_req_wdata_ready = 1'd0;
wire          main_sdram_bankmachine2_req_we;
reg    [12:0] main_sdram_bankmachine2_row = 13'd0;
reg           main_sdram_bankmachine2_row_close = 1'd0;
reg           main_sdram_bankmachine2_row_col_n_addr_sel = 1'd0;
wire          main_sdram_bankmachine2_row_hit;
reg           main_sdram_bankmachine2_row_open = 1'd0;
reg           main_sdram_bankmachine2_row_opened = 1'd0;
reg           main_sdram_bankmachine2_sink_first = 1'd0;
reg           main_sdram_bankmachine2_sink_last = 1'd0;
wire   [21:0] main_sdram_bankmachine2_sink_payload_addr;
wire          main_sdram_bankmachine2_sink_payload_we;
wire          main_sdram_bankmachine2_sink_ready;
wire          main_sdram_bankmachine2_sink_sink_first;
wire          main_sdram_bankmachine2_sink_sink_last;
wire   [21:0] main_sdram_bankmachine2_sink_sink_payload_addr;
wire          main_sdram_bankmachine2_sink_sink_payload_we;
wire          main_sdram_bankmachine2_sink_sink_ready;
wire          main_sdram_bankmachine2_sink_sink_valid;
wire          main_sdram_bankmachine2_sink_valid;
wire          main_sdram_bankmachine2_source_first;
wire          main_sdram_bankmachine2_source_last;
wire   [21:0] main_sdram_bankmachine2_source_payload_addr;
wire          main_sdram_bankmachine2_source_payload_we;
wire          main_sdram_bankmachine2_source_ready;
wire          main_sdram_bankmachine2_source_source_first;
wire          main_sdram_bankmachine2_source_source_last;
wire   [21:0] main_sdram_bankmachine2_source_source_payload_addr;
wire          main_sdram_bankmachine2_source_source_payload_we;
wire          main_sdram_bankmachine2_source_source_ready;
wire          main_sdram_bankmachine2_source_source_valid;
wire          main_sdram_bankmachine2_source_valid;
wire   [24:0] main_sdram_bankmachine2_syncfifo2_din;
wire   [24:0] main_sdram_bankmachine2_syncfifo2_dout;
wire          main_sdram_bankmachine2_syncfifo2_re;
wire          main_sdram_bankmachine2_syncfifo2_readable;
wire          main_sdram_bankmachine2_syncfifo2_we;
wire          main_sdram_bankmachine2_syncfifo2_writable;
reg           main_sdram_bankmachine2_trascon_count = 1'd0;
reg           main_sdram_bankmachine2_trascon_ready = 1'd0;
wire          main_sdram_bankmachine2_trascon_valid;
reg     [1:0] main_sdram_bankmachine2_trccon_count = 2'd0;
reg           main_sdram_bankmachine2_trccon_ready = 1'd0;
wire          main_sdram_bankmachine2_trccon_valid;
reg     [1:0] main_sdram_bankmachine2_twtpcon_count = 2'd0;
reg           main_sdram_bankmachine2_twtpcon_ready = 1'd0;
wire          main_sdram_bankmachine2_twtpcon_valid;
reg     [2:0] main_sdram_bankmachine2_wrport_adr = 3'd0;
wire   [24:0] main_sdram_bankmachine2_wrport_dat_r;
wire   [24:0] main_sdram_bankmachine2_wrport_dat_w;
wire          main_sdram_bankmachine2_wrport_we;
reg           main_sdram_bankmachine3_auto_precharge = 1'd0;
reg    [12:0] main_sdram_bankmachine3_cmd_payload_a = 13'd0;
wire    [1:0] main_sdram_bankmachine3_cmd_payload_ba;
reg           main_sdram_bankmachine3_cmd_payload_cas = 1'd0;
reg           main_sdram_bankmachine3_cmd_payload_is_cmd = 1'd0;
reg           main_sdram_bankmachine3_cmd_payload_is_read = 1'd0;
reg           main_sdram_bankmachine3_cmd_payload_is_write = 1'd0;
reg           main_sdram_bankmachine3_cmd_payload_ras = 1'd0;
reg           main_sdram_bankmachine3_cmd_payload_we = 1'd0;
reg           main_sdram_bankmachine3_cmd_ready = 1'd0;
reg           main_sdram_bankmachine3_cmd_valid = 1'd0;
reg     [2:0] main_sdram_bankmachine3_consume = 3'd0;
wire          main_sdram_bankmachine3_do_read;
wire          main_sdram_bankmachine3_fifo_in_first;
wire          main_sdram_bankmachine3_fifo_in_last;
wire   [21:0] main_sdram_bankmachine3_fifo_in_payload_addr;
wire          main_sdram_bankmachine3_fifo_in_payload_we;
wire          main_sdram_bankmachine3_fifo_out_first;
wire          main_sdram_bankmachine3_fifo_out_last;
wire   [21:0] main_sdram_bankmachine3_fifo_out_payload_addr;
wire          main_sdram_bankmachine3_fifo_out_payload_we;
reg     [3:0] main_sdram_bankmachine3_level = 4'd0;
wire          main_sdram_bankmachine3_pipe_valid_sink_first;
wire          main_sdram_bankmachine3_pipe_valid_sink_last;
wire   [21:0] main_sdram_bankmachine3_pipe_valid_sink_payload_addr;
wire          main_sdram_bankmachine3_pipe_valid_sink_payload_we;
wire          main_sdram_bankmachine3_pipe_valid_sink_ready;
wire          main_sdram_bankmachine3_pipe_valid_sink_valid;
reg           main_sdram_bankmachine3_pipe_valid_source_first = 1'd0;
reg           main_sdram_bankmachine3_pipe_valid_source_last = 1'd0;
reg    [21:0] main_sdram_bankmachine3_pipe_valid_source_payload_addr = 22'd0;
reg           main_sdram_bankmachine3_pipe_valid_source_payload_we = 1'd0;
wire          main_sdram_bankmachine3_pipe_valid_source_ready;
reg           main_sdram_bankmachine3_pipe_valid_source_valid = 1'd0;
reg     [2:0] main_sdram_bankmachine3_produce = 3'd0;
wire    [2:0] main_sdram_bankmachine3_rdport_adr;
wire   [24:0] main_sdram_bankmachine3_rdport_dat_r;
reg           main_sdram_bankmachine3_refresh_gnt = 1'd0;
wire          main_sdram_bankmachine3_refresh_req;
reg           main_sdram_bankmachine3_replace = 1'd0;
wire   [21:0] main_sdram_bankmachine3_req_addr;
wire          main_sdram_bankmachine3_req_lock;
reg           main_sdram_bankmachine3_req_rdata_valid = 1'd0;
wire          main_sdram_bankmachine3_req_ready;
wire          main_sdram_bankmachine3_req_valid;
reg           main_sdram_bankmachine3_req_wdata_ready = 1'd0;
wire          main_sdram_bankmachine3_req_we;
reg    [12:0] main_sdram_bankmachine3_row = 13'd0;
reg           main_sdram_bankmachine3_row_close = 1'd0;
reg           main_sdram_bankmachine3_row_col_n_addr_sel = 1'd0;
wire          main_sdram_bankmachine3_row_hit;
reg           main_sdram_bankmachine3_row_open = 1'd0;
reg           main_sdram_bankmachine3_row_opened = 1'd0;
reg           main_sdram_bankmachine3_sink_first = 1'd0;
reg           main_sdram_bankmachine3_sink_last = 1'd0;
wire   [21:0] main_sdram_bankmachine3_sink_payload_addr;
wire          main_sdram_bankmachine3_sink_payload_we;
wire          main_sdram_bankmachine3_sink_ready;
wire          main_sdram_bankmachine3_sink_sink_first;
wire          main_sdram_bankmachine3_sink_sink_last;
wire   [21:0] main_sdram_bankmachine3_sink_sink_payload_addr;
wire          main_sdram_bankmachine3_sink_sink_payload_we;
wire          main_sdram_bankmachine3_sink_sink_ready;
wire          main_sdram_bankmachine3_sink_sink_valid;
wire          main_sdram_bankmachine3_sink_valid;
wire          main_sdram_bankmachine3_source_first;
wire          main_sdram_bankmachine3_source_last;
wire   [21:0] main_sdram_bankmachine3_source_payload_addr;
wire          main_sdram_bankmachine3_source_payload_we;
wire          main_sdram_bankmachine3_source_ready;
wire          main_sdram_bankmachine3_source_source_first;
wire          main_sdram_bankmachine3_source_source_last;
wire   [21:0] main_sdram_bankmachine3_source_source_payload_addr;
wire          main_sdram_bankmachine3_source_source_payload_we;
wire          main_sdram_bankmachine3_source_source_ready;
wire          main_sdram_bankmachine3_source_source_valid;
wire          main_sdram_bankmachine3_source_valid;
wire   [24:0] main_sdram_bankmachine3_syncfifo3_din;
wire   [24:0] main_sdram_bankmachine3_syncfifo3_dout;
wire          main_sdram_bankmachine3_syncfifo3_re;
wire          main_sdram_bankmachine3_syncfifo3_readable;
wire          main_sdram_bankmachine3_syncfifo3_we;
wire          main_sdram_bankmachine3_syncfifo3_writable;
reg           main_sdram_bankmachine3_trascon_count = 1'd0;
reg           main_sdram_bankmachine3_trascon_ready = 1'd0;
wire          main_sdram_bankmachine3_trascon_valid;
reg     [1:0] main_sdram_bankmachine3_trccon_count = 2'd0;
reg           main_sdram_bankmachine3_trccon_ready = 1'd0;
wire          main_sdram_bankmachine3_trccon_valid;
reg     [1:0] main_sdram_bankmachine3_twtpcon_count = 2'd0;
reg           main_sdram_bankmachine3_twtpcon_ready = 1'd0;
wire          main_sdram_bankmachine3_twtpcon_valid;
reg     [2:0] main_sdram_bankmachine3_wrport_adr = 3'd0;
wire   [24:0] main_sdram_bankmachine3_wrport_dat_r;
wire   [24:0] main_sdram_bankmachine3_wrport_dat_w;
wire          main_sdram_bankmachine3_wrport_we;
wire          main_sdram_cas_allowed;
wire          main_sdram_choose_cmd_ce;
wire   [12:0] main_sdram_choose_cmd_cmd_payload_a;
wire    [1:0] main_sdram_choose_cmd_cmd_payload_ba;
reg           main_sdram_choose_cmd_cmd_payload_cas = 1'd0;
wire          main_sdram_choose_cmd_cmd_payload_is_cmd;
wire          main_sdram_choose_cmd_cmd_payload_is_read;
wire          main_sdram_choose_cmd_cmd_payload_is_write;
reg           main_sdram_choose_cmd_cmd_payload_ras = 1'd0;
reg           main_sdram_choose_cmd_cmd_payload_we = 1'd0;
reg           main_sdram_choose_cmd_cmd_ready = 1'd0;
wire          main_sdram_choose_cmd_cmd_valid;
reg     [1:0] main_sdram_choose_cmd_grant = 2'd0;
wire    [3:0] main_sdram_choose_cmd_request;
reg     [3:0] main_sdram_choose_cmd_valids = 4'd0;
reg           main_sdram_choose_cmd_want_activates = 1'd0;
reg           main_sdram_choose_cmd_want_cmds = 1'd0;
reg           main_sdram_choose_cmd_want_reads = 1'd0;
reg           main_sdram_choose_cmd_want_writes = 1'd0;
wire          main_sdram_choose_req_ce;
wire   [12:0] main_sdram_choose_req_cmd_payload_a;
wire    [1:0] main_sdram_choose_req_cmd_payload_ba;
reg           main_sdram_choose_req_cmd_payload_cas = 1'd0;
wire          main_sdram_choose_req_cmd_payload_is_cmd;
wire          main_sdram_choose_req_cmd_payload_is_read;
wire          main_sdram_choose_req_cmd_payload_is_write;
reg           main_sdram_choose_req_cmd_payload_ras = 1'd0;
reg           main_sdram_choose_req_cmd_payload_we = 1'd0;
reg           main_sdram_choose_req_cmd_ready = 1'd0;
wire          main_sdram_choose_req_cmd_valid;
reg     [1:0] main_sdram_choose_req_grant = 2'd0;
wire    [3:0] main_sdram_choose_req_request;
reg     [3:0] main_sdram_choose_req_valids = 4'd0;
reg           main_sdram_choose_req_want_activates = 1'd0;
wire          main_sdram_choose_req_want_cmds;
reg           main_sdram_choose_req_want_reads = 1'd0;
reg           main_sdram_choose_req_want_writes = 1'd0;
wire          main_sdram_cke1;
reg           main_sdram_cmd_last = 1'd0;
reg    [12:0] main_sdram_cmd_payload_a = 13'd0;
reg     [1:0] main_sdram_cmd_payload_ba = 2'd0;
reg           main_sdram_cmd_payload_cas = 1'd0;
reg           main_sdram_cmd_payload_is_read = 1'd0;
reg           main_sdram_cmd_payload_is_write = 1'd0;
reg           main_sdram_cmd_payload_ras = 1'd0;
reg           main_sdram_cmd_payload_we = 1'd0;
reg           main_sdram_cmd_ready = 1'd0;
reg           main_sdram_cmd_valid = 1'd0;
wire          main_sdram_command_issue_r;
reg           main_sdram_command_issue_re = 1'd0;
reg           main_sdram_command_issue_w = 1'd0;
reg           main_sdram_command_issue_we = 1'd0;
reg           main_sdram_command_re = 1'd0;
reg     [7:0] main_sdram_command_storage = 8'd0;
reg           main_sdram_csr_dfi_p0_act_n = 1'd1;
wire   [12:0] main_sdram_csr_dfi_p0_address;
wire    [1:0] main_sdram_csr_dfi_p0_bank;
reg           main_sdram_csr_dfi_p0_cas_n = 1'd1;
reg           main_sdram_csr_dfi_p0_cke = 1'd0;
reg           main_sdram_csr_dfi_p0_cs_n = 1'd1;
reg           main_sdram_csr_dfi_p0_odt = 1'd0;
reg           main_sdram_csr_dfi_p0_ras_n = 1'd1;
reg    [15:0] main_sdram_csr_dfi_p0_rddata = 16'd0;
wire          main_sdram_csr_dfi_p0_rddata_en;
reg           main_sdram_csr_dfi_p0_rddata_valid = 1'd0;
wire          main_sdram_csr_dfi_p0_reset_n;
reg           main_sdram_csr_dfi_p0_we_n = 1'd1;
wire   [15:0] main_sdram_csr_dfi_p0_wrdata;
wire          main_sdram_csr_dfi_p0_wrdata_en;
wire    [1:0] main_sdram_csr_dfi_p0_wrdata_mask;
wire          main_sdram_csrfield_cas;
wire          main_sdram_csrfield_cs;
wire          main_sdram_csrfield_cs_bottom;
wire          main_sdram_csrfield_cs_top;
wire          main_sdram_csrfield_ras;
wire          main_sdram_csrfield_rden;
wire          main_sdram_csrfield_we;
wire          main_sdram_csrfield_wren;
reg           main_sdram_dfi_p0_act_n = 1'd1;
reg    [12:0] main_sdram_dfi_p0_address = 13'd0;
reg     [1:0] main_sdram_dfi_p0_bank = 2'd0;
reg           main_sdram_dfi_p0_cas_n = 1'd1;
wire          main_sdram_dfi_p0_cke;
reg           main_sdram_dfi_p0_cs_n = 1'd1;
wire          main_sdram_dfi_p0_odt;
reg           main_sdram_dfi_p0_ras_n = 1'd1;
wire   [15:0] main_sdram_dfi_p0_rddata;
reg           main_sdram_dfi_p0_rddata_en = 1'd0;
wire          main_sdram_dfi_p0_rddata_valid;
wire          main_sdram_dfi_p0_reset_n;
reg           main_sdram_dfi_p0_we_n = 1'd1;
wire   [15:0] main_sdram_dfi_p0_wrdata;
reg           main_sdram_dfi_p0_wrdata_en = 1'd0;
wire    [1:0] main_sdram_dfi_p0_wrdata_mask;
reg           main_sdram_en0 = 1'd0;
reg           main_sdram_en1 = 1'd0;
reg           main_sdram_ext_dfi_p0_act_n = 1'd1;
reg    [12:0] main_sdram_ext_dfi_p0_address = 13'd0;
reg     [1:0] main_sdram_ext_dfi_p0_bank = 2'd0;
reg           main_sdram_ext_dfi_p0_cas_n = 1'd1;
reg           main_sdram_ext_dfi_p0_cke = 1'd0;
reg           main_sdram_ext_dfi_p0_cs_n = 1'd1;
reg           main_sdram_ext_dfi_p0_odt = 1'd0;
reg           main_sdram_ext_dfi_p0_ras_n = 1'd1;
reg    [15:0] main_sdram_ext_dfi_p0_rddata = 16'd0;
reg           main_sdram_ext_dfi_p0_rddata_en = 1'd0;
reg           main_sdram_ext_dfi_p0_rddata_valid = 1'd0;
reg           main_sdram_ext_dfi_p0_reset_n = 1'd0;
reg           main_sdram_ext_dfi_p0_we_n = 1'd1;
reg    [15:0] main_sdram_ext_dfi_p0_wrdata = 16'd0;
reg           main_sdram_ext_dfi_p0_wrdata_en = 1'd0;
reg     [1:0] main_sdram_ext_dfi_p0_wrdata_mask = 2'd0;
reg           main_sdram_ext_dfi_sel = 1'd0;
wire          main_sdram_go_to_refresh;
wire   [21:0] main_sdram_interface_bank0_addr;
wire          main_sdram_interface_bank0_lock;
wire          main_sdram_interface_bank0_rdata_valid;
wire          main_sdram_interface_bank0_ready;
wire          main_sdram_interface_bank0_valid;
wire          main_sdram_interface_bank0_wdata_ready;
wire          main_sdram_interface_bank0_we;
wire   [21:0] main_sdram_interface_bank1_addr;
wire          main_sdram_interface_bank1_lock;
wire          main_sdram_interface_bank1_rdata_valid;
wire          main_sdram_interface_bank1_ready;
wire          main_sdram_interface_bank1_valid;
wire          main_sdram_interface_bank1_wdata_ready;
wire          main_sdram_interface_bank1_we;
wire   [21:0] main_sdram_interface_bank2_addr;
wire          main_sdram_interface_bank2_lock;
wire          main_sdram_interface_bank2_rdata_valid;
wire          main_sdram_interface_bank2_ready;
wire          main_sdram_interface_bank2_valid;
wire          main_sdram_interface_bank2_wdata_ready;
wire          main_sdram_interface_bank2_we;
wire   [21:0] main_sdram_interface_bank3_addr;
wire          main_sdram_interface_bank3_lock;
wire          main_sdram_interface_bank3_rdata_valid;
wire          main_sdram_interface_bank3_ready;
wire          main_sdram_interface_bank3_valid;
wire          main_sdram_interface_bank3_wdata_ready;
wire          main_sdram_interface_bank3_we;
wire   [15:0] main_sdram_interface_rdata;
reg    [15:0] main_sdram_interface_wdata = 16'd0;
reg     [1:0] main_sdram_interface_wdata_we = 2'd0;
reg           main_sdram_master_p0_act_n = 1'd1;
reg    [12:0] main_sdram_master_p0_address = 13'd0;
reg     [1:0] main_sdram_master_p0_bank = 2'd0;
reg           main_sdram_master_p0_cas_n = 1'd1;
reg           main_sdram_master_p0_cke = 1'd0;
reg           main_sdram_master_p0_cs_n = 1'd1;
reg           main_sdram_master_p0_odt = 1'd0;
reg           main_sdram_master_p0_ras_n = 1'd1;
wire   [15:0] main_sdram_master_p0_rddata;
reg           main_sdram_master_p0_rddata_en = 1'd0;
wire          main_sdram_master_p0_rddata_valid;
reg           main_sdram_master_p0_reset_n = 1'd0;
reg           main_sdram_master_p0_we_n = 1'd1;
reg    [15:0] main_sdram_master_p0_wrdata = 16'd0;
reg           main_sdram_master_p0_wrdata_en = 1'd0;
reg     [1:0] main_sdram_master_p0_wrdata_mask = 2'd0;
wire          main_sdram_max_time0;
wire          main_sdram_max_time1;
reg    [12:0] main_sdram_nop_a = 13'd0;
reg     [1:0] main_sdram_nop_ba = 2'd0;
wire          main_sdram_odt;
reg           main_sdram_postponer_count = 1'd0;
wire          main_sdram_postponer_req_i;
reg           main_sdram_postponer_req_o = 1'd0;
wire          main_sdram_ras_allowed;
reg           main_sdram_rddata_re = 1'd0;
reg    [15:0] main_sdram_rddata_status = 16'd0;
wire          main_sdram_rddata_we;
reg           main_sdram_re = 1'd0;
wire          main_sdram_read_available;
wire          main_sdram_reset_n;
wire          main_sdram_sel;
reg           main_sdram_sequencer_count = 1'd0;
wire          main_sdram_sequencer_done0;
reg           main_sdram_sequencer_done1 = 1'd0;
reg           main_sdram_sequencer_start0 = 1'd0;
wire          main_sdram_sequencer_start1;
reg     [2:0] main_sdram_sequencer_trigger = 3'd0;
wire          main_sdram_slave_p0_act_n;
wire   [12:0] main_sdram_slave_p0_address;
wire    [1:0] main_sdram_slave_p0_bank;
wire          main_sdram_slave_p0_cas_n;
wire          main_sdram_slave_p0_cke;
wire          main_sdram_slave_p0_cs_n;
wire          main_sdram_slave_p0_odt;
wire          main_sdram_slave_p0_ras_n;
reg    [15:0] main_sdram_slave_p0_rddata = 16'd0;
wire          main_sdram_slave_p0_rddata_en;
reg           main_sdram_slave_p0_rddata_valid = 1'd0;
wire          main_sdram_slave_p0_reset_n;
wire          main_sdram_slave_p0_we_n;
wire   [15:0] main_sdram_slave_p0_wrdata;
wire          main_sdram_slave_p0_wrdata_en;
wire    [1:0] main_sdram_slave_p0_wrdata_mask;
reg           main_sdram_steerer0 = 1'd1;
reg           main_sdram_steerer1 = 1'd1;
reg     [1:0] main_sdram_steerer_sel = 2'd0;
reg     [3:0] main_sdram_storage = 4'd1;
reg           main_sdram_tccdcon_count = 1'd0;
reg           main_sdram_tccdcon_ready = 1'd0;
wire          main_sdram_tccdcon_valid;
reg           main_sdram_tfawcon_ready = 1'd1;
wire          main_sdram_tfawcon_valid;
reg     [4:0] main_sdram_time0 = 5'd0;
reg     [3:0] main_sdram_time1 = 4'd0;
wire    [8:0] main_sdram_timer_count0;
reg     [8:0] main_sdram_timer_count1 = 9'd312;
wire          main_sdram_timer_done0;
wire          main_sdram_timer_done1;
wire          main_sdram_timer_wait;
reg           main_sdram_trrdcon_count = 1'd0;
reg           main_sdram_trrdcon_ready = 1'd0;
wire          main_sdram_trrdcon_valid;
reg     [2:0] main_sdram_twtrcon_count = 3'd0;
reg           main_sdram_twtrcon_ready = 1'd0;
wire          main_sdram_twtrcon_valid;
wire          main_sdram_wants_refresh;
reg           main_sdram_wrdata_re = 1'd0;
reg    [15:0] main_sdram_wrdata_storage = 16'd0;
wire          main_sdram_write_available;
reg           main_soc_rst = 1'd0;
reg           main_status_re = 1'd0;
reg           main_status_status = 1'd0;
wire          main_status_we;
reg           main_stdby = 1'd0;
reg     [7:0] main_storage = 8'd0;
reg           main_tag_di_dirty = 1'd0;
wire   [22:0] main_tag_di_tag;
wire          main_tag_do_dirty;
wire   [22:0] main_tag_do_tag;
wire    [8:0] main_tag_port_adr;
wire   [23:0] main_tag_port_dat_r;
wire   [23:0] main_tag_port_dat_w;
reg           main_tag_port_we = 1'd0;
reg           main_uartcrossover_enable_re = 1'd0;
reg     [1:0] main_uartcrossover_enable_storage = 2'd0;
wire          main_uartcrossover_irq;
reg     [1:0] main_uartcrossover_pending_r = 2'd0;
reg           main_uartcrossover_pending_re = 1'd0;
reg     [1:0] main_uartcrossover_pending_status = 2'd0;
wire          main_uartcrossover_pending_we;
wire          main_uartcrossover_rx0;
wire          main_uartcrossover_rx1;
wire          main_uartcrossover_rx2;
reg           main_uartcrossover_rx_clear = 1'd0;
reg     [3:0] main_uartcrossover_rx_fifo_consume = 4'd0;
wire          main_uartcrossover_rx_fifo_do_read;
wire          main_uartcrossover_rx_fifo_fifo_in_first;
wire          main_uartcrossover_rx_fifo_fifo_in_last;
wire    [7:0] main_uartcrossover_rx_fifo_fifo_in_payload_data;
wire          main_uartcrossover_rx_fifo_fifo_out_first;
wire          main_uartcrossover_rx_fifo_fifo_out_last;
wire    [7:0] main_uartcrossover_rx_fifo_fifo_out_payload_data;
reg     [4:0] main_uartcrossover_rx_fifo_level0 = 5'd0;
wire    [4:0] main_uartcrossover_rx_fifo_level1;
reg     [3:0] main_uartcrossover_rx_fifo_produce = 4'd0;
wire    [3:0] main_uartcrossover_rx_fifo_rdport_adr;
wire    [9:0] main_uartcrossover_rx_fifo_rdport_dat_r;
wire          main_uartcrossover_rx_fifo_rdport_re;
wire          main_uartcrossover_rx_fifo_re;
reg           main_uartcrossover_rx_fifo_readable = 1'd0;
reg           main_uartcrossover_rx_fifo_replace = 1'd0;
wire          main_uartcrossover_rx_fifo_sink_first;
wire          main_uartcrossover_rx_fifo_sink_last;
wire    [7:0] main_uartcrossover_rx_fifo_sink_payload_data;
wire          main_uartcrossover_rx_fifo_sink_ready;
wire          main_uartcrossover_rx_fifo_sink_valid;
wire          main_uartcrossover_rx_fifo_source_first;
wire          main_uartcrossover_rx_fifo_source_last;
wire    [7:0] main_uartcrossover_rx_fifo_source_payload_data;
wire          main_uartcrossover_rx_fifo_source_ready;
wire          main_uartcrossover_rx_fifo_source_valid;
wire    [9:0] main_uartcrossover_rx_fifo_syncfifo_din;
wire    [9:0] main_uartcrossover_rx_fifo_syncfifo_dout;
wire          main_uartcrossover_rx_fifo_syncfifo_re;
wire          main_uartcrossover_rx_fifo_syncfifo_readable;
wire          main_uartcrossover_rx_fifo_syncfifo_we;
wire          main_uartcrossover_rx_fifo_syncfifo_writable;
reg     [3:0] main_uartcrossover_rx_fifo_wrport_adr = 4'd0;
wire    [9:0] main_uartcrossover_rx_fifo_wrport_dat_r;
wire    [9:0] main_uartcrossover_rx_fifo_wrport_dat_w;
wire          main_uartcrossover_rx_fifo_wrport_we;
reg           main_uartcrossover_rx_pending = 1'd0;
wire          main_uartcrossover_rx_status;
wire          main_uartcrossover_rx_trigger;
reg           main_uartcrossover_rx_trigger_d = 1'd0;
reg           main_uartcrossover_rxempty_re = 1'd0;
wire          main_uartcrossover_rxempty_status;
wire          main_uartcrossover_rxempty_we;
reg           main_uartcrossover_rxfull_re = 1'd0;
wire          main_uartcrossover_rxfull_status;
wire          main_uartcrossover_rxfull_we;
wire    [7:0] main_uartcrossover_rxtx_r;
reg           main_uartcrossover_rxtx_re = 1'd0;
wire    [7:0] main_uartcrossover_rxtx_w;
reg           main_uartcrossover_rxtx_we = 1'd0;
reg           main_uartcrossover_status_re = 1'd0;
reg     [1:0] main_uartcrossover_status_status = 2'd0;
wire          main_uartcrossover_status_we;
wire          main_uartcrossover_tx0;
wire          main_uartcrossover_tx1;
wire          main_uartcrossover_tx2;
reg           main_uartcrossover_tx_clear = 1'd0;
reg     [3:0] main_uartcrossover_tx_fifo_consume = 4'd0;
wire          main_uartcrossover_tx_fifo_do_read;
wire          main_uartcrossover_tx_fifo_fifo_in_first;
wire          main_uartcrossover_tx_fifo_fifo_in_last;
wire    [7:0] main_uartcrossover_tx_fifo_fifo_in_payload_data;
wire          main_uartcrossover_tx_fifo_fifo_out_first;
wire          main_uartcrossover_tx_fifo_fifo_out_last;
wire    [7:0] main_uartcrossover_tx_fifo_fifo_out_payload_data;
reg     [4:0] main_uartcrossover_tx_fifo_level0 = 5'd0;
wire    [4:0] main_uartcrossover_tx_fifo_level1;
reg     [3:0] main_uartcrossover_tx_fifo_produce = 4'd0;
wire    [3:0] main_uartcrossover_tx_fifo_rdport_adr;
wire    [9:0] main_uartcrossover_tx_fifo_rdport_dat_r;
wire          main_uartcrossover_tx_fifo_rdport_re;
wire          main_uartcrossover_tx_fifo_re;
reg           main_uartcrossover_tx_fifo_readable = 1'd0;
reg           main_uartcrossover_tx_fifo_replace = 1'd0;
reg           main_uartcrossover_tx_fifo_sink_first = 1'd0;
reg           main_uartcrossover_tx_fifo_sink_last = 1'd0;
wire    [7:0] main_uartcrossover_tx_fifo_sink_payload_data;
wire          main_uartcrossover_tx_fifo_sink_ready;
wire          main_uartcrossover_tx_fifo_sink_valid;
wire          main_uartcrossover_tx_fifo_source_first;
wire          main_uartcrossover_tx_fifo_source_last;
wire    [7:0] main_uartcrossover_tx_fifo_source_payload_data;
wire          main_uartcrossover_tx_fifo_source_ready;
wire          main_uartcrossover_tx_fifo_source_valid;
wire    [9:0] main_uartcrossover_tx_fifo_syncfifo_din;
wire    [9:0] main_uartcrossover_tx_fifo_syncfifo_dout;
wire          main_uartcrossover_tx_fifo_syncfifo_re;
wire          main_uartcrossover_tx_fifo_syncfifo_readable;
wire          main_uartcrossover_tx_fifo_syncfifo_we;
wire          main_uartcrossover_tx_fifo_syncfifo_writable;
reg     [3:0] main_uartcrossover_tx_fifo_wrport_adr = 4'd0;
wire    [9:0] main_uartcrossover_tx_fifo_wrport_dat_r;
wire    [9:0] main_uartcrossover_tx_fifo_wrport_dat_w;
wire          main_uartcrossover_tx_fifo_wrport_we;
reg           main_uartcrossover_tx_pending = 1'd0;
wire          main_uartcrossover_tx_status;
wire          main_uartcrossover_tx_trigger;
reg           main_uartcrossover_tx_trigger_d = 1'd0;
reg           main_uartcrossover_txempty_re = 1'd0;
wire          main_uartcrossover_txempty_status;
wire          main_uartcrossover_txempty_we;
reg           main_uartcrossover_txfull_re = 1'd0;
wire          main_uartcrossover_txfull_status;
wire          main_uartcrossover_txfull_we;
wire          main_uartcrossover_uartcrossover_sink_first;
wire          main_uartcrossover_uartcrossover_sink_last;
wire    [7:0] main_uartcrossover_uartcrossover_sink_payload_data;
wire          main_uartcrossover_uartcrossover_sink_ready;
wire          main_uartcrossover_uartcrossover_sink_valid;
wire          main_uartcrossover_uartcrossover_source_first;
wire          main_uartcrossover_uartcrossover_source_last;
wire    [7:0] main_uartcrossover_uartcrossover_source_payload_data;
wire          main_uartcrossover_uartcrossover_source_ready;
wire          main_uartcrossover_uartcrossover_source_valid;
reg           main_update_value_re = 1'd0;
reg           main_update_value_storage = 1'd0;
reg    [31:0] main_value = 32'd0;
reg           main_value_re = 1'd0;
reg    [31:0] main_value_status = 32'd0;
wire          main_value_we;
reg    [31:0] main_vexriscv = 32'd0;
reg           main_wb_sdram_ack = 1'd0;
wire   [29:0] main_wb_sdram_adr;
wire    [1:0] main_wb_sdram_bte;
wire    [2:0] main_wb_sdram_cti;
wire          main_wb_sdram_cyc;
reg    [31:0] main_wb_sdram_dat_r = 32'd0;
wire   [31:0] main_wb_sdram_dat_w;
reg           main_wb_sdram_err = 1'd0;
wire    [3:0] main_wb_sdram_sel;
wire          main_wb_sdram_stb;
wire          main_wb_sdram_we;
reg           main_wishbone_bridge_aborted = 1'd0;
reg           main_wishbone_bridge_aborted_fsm_next_value = 1'd0;
reg           main_wishbone_bridge_aborted_fsm_next_value_ce = 1'd0;
wire          main_wishbone_bridge_cmd_last;
wire   [20:0] main_wishbone_bridge_cmd_payload_addr;
wire          main_wishbone_bridge_cmd_payload_we;
reg           main_wishbone_bridge_cmd_ready = 1'd0;
reg           main_wishbone_bridge_cmd_valid = 1'd0;
reg     [2:0] main_wishbone_bridge_count = 3'd0;
reg     [2:0] main_wishbone_bridge_count_litedramnativeportconverter_next_value = 3'd0;
reg           main_wishbone_bridge_count_litedramnativeportconverter_next_value_ce = 1'd0;
wire          main_wishbone_bridge_flush;
reg           main_wishbone_bridge_is_ongoing = 1'd0;
reg     [2:0] main_wishbone_bridge_rdata_converter_converter_demux = 3'd0;
wire          main_wishbone_bridge_rdata_converter_converter_load_part;
wire          main_wishbone_bridge_rdata_converter_converter_sink_first;
wire          main_wishbone_bridge_rdata_converter_converter_sink_last;
wire   [15:0] main_wishbone_bridge_rdata_converter_converter_sink_payload_data;
wire          main_wishbone_bridge_rdata_converter_converter_sink_ready;
wire          main_wishbone_bridge_rdata_converter_converter_sink_valid;
reg           main_wishbone_bridge_rdata_converter_converter_source_first = 1'd0;
reg           main_wishbone_bridge_rdata_converter_converter_source_last = 1'd0;
reg   [127:0] main_wishbone_bridge_rdata_converter_converter_source_payload_data = 128'd0;
reg     [3:0] main_wishbone_bridge_rdata_converter_converter_source_payload_valid_token_count = 4'd0;
wire          main_wishbone_bridge_rdata_converter_converter_source_ready;
wire          main_wishbone_bridge_rdata_converter_converter_source_valid;
reg           main_wishbone_bridge_rdata_converter_converter_strobe_all = 1'd0;
wire          main_wishbone_bridge_rdata_converter_sink_first;
wire          main_wishbone_bridge_rdata_converter_sink_last;
wire   [15:0] main_wishbone_bridge_rdata_converter_sink_payload_data;
wire          main_wishbone_bridge_rdata_converter_sink_ready;
wire          main_wishbone_bridge_rdata_converter_sink_valid;
wire          main_wishbone_bridge_rdata_converter_source_first;
wire          main_wishbone_bridge_rdata_converter_source_last;
reg   [127:0] main_wishbone_bridge_rdata_converter_source_payload_data = 128'd0;
wire          main_wishbone_bridge_rdata_converter_source_ready;
wire          main_wishbone_bridge_rdata_converter_source_source_first;
wire          main_wishbone_bridge_rdata_converter_source_source_last;
wire  [127:0] main_wishbone_bridge_rdata_converter_source_source_payload_data;
wire          main_wishbone_bridge_rdata_converter_source_source_ready;
wire          main_wishbone_bridge_rdata_converter_source_source_valid;
wire          main_wishbone_bridge_rdata_converter_source_valid;
wire          main_wishbone_bridge_rdata_first;
wire          main_wishbone_bridge_rdata_last;
wire  [127:0] main_wishbone_bridge_rdata_payload_data;
wire          main_wishbone_bridge_rdata_ready;
wire          main_wishbone_bridge_rdata_valid;
wire          main_wishbone_bridge_wdata_converter_converter_first;
wire          main_wishbone_bridge_wdata_converter_converter_last;
reg     [2:0] main_wishbone_bridge_wdata_converter_converter_mux = 3'd0;
wire          main_wishbone_bridge_wdata_converter_converter_sink_first;
wire          main_wishbone_bridge_wdata_converter_converter_sink_last;
reg   [143:0] main_wishbone_bridge_wdata_converter_converter_sink_payload_data = 144'd0;
wire          main_wishbone_bridge_wdata_converter_converter_sink_ready;
wire          main_wishbone_bridge_wdata_converter_converter_sink_valid;
wire          main_wishbone_bridge_wdata_converter_converter_source_first;
wire          main_wishbone_bridge_wdata_converter_converter_source_last;
reg    [17:0] main_wishbone_bridge_wdata_converter_converter_source_payload_data = 18'd0;
wire          main_wishbone_bridge_wdata_converter_converter_source_payload_valid_token_count;
wire          main_wishbone_bridge_wdata_converter_converter_source_ready;
wire          main_wishbone_bridge_wdata_converter_converter_source_valid;
wire          main_wishbone_bridge_wdata_converter_sink_first;
wire          main_wishbone_bridge_wdata_converter_sink_last;
wire  [127:0] main_wishbone_bridge_wdata_converter_sink_payload_data;
wire   [15:0] main_wishbone_bridge_wdata_converter_sink_payload_we;
wire          main_wishbone_bridge_wdata_converter_sink_ready;
wire          main_wishbone_bridge_wdata_converter_sink_valid;
wire          main_wishbone_bridge_wdata_converter_source_first;
wire          main_wishbone_bridge_wdata_converter_source_last;
wire   [15:0] main_wishbone_bridge_wdata_converter_source_payload_data;
wire    [1:0] main_wishbone_bridge_wdata_converter_source_payload_we;
wire          main_wishbone_bridge_wdata_converter_source_ready;
wire          main_wishbone_bridge_wdata_converter_source_source_first;
wire          main_wishbone_bridge_wdata_converter_source_source_last;
wire   [17:0] main_wishbone_bridge_wdata_converter_source_source_payload_data;
wire          main_wishbone_bridge_wdata_converter_source_source_ready;
wire          main_wishbone_bridge_wdata_converter_source_source_valid;
wire          main_wishbone_bridge_wdata_converter_source_valid;
reg           main_wishbone_bridge_wdata_first = 1'd0;
reg           main_wishbone_bridge_wdata_last = 1'd0;
wire  [127:0] main_wishbone_bridge_wdata_payload_data;
wire   [15:0] main_wishbone_bridge_wdata_payload_we;
wire          main_wishbone_bridge_wdata_ready;
reg           main_wishbone_bridge_wdata_valid = 1'd0;
reg           main_word_clr = 1'd0;
reg           main_word_inc = 1'd0;
reg           main_write_from_slave = 1'd0;
reg           main_xover_enable_re = 1'd0;
reg     [1:0] main_xover_enable_storage = 2'd0;
wire          main_xover_irq;
reg     [1:0] main_xover_pending_r = 2'd0;
reg           main_xover_pending_re = 1'd0;
reg     [1:0] main_xover_pending_status = 2'd0;
wire          main_xover_pending_we;
wire          main_xover_pipe_valid_sink_first;
wire          main_xover_pipe_valid_sink_last;
wire    [7:0] main_xover_pipe_valid_sink_payload_data;
wire          main_xover_pipe_valid_sink_ready;
wire          main_xover_pipe_valid_sink_valid;
reg           main_xover_pipe_valid_source_first = 1'd0;
reg           main_xover_pipe_valid_source_last = 1'd0;
reg     [7:0] main_xover_pipe_valid_source_payload_data = 8'd0;
wire          main_xover_pipe_valid_source_ready;
reg           main_xover_pipe_valid_source_valid = 1'd0;
wire          main_xover_rx0;
wire          main_xover_rx1;
wire          main_xover_rx2;
reg           main_xover_rx_clear = 1'd0;
reg     [3:0] main_xover_rx_fifo_consume = 4'd0;
wire          main_xover_rx_fifo_do_read;
wire          main_xover_rx_fifo_fifo_in_first;
wire          main_xover_rx_fifo_fifo_in_last;
wire    [7:0] main_xover_rx_fifo_fifo_in_payload_data;
wire          main_xover_rx_fifo_fifo_out_first;
wire          main_xover_rx_fifo_fifo_out_last;
wire    [7:0] main_xover_rx_fifo_fifo_out_payload_data;
reg     [4:0] main_xover_rx_fifo_level0 = 5'd0;
wire    [4:0] main_xover_rx_fifo_level1;
reg     [3:0] main_xover_rx_fifo_produce = 4'd0;
wire    [3:0] main_xover_rx_fifo_rdport_adr;
wire    [9:0] main_xover_rx_fifo_rdport_dat_r;
wire          main_xover_rx_fifo_rdport_re;
wire          main_xover_rx_fifo_re;
reg           main_xover_rx_fifo_readable = 1'd0;
reg           main_xover_rx_fifo_replace = 1'd0;
wire          main_xover_rx_fifo_sink_first;
wire          main_xover_rx_fifo_sink_last;
wire    [7:0] main_xover_rx_fifo_sink_payload_data;
wire          main_xover_rx_fifo_sink_ready;
wire          main_xover_rx_fifo_sink_valid;
wire          main_xover_rx_fifo_source_first;
wire          main_xover_rx_fifo_source_last;
wire    [7:0] main_xover_rx_fifo_source_payload_data;
wire          main_xover_rx_fifo_source_ready;
wire          main_xover_rx_fifo_source_valid;
wire    [9:0] main_xover_rx_fifo_syncfifo_din;
wire    [9:0] main_xover_rx_fifo_syncfifo_dout;
wire          main_xover_rx_fifo_syncfifo_re;
wire          main_xover_rx_fifo_syncfifo_readable;
wire          main_xover_rx_fifo_syncfifo_we;
wire          main_xover_rx_fifo_syncfifo_writable;
reg     [3:0] main_xover_rx_fifo_wrport_adr = 4'd0;
wire    [9:0] main_xover_rx_fifo_wrport_dat_r;
wire    [9:0] main_xover_rx_fifo_wrport_dat_w;
wire          main_xover_rx_fifo_wrport_we;
reg           main_xover_rx_pending = 1'd0;
wire          main_xover_rx_status;
wire          main_xover_rx_trigger;
reg           main_xover_rx_trigger_d = 1'd0;
reg           main_xover_rxempty_re = 1'd0;
wire          main_xover_rxempty_status;
wire          main_xover_rxempty_we;
reg           main_xover_rxfull_re = 1'd0;
wire          main_xover_rxfull_status;
wire          main_xover_rxfull_we;
wire    [7:0] main_xover_rxtx_r;
reg           main_xover_rxtx_re = 1'd0;
wire    [7:0] main_xover_rxtx_w;
reg           main_xover_rxtx_we = 1'd0;
reg           main_xover_sink_sink_first = 1'd0;
reg           main_xover_sink_sink_last = 1'd0;
wire    [7:0] main_xover_sink_sink_payload_data;
wire          main_xover_sink_sink_ready;
wire          main_xover_sink_sink_valid;
wire          main_xover_source_source_first;
wire          main_xover_source_source_last;
wire    [7:0] main_xover_source_source_payload_data;
wire          main_xover_source_source_ready;
wire          main_xover_source_source_valid;
reg           main_xover_status_re = 1'd0;
reg     [1:0] main_xover_status_status = 2'd0;
wire          main_xover_status_we;
wire          main_xover_tx0;
wire          main_xover_tx1;
wire          main_xover_tx2;
reg           main_xover_tx_clear = 1'd0;
reg           main_xover_tx_pending = 1'd0;
wire          main_xover_tx_status;
wire          main_xover_tx_trigger;
reg           main_xover_tx_trigger_d = 1'd0;
reg           main_xover_txempty_re = 1'd0;
wire          main_xover_txempty_status;
wire          main_xover_txempty_we;
reg           main_xover_txfull_re = 1'd0;
wire          main_xover_txfull_status;
wire          main_xover_txfull_we;
wire          main_xover_uart_sink_first;
wire          main_xover_uart_sink_last;
wire    [7:0] main_xover_uart_sink_payload_data;
wire          main_xover_uart_sink_ready;
wire          main_xover_uart_sink_valid;
wire          main_xover_uart_source_first;
wire          main_xover_uart_source_last;
wire    [7:0] main_xover_uart_source_payload_data;
wire          main_xover_uart_source_ready;
wire          main_xover_uart_source_valid;
wire          main_zero0;
wire          main_zero1;
wire          main_zero2;
reg           main_zero_clear = 1'd0;
reg           main_zero_pending = 1'd0;
wire          main_zero_status;
wire          main_zero_trigger;
reg           main_zero_trigger_d = 1'd0;
wire          sdrio_clk;
wire          sdrio_clk_1;
wire          sdrio_clk_10;
wire          sdrio_clk_11;
wire          sdrio_clk_12;
wire          sdrio_clk_13;
wire          sdrio_clk_14;
wire          sdrio_clk_15;
wire          sdrio_clk_2;
wire          sdrio_clk_3;
wire          sdrio_clk_4;
wire          sdrio_clk_5;
wire          sdrio_clk_6;
wire          sdrio_clk_7;
wire          sdrio_clk_8;
wire          sdrio_clk_9;
wire          sys_clk;
wire          sys_ps_clk;
wire          sys_ps_rst;
wire          sys_rst;

//------------------------------------------------------------------------------
// Combinatorial Logic
//------------------------------------------------------------------------------

assign main_cpu_reset = (main_soc_rst | main_cpu_rst);
always @(*) begin
    main_rst <= 1'd0;
    if (main_soc_rst) begin
        main_rst <= 1'd1;
    end
end
assign main_bus_error = builder_error;
always @(*) begin
    main_cpu_interrupt <= 32'd0;
    main_cpu_interrupt[1] <= main_irq;
    main_cpu_interrupt[0] <= main_uartcrossover_irq;
end
assign main_reset = (rst | main_rst);
assign wifi_gpio0 = 1'd1;
assign main_clkin = clk25;
assign sys_clk = main_clkout0;
assign sys_ps_clk = main_clkout1;
assign main_locked = (builder_basesoc_crg_locked & (~main_reset));
assign builder_shared_adr = builder_comb_rhs_self0;
assign builder_shared_dat_w = builder_comb_rhs_self1;
assign builder_shared_sel = builder_comb_rhs_self2;
assign builder_shared_cyc = builder_comb_rhs_self3;
assign builder_shared_stb = builder_comb_rhs_self4;
assign builder_shared_we = builder_comb_rhs_self5;
assign builder_shared_cti = builder_comb_rhs_self6;
assign builder_shared_bte = builder_comb_rhs_self7;
assign main_cpu_ibus_ibus_dat_r = builder_shared_dat_r;
assign main_cpu_dbus_dbus_dat_r = builder_shared_dat_r;
assign main_basesoc_wishbone_dat_r = builder_shared_dat_r;
assign main_cpu_ibus_ibus_ack = (builder_shared_ack & (builder_grant == 1'd0));
assign main_cpu_dbus_dbus_ack = (builder_shared_ack & (builder_grant == 1'd1));
assign main_basesoc_wishbone_ack = (builder_shared_ack & (builder_grant == 2'd2));
assign main_cpu_ibus_ibus_err = (builder_shared_err & (builder_grant == 1'd0));
assign main_cpu_dbus_dbus_err = (builder_shared_err & (builder_grant == 1'd1));
assign main_basesoc_wishbone_err = (builder_shared_err & (builder_grant == 2'd2));
assign builder_request = {main_basesoc_wishbone_cyc, main_cpu_dbus_dbus_cyc, main_cpu_ibus_ibus_cyc};
always @(*) begin
    builder_master <= 5'd0;
    builder_master[0] <= (builder_shared_adr[29:6] == 24'd15732480);
    builder_master[1] <= (builder_shared_adr[29:15] == 1'd0);
    builder_master[2] <= (builder_shared_adr[29:11] == 16'd32768);
    builder_master[3] <= (builder_shared_adr[29:23] == 6'd32);
    builder_master[4] <= (builder_shared_adr[29:14] == 16'd61440);
end
assign main_cpu_vexriscv_debug_bus_adr = builder_shared_adr;
assign main_cpu_vexriscv_debug_bus_dat_w = builder_shared_dat_w;
assign main_cpu_vexriscv_debug_bus_sel = builder_shared_sel;
assign main_cpu_vexriscv_debug_bus_stb = builder_shared_stb;
assign main_cpu_vexriscv_debug_bus_we = builder_shared_we;
assign main_cpu_vexriscv_debug_bus_cti = builder_shared_cti;
assign main_cpu_vexriscv_debug_bus_bte = builder_shared_bte;
assign main_basesoc_ram_bus_adr = builder_shared_adr;
assign main_basesoc_ram_bus_dat_w = builder_shared_dat_w;
assign main_basesoc_ram_bus_sel = builder_shared_sel;
assign main_basesoc_ram_bus_stb = builder_shared_stb;
assign main_basesoc_ram_bus_we = builder_shared_we;
assign main_basesoc_ram_bus_cti = builder_shared_cti;
assign main_basesoc_ram_bus_bte = builder_shared_bte;
assign main_ram_bus_ram_bus_adr = builder_shared_adr;
assign main_ram_bus_ram_bus_dat_w = builder_shared_dat_w;
assign main_ram_bus_ram_bus_sel = builder_shared_sel;
assign main_ram_bus_ram_bus_stb = builder_shared_stb;
assign main_ram_bus_ram_bus_we = builder_shared_we;
assign main_ram_bus_ram_bus_cti = builder_shared_cti;
assign main_ram_bus_ram_bus_bte = builder_shared_bte;
assign main_wb_sdram_adr = builder_shared_adr;
assign main_wb_sdram_dat_w = builder_shared_dat_w;
assign main_wb_sdram_sel = builder_shared_sel;
assign main_wb_sdram_stb = builder_shared_stb;
assign main_wb_sdram_we = builder_shared_we;
assign main_wb_sdram_cti = builder_shared_cti;
assign main_wb_sdram_bte = builder_shared_bte;
assign builder_basesoc_wishbone_adr = builder_shared_adr;
assign builder_basesoc_wishbone_dat_w = builder_shared_dat_w;
assign builder_basesoc_wishbone_sel = builder_shared_sel;
assign builder_basesoc_wishbone_stb = builder_shared_stb;
assign builder_basesoc_wishbone_we = builder_shared_we;
assign builder_basesoc_wishbone_cti = builder_shared_cti;
assign builder_basesoc_wishbone_bte = builder_shared_bte;
assign main_cpu_vexriscv_debug_bus_cyc = (builder_shared_cyc & builder_master[0]);
assign main_basesoc_ram_bus_cyc = (builder_shared_cyc & builder_master[1]);
assign main_ram_bus_ram_bus_cyc = (builder_shared_cyc & builder_master[2]);
assign main_wb_sdram_cyc = (builder_shared_cyc & builder_master[3]);
assign builder_basesoc_wishbone_cyc = (builder_shared_cyc & builder_master[4]);
assign builder_shared_err = ((((main_cpu_vexriscv_debug_bus_err | main_basesoc_ram_bus_err) | main_ram_bus_ram_bus_err) | main_wb_sdram_err) | builder_basesoc_wishbone_err);
assign builder_wait = ((builder_shared_stb & builder_shared_cyc) & (~builder_shared_ack));
always @(*) begin
    builder_error <= 1'd0;
    builder_shared_ack <= 1'd0;
    builder_shared_dat_r <= 32'd0;
    builder_shared_ack <= ((((main_cpu_vexriscv_debug_bus_ack | main_basesoc_ram_bus_ack) | main_ram_bus_ram_bus_ack) | main_wb_sdram_ack) | builder_basesoc_wishbone_ack);
    builder_shared_dat_r <= ((((({32{builder_slaves[0]}} & main_cpu_vexriscv_debug_bus_dat_r) | ({32{builder_slaves[1]}} & main_basesoc_ram_bus_dat_r)) | ({32{builder_slaves[2]}} & main_ram_bus_ram_bus_dat_r)) | ({32{builder_slaves[3]}} & main_wb_sdram_dat_r)) | ({32{builder_slaves[4]}} & builder_basesoc_wishbone_dat_r));
    if (builder_done) begin
        builder_shared_dat_r <= 32'd4294967295;
        builder_shared_ack <= 1'd1;
        builder_error <= 1'd1;
    end
end
assign builder_done = (builder_count == 1'd0);
assign main_bus_errors_status = main_bus_errors;
assign main_basesoc_adr = main_basesoc_ram_bus_adr[14:0];
assign main_basesoc_ram_bus_dat_r = main_basesoc_dat_r;
always @(*) begin
    main_ram_we <= 4'd0;
    main_ram_we[0] <= (((main_ram_bus_ram_bus_cyc & main_ram_bus_ram_bus_stb) & main_ram_bus_ram_bus_we) & main_ram_bus_ram_bus_sel[0]);
    main_ram_we[1] <= (((main_ram_bus_ram_bus_cyc & main_ram_bus_ram_bus_stb) & main_ram_bus_ram_bus_we) & main_ram_bus_ram_bus_sel[1]);
    main_ram_we[2] <= (((main_ram_bus_ram_bus_cyc & main_ram_bus_ram_bus_stb) & main_ram_bus_ram_bus_we) & main_ram_bus_ram_bus_sel[2]);
    main_ram_we[3] <= (((main_ram_bus_ram_bus_cyc & main_ram_bus_ram_bus_stb) & main_ram_bus_ram_bus_we) & main_ram_bus_ram_bus_sel[3]);
end
assign main_ram_adr = main_ram_bus_ram_bus_adr[10:0];
assign main_ram_bus_ram_bus_dat_r = main_ram_dat_r;
assign main_ram_dat_w = main_ram_bus_ram_bus_dat_w;
always @(*) begin
    builder_basesoc_rs232phytx_next_state <= 1'd0;
    main_basesoc_serial_tx_rs232phytx_next_value1 <= 1'd0;
    main_basesoc_serial_tx_rs232phytx_next_value_ce1 <= 1'd0;
    main_basesoc_tx_count_rs232phytx_next_value0 <= 4'd0;
    main_basesoc_tx_count_rs232phytx_next_value_ce0 <= 1'd0;
    main_basesoc_tx_data_rs232phytx_next_value2 <= 8'd0;
    main_basesoc_tx_data_rs232phytx_next_value_ce2 <= 1'd0;
    main_basesoc_tx_enable <= 1'd0;
    main_basesoc_tx_sink_ready <= 1'd0;
    builder_basesoc_rs232phytx_next_state <= builder_basesoc_rs232phytx_state;
    case (builder_basesoc_rs232phytx_state)
        1'd1: begin
            main_basesoc_tx_enable <= 1'd1;
            if (main_basesoc_tx_tick) begin
                main_basesoc_serial_tx_rs232phytx_next_value1 <= main_basesoc_tx_data;
                main_basesoc_serial_tx_rs232phytx_next_value_ce1 <= 1'd1;
                main_basesoc_tx_count_rs232phytx_next_value0 <= (main_basesoc_tx_count + 1'd1);
                main_basesoc_tx_count_rs232phytx_next_value_ce0 <= 1'd1;
                main_basesoc_tx_data_rs232phytx_next_value2 <= {1'd1, main_basesoc_tx_data[7:1]};
                main_basesoc_tx_data_rs232phytx_next_value_ce2 <= 1'd1;
                if ((main_basesoc_tx_count == 4'd9)) begin
                    main_basesoc_tx_sink_ready <= 1'd1;
                    builder_basesoc_rs232phytx_next_state <= 1'd0;
                end
            end
        end
        default: begin
            main_basesoc_tx_count_rs232phytx_next_value0 <= 1'd0;
            main_basesoc_tx_count_rs232phytx_next_value_ce0 <= 1'd1;
            main_basesoc_serial_tx_rs232phytx_next_value1 <= 1'd1;
            main_basesoc_serial_tx_rs232phytx_next_value_ce1 <= 1'd1;
            if (main_basesoc_tx_sink_valid) begin
                main_basesoc_serial_tx_rs232phytx_next_value1 <= 1'd0;
                main_basesoc_serial_tx_rs232phytx_next_value_ce1 <= 1'd1;
                main_basesoc_tx_data_rs232phytx_next_value2 <= main_basesoc_tx_sink_payload_data;
                main_basesoc_tx_data_rs232phytx_next_value_ce2 <= 1'd1;
                builder_basesoc_rs232phytx_next_state <= 1'd1;
            end
        end
    endcase
end
always @(*) begin
    builder_basesoc_rs232phyrx_next_state <= 1'd0;
    main_basesoc_rx_count_rs232phyrx_next_value0 <= 4'd0;
    main_basesoc_rx_count_rs232phyrx_next_value_ce0 <= 1'd0;
    main_basesoc_rx_data_rs232phyrx_next_value1 <= 8'd0;
    main_basesoc_rx_data_rs232phyrx_next_value_ce1 <= 1'd0;
    main_basesoc_rx_enable <= 1'd0;
    main_basesoc_rx_source_payload_data <= 8'd0;
    main_basesoc_rx_source_valid <= 1'd0;
    builder_basesoc_rs232phyrx_next_state <= builder_basesoc_rs232phyrx_state;
    case (builder_basesoc_rs232phyrx_state)
        1'd1: begin
            main_basesoc_rx_enable <= 1'd1;
            if (main_basesoc_rx_tick) begin
                main_basesoc_rx_count_rs232phyrx_next_value0 <= (main_basesoc_rx_count + 1'd1);
                main_basesoc_rx_count_rs232phyrx_next_value_ce0 <= 1'd1;
                main_basesoc_rx_data_rs232phyrx_next_value1 <= {main_basesoc_rx_rx, main_basesoc_rx_data[7:1]};
                main_basesoc_rx_data_rs232phyrx_next_value_ce1 <= 1'd1;
                if ((main_basesoc_rx_count == 4'd9)) begin
                    main_basesoc_rx_source_valid <= (main_basesoc_rx_rx == 1'd1);
                    main_basesoc_rx_source_payload_data <= main_basesoc_rx_data;
                    builder_basesoc_rs232phyrx_next_state <= 1'd0;
                end
            end
        end
        default: begin
            main_basesoc_rx_count_rs232phyrx_next_value0 <= 1'd0;
            main_basesoc_rx_count_rs232phyrx_next_value_ce0 <= 1'd1;
            if (((main_basesoc_rx_rx == 1'd0) & (main_basesoc_rx_rx_d == 1'd1))) begin
                builder_basesoc_rs232phyrx_next_state <= 1'd1;
            end
        end
    endcase
end
assign main_basesoc_wait = (~main_basesoc_is_ongoing);
assign main_basesoc_reset = main_basesoc_done;
assign main_basesoc_wishbone_adr = main_basesoc_address;
assign main_basesoc_wishbone_dat_w = main_basesoc_data;
assign main_basesoc_wishbone_sel = 4'd15;
always @(*) begin
    main_basesoc_tx_sink_payload_data <= 8'd0;
    case (main_basesoc_data_bytes_count)
        1'd0: begin
            main_basesoc_tx_sink_payload_data <= main_basesoc_data[31:24];
        end
        1'd1: begin
            main_basesoc_tx_sink_payload_data <= main_basesoc_data[31:16];
        end
        2'd2: begin
            main_basesoc_tx_sink_payload_data <= main_basesoc_data[31:8];
        end
        2'd3: begin
            main_basesoc_tx_sink_payload_data <= main_basesoc_data[31:0];
        end
    endcase
end
assign main_basesoc_tx_sink_last = ((main_basesoc_data_bytes_count == 2'd3) & (main_basesoc_words_count == (main_basesoc_length - 1'd1)));
always @(*) begin
    builder_basesoc_uartbone_next_state <= 3'd0;
    main_basesoc_addr_bytes_count_uartbone_next_value1 <= 2'd0;
    main_basesoc_addr_bytes_count_uartbone_next_value_ce1 <= 1'd0;
    main_basesoc_address_uartbone_next_value5 <= 32'd0;
    main_basesoc_address_uartbone_next_value_ce5 <= 1'd0;
    main_basesoc_cmd_uartbone_next_value3 <= 8'd0;
    main_basesoc_cmd_uartbone_next_value_ce3 <= 1'd0;
    main_basesoc_data_bytes_count_uartbone_next_value0 <= 2'd0;
    main_basesoc_data_bytes_count_uartbone_next_value_ce0 <= 1'd0;
    main_basesoc_data_uartbone_next_value7 <= 32'd0;
    main_basesoc_data_uartbone_next_value_ce7 <= 1'd0;
    main_basesoc_incr_uartbone_next_value6 <= 1'd0;
    main_basesoc_incr_uartbone_next_value_ce6 <= 1'd0;
    main_basesoc_is_ongoing <= 1'd0;
    main_basesoc_length_uartbone_next_value4 <= 8'd0;
    main_basesoc_length_uartbone_next_value_ce4 <= 1'd0;
    main_basesoc_rx_source_ready <= 1'd0;
    main_basesoc_tx_sink_valid <= 1'd0;
    main_basesoc_wishbone_cyc <= 1'd0;
    main_basesoc_wishbone_stb <= 1'd0;
    main_basesoc_wishbone_we <= 1'd0;
    main_basesoc_words_count_uartbone_next_value2 <= 8'd0;
    main_basesoc_words_count_uartbone_next_value_ce2 <= 1'd0;
    builder_basesoc_uartbone_next_state <= builder_basesoc_uartbone_state;
    case (builder_basesoc_uartbone_state)
        1'd1: begin
            main_basesoc_rx_source_ready <= 1'd1;
            if (main_basesoc_rx_source_valid) begin
                main_basesoc_length_uartbone_next_value4 <= main_basesoc_rx_source_payload_data;
                main_basesoc_length_uartbone_next_value_ce4 <= 1'd1;
                builder_basesoc_uartbone_next_state <= 2'd2;
            end
        end
        2'd2: begin
            main_basesoc_rx_source_ready <= 1'd1;
            if (main_basesoc_rx_source_valid) begin
                main_basesoc_address_uartbone_next_value5 <= {main_basesoc_address, main_basesoc_rx_source_payload_data};
                main_basesoc_address_uartbone_next_value_ce5 <= 1'd1;
                main_basesoc_addr_bytes_count_uartbone_next_value1 <= (main_basesoc_addr_bytes_count + 1'd1);
                main_basesoc_addr_bytes_count_uartbone_next_value_ce1 <= 1'd1;
                if ((main_basesoc_addr_bytes_count == 2'd3)) begin
                    if (((main_basesoc_cmd == 1'd1) | (main_basesoc_cmd == 2'd3))) begin
                        main_basesoc_incr_uartbone_next_value6 <= (main_basesoc_cmd == 1'd1);
                        main_basesoc_incr_uartbone_next_value_ce6 <= 1'd1;
                        builder_basesoc_uartbone_next_state <= 2'd3;
                    end else begin
                        if (((main_basesoc_cmd == 2'd2) | (main_basesoc_cmd == 3'd4))) begin
                            main_basesoc_incr_uartbone_next_value6 <= (main_basesoc_cmd == 2'd2);
                            main_basesoc_incr_uartbone_next_value_ce6 <= 1'd1;
                            builder_basesoc_uartbone_next_state <= 3'd5;
                        end else begin
                            builder_basesoc_uartbone_next_state <= 1'd0;
                        end
                    end
                end
            end
        end
        2'd3: begin
            main_basesoc_rx_source_ready <= 1'd1;
            if (main_basesoc_rx_source_valid) begin
                main_basesoc_data_uartbone_next_value7 <= {main_basesoc_data, main_basesoc_rx_source_payload_data};
                main_basesoc_data_uartbone_next_value_ce7 <= 1'd1;
                main_basesoc_data_bytes_count_uartbone_next_value0 <= (main_basesoc_data_bytes_count + 1'd1);
                main_basesoc_data_bytes_count_uartbone_next_value_ce0 <= 1'd1;
                if ((main_basesoc_data_bytes_count == 2'd3)) begin
                    builder_basesoc_uartbone_next_state <= 3'd4;
                end
            end
        end
        3'd4: begin
            main_basesoc_rx_source_ready <= 1'd0;
            main_basesoc_wishbone_stb <= 1'd1;
            main_basesoc_wishbone_we <= 1'd1;
            main_basesoc_wishbone_cyc <= 1'd1;
            if (main_basesoc_wishbone_ack) begin
                main_basesoc_words_count_uartbone_next_value2 <= (main_basesoc_words_count + 1'd1);
                main_basesoc_words_count_uartbone_next_value_ce2 <= 1'd1;
                main_basesoc_address_uartbone_next_value5 <= (main_basesoc_address + main_basesoc_incr);
                main_basesoc_address_uartbone_next_value_ce5 <= 1'd1;
                if ((main_basesoc_words_count == (main_basesoc_length - 1'd1))) begin
                    builder_basesoc_uartbone_next_state <= 1'd0;
                end else begin
                    builder_basesoc_uartbone_next_state <= 2'd3;
                end
            end
        end
        3'd5: begin
            main_basesoc_rx_source_ready <= 1'd0;
            main_basesoc_wishbone_stb <= 1'd1;
            main_basesoc_wishbone_we <= 1'd0;
            main_basesoc_wishbone_cyc <= 1'd1;
            if (main_basesoc_wishbone_ack) begin
                main_basesoc_data_uartbone_next_value7 <= main_basesoc_wishbone_dat_r;
                main_basesoc_data_uartbone_next_value_ce7 <= 1'd1;
                builder_basesoc_uartbone_next_state <= 3'd6;
            end
        end
        3'd6: begin
            main_basesoc_rx_source_ready <= 1'd0;
            main_basesoc_tx_sink_valid <= 1'd1;
            if (main_basesoc_tx_sink_ready) begin
                main_basesoc_data_bytes_count_uartbone_next_value0 <= (main_basesoc_data_bytes_count + 1'd1);
                main_basesoc_data_bytes_count_uartbone_next_value_ce0 <= 1'd1;
                if ((main_basesoc_data_bytes_count == 2'd3)) begin
                    main_basesoc_words_count_uartbone_next_value2 <= (main_basesoc_words_count + 1'd1);
                    main_basesoc_words_count_uartbone_next_value_ce2 <= 1'd1;
                    main_basesoc_address_uartbone_next_value5 <= (main_basesoc_address + main_basesoc_incr);
                    main_basesoc_address_uartbone_next_value_ce5 <= 1'd1;
                    if ((main_basesoc_words_count == (main_basesoc_length - 1'd1))) begin
                        builder_basesoc_uartbone_next_state <= 1'd0;
                    end else begin
                        builder_basesoc_uartbone_next_state <= 3'd5;
                    end
                end
            end
        end
        default: begin
            main_basesoc_is_ongoing <= 1'd1;
            main_basesoc_rx_source_ready <= 1'd1;
            main_basesoc_data_bytes_count_uartbone_next_value0 <= 1'd0;
            main_basesoc_data_bytes_count_uartbone_next_value_ce0 <= 1'd1;
            main_basesoc_addr_bytes_count_uartbone_next_value1 <= 1'd0;
            main_basesoc_addr_bytes_count_uartbone_next_value_ce1 <= 1'd1;
            main_basesoc_words_count_uartbone_next_value2 <= 1'd0;
            main_basesoc_words_count_uartbone_next_value_ce2 <= 1'd1;
            if (main_basesoc_rx_source_valid) begin
                main_basesoc_cmd_uartbone_next_value3 <= main_basesoc_rx_source_payload_data;
                main_basesoc_cmd_uartbone_next_value_ce3 <= 1'd1;
                builder_basesoc_uartbone_next_state <= 1'd1;
            end
        end
    endcase
end
assign main_basesoc_done = (main_basesoc_count == 1'd0);
assign main_uartcrossover_tx_fifo_sink_valid = main_uartcrossover_rxtx_re;
assign main_uartcrossover_tx_fifo_sink_payload_data = main_uartcrossover_rxtx_r;
assign main_uartcrossover_uartcrossover_source_valid = main_uartcrossover_tx_fifo_source_valid;
assign main_uartcrossover_tx_fifo_source_ready = main_uartcrossover_uartcrossover_source_ready;
assign main_uartcrossover_uartcrossover_source_first = main_uartcrossover_tx_fifo_source_first;
assign main_uartcrossover_uartcrossover_source_last = main_uartcrossover_tx_fifo_source_last;
assign main_uartcrossover_uartcrossover_source_payload_data = main_uartcrossover_tx_fifo_source_payload_data;
assign main_uartcrossover_txfull_status = (~main_uartcrossover_tx_fifo_sink_ready);
assign main_uartcrossover_txempty_status = (~main_uartcrossover_tx_fifo_source_valid);
assign main_uartcrossover_tx_trigger = main_uartcrossover_tx_fifo_sink_ready;
assign main_uartcrossover_rx_fifo_sink_valid = main_uartcrossover_uartcrossover_sink_valid;
assign main_uartcrossover_uartcrossover_sink_ready = main_uartcrossover_rx_fifo_sink_ready;
assign main_uartcrossover_rx_fifo_sink_first = main_uartcrossover_uartcrossover_sink_first;
assign main_uartcrossover_rx_fifo_sink_last = main_uartcrossover_uartcrossover_sink_last;
assign main_uartcrossover_rx_fifo_sink_payload_data = main_uartcrossover_uartcrossover_sink_payload_data;
assign main_uartcrossover_rxtx_w = main_uartcrossover_rx_fifo_source_payload_data;
assign main_uartcrossover_rx_fifo_source_ready = (main_uartcrossover_rx_clear | (1'd0 & main_uartcrossover_rxtx_we));
assign main_uartcrossover_rxempty_status = (~main_uartcrossover_rx_fifo_source_valid);
assign main_uartcrossover_rxfull_status = (~main_uartcrossover_rx_fifo_sink_ready);
assign main_uartcrossover_rx_trigger = main_uartcrossover_rx_fifo_source_valid;
assign main_xover_uart_sink_valid = main_uartcrossover_uartcrossover_source_valid;
assign main_uartcrossover_uartcrossover_source_ready = main_xover_uart_sink_ready;
assign main_xover_uart_sink_first = main_uartcrossover_uartcrossover_source_first;
assign main_xover_uart_sink_last = main_uartcrossover_uartcrossover_source_last;
assign main_xover_uart_sink_payload_data = main_uartcrossover_uartcrossover_source_payload_data;
assign main_uartcrossover_uartcrossover_sink_valid = main_xover_uart_source_valid;
assign main_xover_uart_source_ready = main_uartcrossover_uartcrossover_sink_ready;
assign main_uartcrossover_uartcrossover_sink_first = main_xover_uart_source_first;
assign main_uartcrossover_uartcrossover_sink_last = main_xover_uart_source_last;
assign main_uartcrossover_uartcrossover_sink_payload_data = main_xover_uart_source_payload_data;
assign main_uartcrossover_tx0 = main_uartcrossover_tx_status;
assign main_uartcrossover_tx1 = main_uartcrossover_tx_pending;
always @(*) begin
    main_uartcrossover_tx_clear <= 1'd0;
    if ((main_uartcrossover_pending_re & main_uartcrossover_pending_r[0])) begin
        main_uartcrossover_tx_clear <= 1'd1;
    end
end
assign main_uartcrossover_rx0 = main_uartcrossover_rx_status;
assign main_uartcrossover_rx1 = main_uartcrossover_rx_pending;
always @(*) begin
    main_uartcrossover_rx_clear <= 1'd0;
    if ((main_uartcrossover_pending_re & main_uartcrossover_pending_r[1])) begin
        main_uartcrossover_rx_clear <= 1'd1;
    end
end
assign main_uartcrossover_irq = ((main_uartcrossover_pending_status[0] & main_uartcrossover_enable_storage[0]) | (main_uartcrossover_pending_status[1] & main_uartcrossover_enable_storage[1]));
assign main_uartcrossover_tx_status = main_uartcrossover_tx_trigger;
assign main_uartcrossover_rx_status = main_uartcrossover_rx_trigger;
assign main_uartcrossover_tx_fifo_syncfifo_din = {main_uartcrossover_tx_fifo_fifo_in_last, main_uartcrossover_tx_fifo_fifo_in_first, main_uartcrossover_tx_fifo_fifo_in_payload_data};
assign {main_uartcrossover_tx_fifo_fifo_out_last, main_uartcrossover_tx_fifo_fifo_out_first, main_uartcrossover_tx_fifo_fifo_out_payload_data} = main_uartcrossover_tx_fifo_syncfifo_dout;
assign main_uartcrossover_tx_fifo_sink_ready = main_uartcrossover_tx_fifo_syncfifo_writable;
assign main_uartcrossover_tx_fifo_syncfifo_we = main_uartcrossover_tx_fifo_sink_valid;
assign main_uartcrossover_tx_fifo_fifo_in_first = main_uartcrossover_tx_fifo_sink_first;
assign main_uartcrossover_tx_fifo_fifo_in_last = main_uartcrossover_tx_fifo_sink_last;
assign main_uartcrossover_tx_fifo_fifo_in_payload_data = main_uartcrossover_tx_fifo_sink_payload_data;
assign main_uartcrossover_tx_fifo_source_valid = main_uartcrossover_tx_fifo_readable;
assign main_uartcrossover_tx_fifo_source_first = main_uartcrossover_tx_fifo_fifo_out_first;
assign main_uartcrossover_tx_fifo_source_last = main_uartcrossover_tx_fifo_fifo_out_last;
assign main_uartcrossover_tx_fifo_source_payload_data = main_uartcrossover_tx_fifo_fifo_out_payload_data;
assign main_uartcrossover_tx_fifo_re = main_uartcrossover_tx_fifo_source_ready;
assign main_uartcrossover_tx_fifo_syncfifo_re = (main_uartcrossover_tx_fifo_syncfifo_readable & ((~main_uartcrossover_tx_fifo_readable) | main_uartcrossover_tx_fifo_re));
assign main_uartcrossover_tx_fifo_level1 = (main_uartcrossover_tx_fifo_level0 + main_uartcrossover_tx_fifo_readable);
always @(*) begin
    main_uartcrossover_tx_fifo_wrport_adr <= 4'd0;
    if (main_uartcrossover_tx_fifo_replace) begin
        main_uartcrossover_tx_fifo_wrport_adr <= (main_uartcrossover_tx_fifo_produce - 1'd1);
    end else begin
        main_uartcrossover_tx_fifo_wrport_adr <= main_uartcrossover_tx_fifo_produce;
    end
end
assign main_uartcrossover_tx_fifo_wrport_dat_w = main_uartcrossover_tx_fifo_syncfifo_din;
assign main_uartcrossover_tx_fifo_wrport_we = (main_uartcrossover_tx_fifo_syncfifo_we & (main_uartcrossover_tx_fifo_syncfifo_writable | main_uartcrossover_tx_fifo_replace));
assign main_uartcrossover_tx_fifo_do_read = (main_uartcrossover_tx_fifo_syncfifo_readable & main_uartcrossover_tx_fifo_syncfifo_re);
assign main_uartcrossover_tx_fifo_rdport_adr = main_uartcrossover_tx_fifo_consume;
assign main_uartcrossover_tx_fifo_syncfifo_dout = main_uartcrossover_tx_fifo_rdport_dat_r;
assign main_uartcrossover_tx_fifo_rdport_re = main_uartcrossover_tx_fifo_do_read;
assign main_uartcrossover_tx_fifo_syncfifo_writable = (main_uartcrossover_tx_fifo_level0 != 5'd16);
assign main_uartcrossover_tx_fifo_syncfifo_readable = (main_uartcrossover_tx_fifo_level0 != 1'd0);
assign main_uartcrossover_rx_fifo_syncfifo_din = {main_uartcrossover_rx_fifo_fifo_in_last, main_uartcrossover_rx_fifo_fifo_in_first, main_uartcrossover_rx_fifo_fifo_in_payload_data};
assign {main_uartcrossover_rx_fifo_fifo_out_last, main_uartcrossover_rx_fifo_fifo_out_first, main_uartcrossover_rx_fifo_fifo_out_payload_data} = main_uartcrossover_rx_fifo_syncfifo_dout;
assign main_uartcrossover_rx_fifo_sink_ready = main_uartcrossover_rx_fifo_syncfifo_writable;
assign main_uartcrossover_rx_fifo_syncfifo_we = main_uartcrossover_rx_fifo_sink_valid;
assign main_uartcrossover_rx_fifo_fifo_in_first = main_uartcrossover_rx_fifo_sink_first;
assign main_uartcrossover_rx_fifo_fifo_in_last = main_uartcrossover_rx_fifo_sink_last;
assign main_uartcrossover_rx_fifo_fifo_in_payload_data = main_uartcrossover_rx_fifo_sink_payload_data;
assign main_uartcrossover_rx_fifo_source_valid = main_uartcrossover_rx_fifo_readable;
assign main_uartcrossover_rx_fifo_source_first = main_uartcrossover_rx_fifo_fifo_out_first;
assign main_uartcrossover_rx_fifo_source_last = main_uartcrossover_rx_fifo_fifo_out_last;
assign main_uartcrossover_rx_fifo_source_payload_data = main_uartcrossover_rx_fifo_fifo_out_payload_data;
assign main_uartcrossover_rx_fifo_re = main_uartcrossover_rx_fifo_source_ready;
assign main_uartcrossover_rx_fifo_syncfifo_re = (main_uartcrossover_rx_fifo_syncfifo_readable & ((~main_uartcrossover_rx_fifo_readable) | main_uartcrossover_rx_fifo_re));
assign main_uartcrossover_rx_fifo_level1 = (main_uartcrossover_rx_fifo_level0 + main_uartcrossover_rx_fifo_readable);
always @(*) begin
    main_uartcrossover_rx_fifo_wrport_adr <= 4'd0;
    if (main_uartcrossover_rx_fifo_replace) begin
        main_uartcrossover_rx_fifo_wrport_adr <= (main_uartcrossover_rx_fifo_produce - 1'd1);
    end else begin
        main_uartcrossover_rx_fifo_wrport_adr <= main_uartcrossover_rx_fifo_produce;
    end
end
assign main_uartcrossover_rx_fifo_wrport_dat_w = main_uartcrossover_rx_fifo_syncfifo_din;
assign main_uartcrossover_rx_fifo_wrport_we = (main_uartcrossover_rx_fifo_syncfifo_we & (main_uartcrossover_rx_fifo_syncfifo_writable | main_uartcrossover_rx_fifo_replace));
assign main_uartcrossover_rx_fifo_do_read = (main_uartcrossover_rx_fifo_syncfifo_readable & main_uartcrossover_rx_fifo_syncfifo_re);
assign main_uartcrossover_rx_fifo_rdport_adr = main_uartcrossover_rx_fifo_consume;
assign main_uartcrossover_rx_fifo_syncfifo_dout = main_uartcrossover_rx_fifo_rdport_dat_r;
assign main_uartcrossover_rx_fifo_rdport_re = main_uartcrossover_rx_fifo_do_read;
assign main_uartcrossover_rx_fifo_syncfifo_writable = (main_uartcrossover_rx_fifo_level0 != 5'd16);
assign main_uartcrossover_rx_fifo_syncfifo_readable = (main_uartcrossover_rx_fifo_level0 != 1'd0);
assign main_xover_sink_sink_valid = main_xover_rxtx_re;
assign main_xover_sink_sink_payload_data = main_xover_rxtx_r;
assign main_xover_uart_source_valid = main_xover_source_source_valid;
assign main_xover_source_source_ready = main_xover_uart_source_ready;
assign main_xover_uart_source_first = main_xover_source_source_first;
assign main_xover_uart_source_last = main_xover_source_source_last;
assign main_xover_uart_source_payload_data = main_xover_source_source_payload_data;
assign main_xover_txfull_status = (~main_xover_sink_sink_ready);
assign main_xover_txempty_status = (~main_xover_source_source_valid);
assign main_xover_tx_trigger = main_xover_sink_sink_ready;
assign main_xover_rx_fifo_sink_valid = main_xover_uart_sink_valid;
assign main_xover_uart_sink_ready = main_xover_rx_fifo_sink_ready;
assign main_xover_rx_fifo_sink_first = main_xover_uart_sink_first;
assign main_xover_rx_fifo_sink_last = main_xover_uart_sink_last;
assign main_xover_rx_fifo_sink_payload_data = main_xover_uart_sink_payload_data;
assign main_xover_rxtx_w = main_xover_rx_fifo_source_payload_data;
assign main_xover_rx_fifo_source_ready = (main_xover_rx_clear | (1'd1 & main_xover_rxtx_we));
assign main_xover_rxempty_status = (~main_xover_rx_fifo_source_valid);
assign main_xover_rxfull_status = (~main_xover_rx_fifo_sink_ready);
assign main_xover_rx_trigger = main_xover_rx_fifo_source_valid;
assign main_xover_tx0 = main_xover_tx_status;
assign main_xover_tx1 = main_xover_tx_pending;
always @(*) begin
    main_xover_tx_clear <= 1'd0;
    if ((main_xover_pending_re & main_xover_pending_r[0])) begin
        main_xover_tx_clear <= 1'd1;
    end
end
assign main_xover_rx0 = main_xover_rx_status;
assign main_xover_rx1 = main_xover_rx_pending;
always @(*) begin
    main_xover_rx_clear <= 1'd0;
    if ((main_xover_pending_re & main_xover_pending_r[1])) begin
        main_xover_rx_clear <= 1'd1;
    end
end
assign main_xover_irq = ((main_xover_pending_status[0] & main_xover_enable_storage[0]) | (main_xover_pending_status[1] & main_xover_enable_storage[1]));
assign main_xover_tx_status = main_xover_tx_trigger;
assign main_xover_rx_status = main_xover_rx_trigger;
assign main_xover_pipe_valid_sink_ready = ((~main_xover_pipe_valid_source_valid) | main_xover_pipe_valid_source_ready);
assign main_xover_pipe_valid_sink_valid = main_xover_sink_sink_valid;
assign main_xover_sink_sink_ready = main_xover_pipe_valid_sink_ready;
assign main_xover_pipe_valid_sink_first = main_xover_sink_sink_first;
assign main_xover_pipe_valid_sink_last = main_xover_sink_sink_last;
assign main_xover_pipe_valid_sink_payload_data = main_xover_sink_sink_payload_data;
assign main_xover_source_source_valid = main_xover_pipe_valid_source_valid;
assign main_xover_pipe_valid_source_ready = main_xover_source_source_ready;
assign main_xover_source_source_first = main_xover_pipe_valid_source_first;
assign main_xover_source_source_last = main_xover_pipe_valid_source_last;
assign main_xover_source_source_payload_data = main_xover_pipe_valid_source_payload_data;
assign main_xover_rx_fifo_syncfifo_din = {main_xover_rx_fifo_fifo_in_last, main_xover_rx_fifo_fifo_in_first, main_xover_rx_fifo_fifo_in_payload_data};
assign {main_xover_rx_fifo_fifo_out_last, main_xover_rx_fifo_fifo_out_first, main_xover_rx_fifo_fifo_out_payload_data} = main_xover_rx_fifo_syncfifo_dout;
assign main_xover_rx_fifo_sink_ready = main_xover_rx_fifo_syncfifo_writable;
assign main_xover_rx_fifo_syncfifo_we = main_xover_rx_fifo_sink_valid;
assign main_xover_rx_fifo_fifo_in_first = main_xover_rx_fifo_sink_first;
assign main_xover_rx_fifo_fifo_in_last = main_xover_rx_fifo_sink_last;
assign main_xover_rx_fifo_fifo_in_payload_data = main_xover_rx_fifo_sink_payload_data;
assign main_xover_rx_fifo_source_valid = main_xover_rx_fifo_readable;
assign main_xover_rx_fifo_source_first = main_xover_rx_fifo_fifo_out_first;
assign main_xover_rx_fifo_source_last = main_xover_rx_fifo_fifo_out_last;
assign main_xover_rx_fifo_source_payload_data = main_xover_rx_fifo_fifo_out_payload_data;
assign main_xover_rx_fifo_re = main_xover_rx_fifo_source_ready;
assign main_xover_rx_fifo_syncfifo_re = (main_xover_rx_fifo_syncfifo_readable & ((~main_xover_rx_fifo_readable) | main_xover_rx_fifo_re));
assign main_xover_rx_fifo_level1 = (main_xover_rx_fifo_level0 + main_xover_rx_fifo_readable);
always @(*) begin
    main_xover_rx_fifo_wrport_adr <= 4'd0;
    if (main_xover_rx_fifo_replace) begin
        main_xover_rx_fifo_wrport_adr <= (main_xover_rx_fifo_produce - 1'd1);
    end else begin
        main_xover_rx_fifo_wrport_adr <= main_xover_rx_fifo_produce;
    end
end
assign main_xover_rx_fifo_wrport_dat_w = main_xover_rx_fifo_syncfifo_din;
assign main_xover_rx_fifo_wrport_we = (main_xover_rx_fifo_syncfifo_we & (main_xover_rx_fifo_syncfifo_writable | main_xover_rx_fifo_replace));
assign main_xover_rx_fifo_do_read = (main_xover_rx_fifo_syncfifo_readable & main_xover_rx_fifo_syncfifo_re);
assign main_xover_rx_fifo_rdport_adr = main_xover_rx_fifo_consume;
assign main_xover_rx_fifo_syncfifo_dout = main_xover_rx_fifo_rdport_dat_r;
assign main_xover_rx_fifo_rdport_re = main_xover_rx_fifo_do_read;
assign main_xover_rx_fifo_syncfifo_writable = (main_xover_rx_fifo_level0 != 5'd16);
assign main_xover_rx_fifo_syncfifo_readable = (main_xover_rx_fifo_level0 != 1'd0);
assign main_zero_trigger = (main_value == 1'd0);
assign main_zero0 = main_zero_status;
assign main_zero1 = main_zero_pending;
always @(*) begin
    main_zero_clear <= 1'd0;
    if ((main_pending_re & main_pending_r)) begin
        main_zero_clear <= 1'd1;
    end
end
assign main_irq = (main_pending_status & main_enable_storage);
assign main_zero_status = main_zero_trigger;
assign main_dfi_p0_address = main_sdram_master_p0_address;
assign main_dfi_p0_bank = main_sdram_master_p0_bank;
assign main_dfi_p0_cas_n = main_sdram_master_p0_cas_n;
assign main_dfi_p0_cs_n = main_sdram_master_p0_cs_n;
assign main_dfi_p0_ras_n = main_sdram_master_p0_ras_n;
assign main_dfi_p0_we_n = main_sdram_master_p0_we_n;
assign main_dfi_p0_cke = main_sdram_master_p0_cke;
assign main_dfi_p0_odt = main_sdram_master_p0_odt;
assign main_dfi_p0_reset_n = main_sdram_master_p0_reset_n;
assign main_dfi_p0_act_n = main_sdram_master_p0_act_n;
assign main_dfi_p0_wrdata = main_sdram_master_p0_wrdata;
assign main_dfi_p0_wrdata_en = main_sdram_master_p0_wrdata_en;
assign main_dfi_p0_wrdata_mask = main_sdram_master_p0_wrdata_mask;
assign main_dfi_p0_rddata_en = main_sdram_master_p0_rddata_en;
assign main_sdram_master_p0_rddata = main_dfi_p0_rddata;
assign main_sdram_master_p0_rddata_valid = main_dfi_p0_rddata_valid;
assign main_sdram_slave_p0_address = main_sdram_dfi_p0_address;
assign main_sdram_slave_p0_bank = main_sdram_dfi_p0_bank;
assign main_sdram_slave_p0_cas_n = main_sdram_dfi_p0_cas_n;
assign main_sdram_slave_p0_cs_n = main_sdram_dfi_p0_cs_n;
assign main_sdram_slave_p0_ras_n = main_sdram_dfi_p0_ras_n;
assign main_sdram_slave_p0_we_n = main_sdram_dfi_p0_we_n;
assign main_sdram_slave_p0_cke = main_sdram_dfi_p0_cke;
assign main_sdram_slave_p0_odt = main_sdram_dfi_p0_odt;
assign main_sdram_slave_p0_reset_n = main_sdram_dfi_p0_reset_n;
assign main_sdram_slave_p0_act_n = main_sdram_dfi_p0_act_n;
assign main_sdram_slave_p0_wrdata = main_sdram_dfi_p0_wrdata;
assign main_sdram_slave_p0_wrdata_en = main_sdram_dfi_p0_wrdata_en;
assign main_sdram_slave_p0_wrdata_mask = main_sdram_dfi_p0_wrdata_mask;
assign main_sdram_slave_p0_rddata_en = main_sdram_dfi_p0_rddata_en;
assign main_sdram_dfi_p0_rddata = main_sdram_slave_p0_rddata;
assign main_sdram_dfi_p0_rddata_valid = main_sdram_slave_p0_rddata_valid;
always @(*) begin
    main_sdram_csr_dfi_p0_rddata <= 16'd0;
    main_sdram_csr_dfi_p0_rddata_valid <= 1'd0;
    main_sdram_ext_dfi_p0_rddata <= 16'd0;
    main_sdram_ext_dfi_p0_rddata_valid <= 1'd0;
    main_sdram_master_p0_act_n <= 1'd1;
    main_sdram_master_p0_address <= 13'd0;
    main_sdram_master_p0_bank <= 2'd0;
    main_sdram_master_p0_cas_n <= 1'd1;
    main_sdram_master_p0_cke <= 1'd0;
    main_sdram_master_p0_cs_n <= 1'd1;
    main_sdram_master_p0_odt <= 1'd0;
    main_sdram_master_p0_ras_n <= 1'd1;
    main_sdram_master_p0_rddata_en <= 1'd0;
    main_sdram_master_p0_reset_n <= 1'd0;
    main_sdram_master_p0_we_n <= 1'd1;
    main_sdram_master_p0_wrdata <= 16'd0;
    main_sdram_master_p0_wrdata_en <= 1'd0;
    main_sdram_master_p0_wrdata_mask <= 2'd0;
    main_sdram_slave_p0_rddata <= 16'd0;
    main_sdram_slave_p0_rddata_valid <= 1'd0;
    if (main_sdram_sel) begin
        if (main_sdram_ext_dfi_sel) begin
            main_sdram_master_p0_address <= main_sdram_ext_dfi_p0_address;
            main_sdram_master_p0_bank <= main_sdram_ext_dfi_p0_bank;
            main_sdram_master_p0_cas_n <= main_sdram_ext_dfi_p0_cas_n;
            main_sdram_master_p0_cs_n <= main_sdram_ext_dfi_p0_cs_n;
            main_sdram_master_p0_ras_n <= main_sdram_ext_dfi_p0_ras_n;
            main_sdram_master_p0_we_n <= main_sdram_ext_dfi_p0_we_n;
            main_sdram_master_p0_cke <= main_sdram_ext_dfi_p0_cke;
            main_sdram_master_p0_odt <= main_sdram_ext_dfi_p0_odt;
            main_sdram_master_p0_reset_n <= main_sdram_ext_dfi_p0_reset_n;
            main_sdram_master_p0_act_n <= main_sdram_ext_dfi_p0_act_n;
            main_sdram_master_p0_wrdata <= main_sdram_ext_dfi_p0_wrdata;
            main_sdram_master_p0_wrdata_en <= main_sdram_ext_dfi_p0_wrdata_en;
            main_sdram_master_p0_wrdata_mask <= main_sdram_ext_dfi_p0_wrdata_mask;
            main_sdram_master_p0_rddata_en <= main_sdram_ext_dfi_p0_rddata_en;
            main_sdram_ext_dfi_p0_rddata <= main_sdram_master_p0_rddata;
            main_sdram_ext_dfi_p0_rddata_valid <= main_sdram_master_p0_rddata_valid;
        end else begin
            main_sdram_master_p0_address <= main_sdram_slave_p0_address;
            main_sdram_master_p0_bank <= main_sdram_slave_p0_bank;
            main_sdram_master_p0_cas_n <= main_sdram_slave_p0_cas_n;
            main_sdram_master_p0_cs_n <= main_sdram_slave_p0_cs_n;
            main_sdram_master_p0_ras_n <= main_sdram_slave_p0_ras_n;
            main_sdram_master_p0_we_n <= main_sdram_slave_p0_we_n;
            main_sdram_master_p0_cke <= main_sdram_slave_p0_cke;
            main_sdram_master_p0_odt <= main_sdram_slave_p0_odt;
            main_sdram_master_p0_reset_n <= main_sdram_slave_p0_reset_n;
            main_sdram_master_p0_act_n <= main_sdram_slave_p0_act_n;
            main_sdram_master_p0_wrdata <= main_sdram_slave_p0_wrdata;
            main_sdram_master_p0_wrdata_en <= main_sdram_slave_p0_wrdata_en;
            main_sdram_master_p0_wrdata_mask <= main_sdram_slave_p0_wrdata_mask;
            main_sdram_master_p0_rddata_en <= main_sdram_slave_p0_rddata_en;
            main_sdram_slave_p0_rddata <= main_sdram_master_p0_rddata;
            main_sdram_slave_p0_rddata_valid <= main_sdram_master_p0_rddata_valid;
            if (1'd0) begin
                main_sdram_master_p0_cs_n <= {2{main_sdram_slave_p0_cs_n}};
            end
        end
    end else begin
        main_sdram_master_p0_address <= main_sdram_csr_dfi_p0_address;
        main_sdram_master_p0_bank <= main_sdram_csr_dfi_p0_bank;
        main_sdram_master_p0_cas_n <= main_sdram_csr_dfi_p0_cas_n;
        main_sdram_master_p0_cs_n <= main_sdram_csr_dfi_p0_cs_n;
        main_sdram_master_p0_ras_n <= main_sdram_csr_dfi_p0_ras_n;
        main_sdram_master_p0_we_n <= main_sdram_csr_dfi_p0_we_n;
        main_sdram_master_p0_cke <= main_sdram_csr_dfi_p0_cke;
        main_sdram_master_p0_odt <= main_sdram_csr_dfi_p0_odt;
        main_sdram_master_p0_reset_n <= main_sdram_csr_dfi_p0_reset_n;
        main_sdram_master_p0_act_n <= main_sdram_csr_dfi_p0_act_n;
        main_sdram_master_p0_wrdata <= main_sdram_csr_dfi_p0_wrdata;
        main_sdram_master_p0_wrdata_en <= main_sdram_csr_dfi_p0_wrdata_en;
        main_sdram_master_p0_wrdata_mask <= main_sdram_csr_dfi_p0_wrdata_mask;
        main_sdram_master_p0_rddata_en <= main_sdram_csr_dfi_p0_rddata_en;
        main_sdram_csr_dfi_p0_rddata <= main_sdram_master_p0_rddata;
        main_sdram_csr_dfi_p0_rddata_valid <= main_sdram_master_p0_rddata_valid;
    end
end
always @(*) begin
    main_sdram_csr_dfi_p0_cke <= 1'd0;
    main_sdram_csr_dfi_p0_cke <= main_sdram_cke1;
end
always @(*) begin
    main_sdram_csr_dfi_p0_odt <= 1'd0;
    main_sdram_csr_dfi_p0_odt <= main_sdram_odt;
end
assign main_sdram_csr_dfi_p0_reset_n = main_sdram_reset_n;
always @(*) begin
    main_sdram_csr_dfi_p0_cas_n <= 1'd1;
    main_sdram_csr_dfi_p0_cs_n <= 1'd1;
    main_sdram_csr_dfi_p0_ras_n <= 1'd1;
    main_sdram_csr_dfi_p0_we_n <= 1'd1;
    if (main_sdram_command_issue_re) begin
        if (main_sdram_csrfield_cs_top) begin
            main_sdram_csr_dfi_p0_cs_n <= 2'd2;
        end else begin
            if (main_sdram_csrfield_cs_bottom) begin
                main_sdram_csr_dfi_p0_cs_n <= 1'd1;
            end else begin
                main_sdram_csr_dfi_p0_cs_n <= {1{(~main_sdram_csrfield_cs)}};
            end
        end
        main_sdram_csr_dfi_p0_we_n <= (~main_sdram_csrfield_we);
        main_sdram_csr_dfi_p0_cas_n <= (~main_sdram_csrfield_cas);
        main_sdram_csr_dfi_p0_ras_n <= (~main_sdram_csrfield_ras);
    end else begin
        main_sdram_csr_dfi_p0_cs_n <= {1{1'd1}};
        main_sdram_csr_dfi_p0_we_n <= 1'd1;
        main_sdram_csr_dfi_p0_cas_n <= 1'd1;
        main_sdram_csr_dfi_p0_ras_n <= 1'd1;
    end
end
assign main_sdram_csr_dfi_p0_address = main_sdram_address_storage;
assign main_sdram_csr_dfi_p0_bank = main_sdram_baddress_storage;
assign main_sdram_csr_dfi_p0_wrdata_en = (main_sdram_command_issue_re & main_sdram_csrfield_wren);
assign main_sdram_csr_dfi_p0_rddata_en = (main_sdram_command_issue_re & main_sdram_csrfield_rden);
assign main_sdram_csr_dfi_p0_wrdata = main_sdram_wrdata_storage;
assign main_sdram_csr_dfi_p0_wrdata_mask = 1'd0;
assign main_sdram_bankmachine0_req_valid = main_sdram_interface_bank0_valid;
assign main_sdram_interface_bank0_ready = main_sdram_bankmachine0_req_ready;
assign main_sdram_bankmachine0_req_we = main_sdram_interface_bank0_we;
assign main_sdram_bankmachine0_req_addr = main_sdram_interface_bank0_addr;
assign main_sdram_interface_bank0_lock = main_sdram_bankmachine0_req_lock;
assign main_sdram_interface_bank0_wdata_ready = main_sdram_bankmachine0_req_wdata_ready;
assign main_sdram_interface_bank0_rdata_valid = main_sdram_bankmachine0_req_rdata_valid;
assign main_sdram_bankmachine1_req_valid = main_sdram_interface_bank1_valid;
assign main_sdram_interface_bank1_ready = main_sdram_bankmachine1_req_ready;
assign main_sdram_bankmachine1_req_we = main_sdram_interface_bank1_we;
assign main_sdram_bankmachine1_req_addr = main_sdram_interface_bank1_addr;
assign main_sdram_interface_bank1_lock = main_sdram_bankmachine1_req_lock;
assign main_sdram_interface_bank1_wdata_ready = main_sdram_bankmachine1_req_wdata_ready;
assign main_sdram_interface_bank1_rdata_valid = main_sdram_bankmachine1_req_rdata_valid;
assign main_sdram_bankmachine2_req_valid = main_sdram_interface_bank2_valid;
assign main_sdram_interface_bank2_ready = main_sdram_bankmachine2_req_ready;
assign main_sdram_bankmachine2_req_we = main_sdram_interface_bank2_we;
assign main_sdram_bankmachine2_req_addr = main_sdram_interface_bank2_addr;
assign main_sdram_interface_bank2_lock = main_sdram_bankmachine2_req_lock;
assign main_sdram_interface_bank2_wdata_ready = main_sdram_bankmachine2_req_wdata_ready;
assign main_sdram_interface_bank2_rdata_valid = main_sdram_bankmachine2_req_rdata_valid;
assign main_sdram_bankmachine3_req_valid = main_sdram_interface_bank3_valid;
assign main_sdram_interface_bank3_ready = main_sdram_bankmachine3_req_ready;
assign main_sdram_bankmachine3_req_we = main_sdram_interface_bank3_we;
assign main_sdram_bankmachine3_req_addr = main_sdram_interface_bank3_addr;
assign main_sdram_interface_bank3_lock = main_sdram_bankmachine3_req_lock;
assign main_sdram_interface_bank3_wdata_ready = main_sdram_bankmachine3_req_wdata_ready;
assign main_sdram_interface_bank3_rdata_valid = main_sdram_bankmachine3_req_rdata_valid;
assign main_sdram_timer_wait = (~main_sdram_timer_done0);
assign main_sdram_postponer_req_i = main_sdram_timer_done0;
assign main_sdram_wants_refresh = main_sdram_postponer_req_o;
assign main_sdram_timer_done1 = (main_sdram_timer_count1 == 1'd0);
assign main_sdram_timer_done0 = main_sdram_timer_done1;
assign main_sdram_timer_count0 = main_sdram_timer_count1;
assign main_sdram_sequencer_start1 = (main_sdram_sequencer_start0 | (main_sdram_sequencer_count != 1'd0));
assign main_sdram_sequencer_done0 = (main_sdram_sequencer_done1 & (main_sdram_sequencer_count == 1'd0));
always @(*) begin
    builder_basesoc_litedramcore_refresher_next_state <= 2'd0;
    main_sdram_cmd_last <= 1'd0;
    main_sdram_cmd_valid <= 1'd0;
    main_sdram_sequencer_start0 <= 1'd0;
    builder_basesoc_litedramcore_refresher_next_state <= builder_basesoc_litedramcore_refresher_state;
    case (builder_basesoc_litedramcore_refresher_state)
        1'd1: begin
            main_sdram_cmd_valid <= 1'd1;
            if (main_sdram_cmd_ready) begin
                main_sdram_sequencer_start0 <= 1'd1;
                builder_basesoc_litedramcore_refresher_next_state <= 2'd2;
            end
        end
        2'd2: begin
            main_sdram_cmd_valid <= 1'd1;
            if (main_sdram_sequencer_done0) begin
                main_sdram_cmd_valid <= 1'd0;
                main_sdram_cmd_last <= 1'd1;
                builder_basesoc_litedramcore_refresher_next_state <= 1'd0;
            end
        end
        default: begin
            if (1'd1) begin
                if (main_sdram_wants_refresh) begin
                    builder_basesoc_litedramcore_refresher_next_state <= 1'd1;
                end
            end
        end
    endcase
end
assign main_sdram_bankmachine0_sink_valid = main_sdram_bankmachine0_req_valid;
assign main_sdram_bankmachine0_req_ready = main_sdram_bankmachine0_sink_ready;
assign main_sdram_bankmachine0_sink_payload_we = main_sdram_bankmachine0_req_we;
assign main_sdram_bankmachine0_sink_payload_addr = main_sdram_bankmachine0_req_addr;
assign main_sdram_bankmachine0_sink_sink_valid = main_sdram_bankmachine0_source_valid;
assign main_sdram_bankmachine0_source_ready = main_sdram_bankmachine0_sink_sink_ready;
assign main_sdram_bankmachine0_sink_sink_first = main_sdram_bankmachine0_source_first;
assign main_sdram_bankmachine0_sink_sink_last = main_sdram_bankmachine0_source_last;
assign main_sdram_bankmachine0_sink_sink_payload_we = main_sdram_bankmachine0_source_payload_we;
assign main_sdram_bankmachine0_sink_sink_payload_addr = main_sdram_bankmachine0_source_payload_addr;
assign main_sdram_bankmachine0_source_source_ready = (main_sdram_bankmachine0_req_wdata_ready | main_sdram_bankmachine0_req_rdata_valid);
assign main_sdram_bankmachine0_req_lock = (main_sdram_bankmachine0_source_valid | main_sdram_bankmachine0_source_source_valid);
assign main_sdram_bankmachine0_row_hit = (main_sdram_bankmachine0_row == main_sdram_bankmachine0_source_source_payload_addr[21:9]);
assign main_sdram_bankmachine0_cmd_payload_ba = 1'd0;
always @(*) begin
    main_sdram_bankmachine0_cmd_payload_a <= 13'd0;
    if (main_sdram_bankmachine0_row_col_n_addr_sel) begin
        main_sdram_bankmachine0_cmd_payload_a <= main_sdram_bankmachine0_source_source_payload_addr[21:9];
    end else begin
        main_sdram_bankmachine0_cmd_payload_a <= ((main_sdram_bankmachine0_auto_precharge <<< 4'd10) | {main_sdram_bankmachine0_source_source_payload_addr[8:0], {0{1'd0}}});
    end
end
assign main_sdram_bankmachine0_twtpcon_valid = ((main_sdram_bankmachine0_cmd_valid & main_sdram_bankmachine0_cmd_ready) & main_sdram_bankmachine0_cmd_payload_is_write);
assign main_sdram_bankmachine0_trccon_valid = ((main_sdram_bankmachine0_cmd_valid & main_sdram_bankmachine0_cmd_ready) & main_sdram_bankmachine0_row_open);
assign main_sdram_bankmachine0_trascon_valid = ((main_sdram_bankmachine0_cmd_valid & main_sdram_bankmachine0_cmd_ready) & main_sdram_bankmachine0_row_open);
always @(*) begin
    main_sdram_bankmachine0_auto_precharge <= 1'd0;
    if ((main_sdram_bankmachine0_source_valid & main_sdram_bankmachine0_source_source_valid)) begin
        if ((main_sdram_bankmachine0_source_payload_addr[21:9] != main_sdram_bankmachine0_source_source_payload_addr[21:9])) begin
            main_sdram_bankmachine0_auto_precharge <= (main_sdram_bankmachine0_row_close == 1'd0);
        end
    end
end
assign main_sdram_bankmachine0_syncfifo0_din = {main_sdram_bankmachine0_fifo_in_last, main_sdram_bankmachine0_fifo_in_first, main_sdram_bankmachine0_fifo_in_payload_addr, main_sdram_bankmachine0_fifo_in_payload_we};
assign {main_sdram_bankmachine0_fifo_out_last, main_sdram_bankmachine0_fifo_out_first, main_sdram_bankmachine0_fifo_out_payload_addr, main_sdram_bankmachine0_fifo_out_payload_we} = main_sdram_bankmachine0_syncfifo0_dout;
assign main_sdram_bankmachine0_sink_ready = main_sdram_bankmachine0_syncfifo0_writable;
assign main_sdram_bankmachine0_syncfifo0_we = main_sdram_bankmachine0_sink_valid;
assign main_sdram_bankmachine0_fifo_in_first = main_sdram_bankmachine0_sink_first;
assign main_sdram_bankmachine0_fifo_in_last = main_sdram_bankmachine0_sink_last;
assign main_sdram_bankmachine0_fifo_in_payload_we = main_sdram_bankmachine0_sink_payload_we;
assign main_sdram_bankmachine0_fifo_in_payload_addr = main_sdram_bankmachine0_sink_payload_addr;
assign main_sdram_bankmachine0_source_valid = main_sdram_bankmachine0_syncfifo0_readable;
assign main_sdram_bankmachine0_source_first = main_sdram_bankmachine0_fifo_out_first;
assign main_sdram_bankmachine0_source_last = main_sdram_bankmachine0_fifo_out_last;
assign main_sdram_bankmachine0_source_payload_we = main_sdram_bankmachine0_fifo_out_payload_we;
assign main_sdram_bankmachine0_source_payload_addr = main_sdram_bankmachine0_fifo_out_payload_addr;
assign main_sdram_bankmachine0_syncfifo0_re = main_sdram_bankmachine0_source_ready;
always @(*) begin
    main_sdram_bankmachine0_wrport_adr <= 3'd0;
    if (main_sdram_bankmachine0_replace) begin
        main_sdram_bankmachine0_wrport_adr <= (main_sdram_bankmachine0_produce - 1'd1);
    end else begin
        main_sdram_bankmachine0_wrport_adr <= main_sdram_bankmachine0_produce;
    end
end
assign main_sdram_bankmachine0_wrport_dat_w = main_sdram_bankmachine0_syncfifo0_din;
assign main_sdram_bankmachine0_wrport_we = (main_sdram_bankmachine0_syncfifo0_we & (main_sdram_bankmachine0_syncfifo0_writable | main_sdram_bankmachine0_replace));
assign main_sdram_bankmachine0_do_read = (main_sdram_bankmachine0_syncfifo0_readable & main_sdram_bankmachine0_syncfifo0_re);
assign main_sdram_bankmachine0_rdport_adr = main_sdram_bankmachine0_consume;
assign main_sdram_bankmachine0_syncfifo0_dout = main_sdram_bankmachine0_rdport_dat_r;
assign main_sdram_bankmachine0_syncfifo0_writable = (main_sdram_bankmachine0_level != 4'd8);
assign main_sdram_bankmachine0_syncfifo0_readable = (main_sdram_bankmachine0_level != 1'd0);
assign main_sdram_bankmachine0_pipe_valid_sink_ready = ((~main_sdram_bankmachine0_pipe_valid_source_valid) | main_sdram_bankmachine0_pipe_valid_source_ready);
assign main_sdram_bankmachine0_pipe_valid_sink_valid = main_sdram_bankmachine0_sink_sink_valid;
assign main_sdram_bankmachine0_sink_sink_ready = main_sdram_bankmachine0_pipe_valid_sink_ready;
assign main_sdram_bankmachine0_pipe_valid_sink_first = main_sdram_bankmachine0_sink_sink_first;
assign main_sdram_bankmachine0_pipe_valid_sink_last = main_sdram_bankmachine0_sink_sink_last;
assign main_sdram_bankmachine0_pipe_valid_sink_payload_we = main_sdram_bankmachine0_sink_sink_payload_we;
assign main_sdram_bankmachine0_pipe_valid_sink_payload_addr = main_sdram_bankmachine0_sink_sink_payload_addr;
assign main_sdram_bankmachine0_source_source_valid = main_sdram_bankmachine0_pipe_valid_source_valid;
assign main_sdram_bankmachine0_pipe_valid_source_ready = main_sdram_bankmachine0_source_source_ready;
assign main_sdram_bankmachine0_source_source_first = main_sdram_bankmachine0_pipe_valid_source_first;
assign main_sdram_bankmachine0_source_source_last = main_sdram_bankmachine0_pipe_valid_source_last;
assign main_sdram_bankmachine0_source_source_payload_we = main_sdram_bankmachine0_pipe_valid_source_payload_we;
assign main_sdram_bankmachine0_source_source_payload_addr = main_sdram_bankmachine0_pipe_valid_source_payload_addr;
always @(*) begin
    builder_basesoc_litedramcore_bankmachine0_next_state <= 3'd0;
    main_sdram_bankmachine0_cmd_payload_cas <= 1'd0;
    main_sdram_bankmachine0_cmd_payload_is_cmd <= 1'd0;
    main_sdram_bankmachine0_cmd_payload_is_read <= 1'd0;
    main_sdram_bankmachine0_cmd_payload_is_write <= 1'd0;
    main_sdram_bankmachine0_cmd_payload_ras <= 1'd0;
    main_sdram_bankmachine0_cmd_payload_we <= 1'd0;
    main_sdram_bankmachine0_cmd_valid <= 1'd0;
    main_sdram_bankmachine0_refresh_gnt <= 1'd0;
    main_sdram_bankmachine0_req_rdata_valid <= 1'd0;
    main_sdram_bankmachine0_req_wdata_ready <= 1'd0;
    main_sdram_bankmachine0_row_close <= 1'd0;
    main_sdram_bankmachine0_row_col_n_addr_sel <= 1'd0;
    main_sdram_bankmachine0_row_open <= 1'd0;
    builder_basesoc_litedramcore_bankmachine0_next_state <= builder_basesoc_litedramcore_bankmachine0_state;
    case (builder_basesoc_litedramcore_bankmachine0_state)
        1'd1: begin
            if ((main_sdram_bankmachine0_twtpcon_ready & main_sdram_bankmachine0_trascon_ready)) begin
                main_sdram_bankmachine0_cmd_valid <= 1'd1;
                if (main_sdram_bankmachine0_cmd_ready) begin
                    builder_basesoc_litedramcore_bankmachine0_next_state <= 2'd3;
                end
                main_sdram_bankmachine0_cmd_payload_ras <= 1'd1;
                main_sdram_bankmachine0_cmd_payload_we <= 1'd1;
                main_sdram_bankmachine0_cmd_payload_is_cmd <= 1'd1;
            end
            main_sdram_bankmachine0_row_close <= 1'd1;
        end
        2'd2: begin
            if ((main_sdram_bankmachine0_twtpcon_ready & main_sdram_bankmachine0_trascon_ready)) begin
                builder_basesoc_litedramcore_bankmachine0_next_state <= 2'd3;
            end
            main_sdram_bankmachine0_row_close <= 1'd1;
        end
        2'd3: begin
            if (main_sdram_bankmachine0_trccon_ready) begin
                main_sdram_bankmachine0_row_col_n_addr_sel <= 1'd1;
                main_sdram_bankmachine0_row_open <= 1'd1;
                main_sdram_bankmachine0_cmd_valid <= 1'd1;
                main_sdram_bankmachine0_cmd_payload_is_cmd <= 1'd1;
                if (main_sdram_bankmachine0_cmd_ready) begin
                    builder_basesoc_litedramcore_bankmachine0_next_state <= 1'd0;
                end
                main_sdram_bankmachine0_cmd_payload_ras <= 1'd1;
            end
        end
        3'd4: begin
            if (main_sdram_bankmachine0_twtpcon_ready) begin
                main_sdram_bankmachine0_refresh_gnt <= 1'd1;
            end
            main_sdram_bankmachine0_row_close <= 1'd1;
            main_sdram_bankmachine0_cmd_payload_is_cmd <= 1'd1;
            if ((~main_sdram_bankmachine0_refresh_req)) begin
                builder_basesoc_litedramcore_bankmachine0_next_state <= 1'd0;
            end
        end
        default: begin
            if (main_sdram_bankmachine0_refresh_req) begin
                builder_basesoc_litedramcore_bankmachine0_next_state <= 3'd4;
            end else begin
                if (main_sdram_bankmachine0_source_source_valid) begin
                    if (main_sdram_bankmachine0_row_opened) begin
                        if (main_sdram_bankmachine0_row_hit) begin
                            main_sdram_bankmachine0_cmd_valid <= 1'd1;
                            if (main_sdram_bankmachine0_source_source_payload_we) begin
                                main_sdram_bankmachine0_req_wdata_ready <= main_sdram_bankmachine0_cmd_ready;
                                main_sdram_bankmachine0_cmd_payload_is_write <= 1'd1;
                                main_sdram_bankmachine0_cmd_payload_we <= 1'd1;
                            end else begin
                                main_sdram_bankmachine0_req_rdata_valid <= main_sdram_bankmachine0_cmd_ready;
                                main_sdram_bankmachine0_cmd_payload_is_read <= 1'd1;
                            end
                            main_sdram_bankmachine0_cmd_payload_cas <= 1'd1;
                            if ((main_sdram_bankmachine0_cmd_ready & main_sdram_bankmachine0_auto_precharge)) begin
                                builder_basesoc_litedramcore_bankmachine0_next_state <= 2'd2;
                            end
                        end else begin
                            builder_basesoc_litedramcore_bankmachine0_next_state <= 1'd1;
                        end
                    end else begin
                        builder_basesoc_litedramcore_bankmachine0_next_state <= 2'd3;
                    end
                end
            end
        end
    endcase
end
assign main_sdram_bankmachine1_sink_valid = main_sdram_bankmachine1_req_valid;
assign main_sdram_bankmachine1_req_ready = main_sdram_bankmachine1_sink_ready;
assign main_sdram_bankmachine1_sink_payload_we = main_sdram_bankmachine1_req_we;
assign main_sdram_bankmachine1_sink_payload_addr = main_sdram_bankmachine1_req_addr;
assign main_sdram_bankmachine1_sink_sink_valid = main_sdram_bankmachine1_source_valid;
assign main_sdram_bankmachine1_source_ready = main_sdram_bankmachine1_sink_sink_ready;
assign main_sdram_bankmachine1_sink_sink_first = main_sdram_bankmachine1_source_first;
assign main_sdram_bankmachine1_sink_sink_last = main_sdram_bankmachine1_source_last;
assign main_sdram_bankmachine1_sink_sink_payload_we = main_sdram_bankmachine1_source_payload_we;
assign main_sdram_bankmachine1_sink_sink_payload_addr = main_sdram_bankmachine1_source_payload_addr;
assign main_sdram_bankmachine1_source_source_ready = (main_sdram_bankmachine1_req_wdata_ready | main_sdram_bankmachine1_req_rdata_valid);
assign main_sdram_bankmachine1_req_lock = (main_sdram_bankmachine1_source_valid | main_sdram_bankmachine1_source_source_valid);
assign main_sdram_bankmachine1_row_hit = (main_sdram_bankmachine1_row == main_sdram_bankmachine1_source_source_payload_addr[21:9]);
assign main_sdram_bankmachine1_cmd_payload_ba = 1'd1;
always @(*) begin
    main_sdram_bankmachine1_cmd_payload_a <= 13'd0;
    if (main_sdram_bankmachine1_row_col_n_addr_sel) begin
        main_sdram_bankmachine1_cmd_payload_a <= main_sdram_bankmachine1_source_source_payload_addr[21:9];
    end else begin
        main_sdram_bankmachine1_cmd_payload_a <= ((main_sdram_bankmachine1_auto_precharge <<< 4'd10) | {main_sdram_bankmachine1_source_source_payload_addr[8:0], {0{1'd0}}});
    end
end
assign main_sdram_bankmachine1_twtpcon_valid = ((main_sdram_bankmachine1_cmd_valid & main_sdram_bankmachine1_cmd_ready) & main_sdram_bankmachine1_cmd_payload_is_write);
assign main_sdram_bankmachine1_trccon_valid = ((main_sdram_bankmachine1_cmd_valid & main_sdram_bankmachine1_cmd_ready) & main_sdram_bankmachine1_row_open);
assign main_sdram_bankmachine1_trascon_valid = ((main_sdram_bankmachine1_cmd_valid & main_sdram_bankmachine1_cmd_ready) & main_sdram_bankmachine1_row_open);
always @(*) begin
    main_sdram_bankmachine1_auto_precharge <= 1'd0;
    if ((main_sdram_bankmachine1_source_valid & main_sdram_bankmachine1_source_source_valid)) begin
        if ((main_sdram_bankmachine1_source_payload_addr[21:9] != main_sdram_bankmachine1_source_source_payload_addr[21:9])) begin
            main_sdram_bankmachine1_auto_precharge <= (main_sdram_bankmachine1_row_close == 1'd0);
        end
    end
end
assign main_sdram_bankmachine1_syncfifo1_din = {main_sdram_bankmachine1_fifo_in_last, main_sdram_bankmachine1_fifo_in_first, main_sdram_bankmachine1_fifo_in_payload_addr, main_sdram_bankmachine1_fifo_in_payload_we};
assign {main_sdram_bankmachine1_fifo_out_last, main_sdram_bankmachine1_fifo_out_first, main_sdram_bankmachine1_fifo_out_payload_addr, main_sdram_bankmachine1_fifo_out_payload_we} = main_sdram_bankmachine1_syncfifo1_dout;
assign main_sdram_bankmachine1_sink_ready = main_sdram_bankmachine1_syncfifo1_writable;
assign main_sdram_bankmachine1_syncfifo1_we = main_sdram_bankmachine1_sink_valid;
assign main_sdram_bankmachine1_fifo_in_first = main_sdram_bankmachine1_sink_first;
assign main_sdram_bankmachine1_fifo_in_last = main_sdram_bankmachine1_sink_last;
assign main_sdram_bankmachine1_fifo_in_payload_we = main_sdram_bankmachine1_sink_payload_we;
assign main_sdram_bankmachine1_fifo_in_payload_addr = main_sdram_bankmachine1_sink_payload_addr;
assign main_sdram_bankmachine1_source_valid = main_sdram_bankmachine1_syncfifo1_readable;
assign main_sdram_bankmachine1_source_first = main_sdram_bankmachine1_fifo_out_first;
assign main_sdram_bankmachine1_source_last = main_sdram_bankmachine1_fifo_out_last;
assign main_sdram_bankmachine1_source_payload_we = main_sdram_bankmachine1_fifo_out_payload_we;
assign main_sdram_bankmachine1_source_payload_addr = main_sdram_bankmachine1_fifo_out_payload_addr;
assign main_sdram_bankmachine1_syncfifo1_re = main_sdram_bankmachine1_source_ready;
always @(*) begin
    main_sdram_bankmachine1_wrport_adr <= 3'd0;
    if (main_sdram_bankmachine1_replace) begin
        main_sdram_bankmachine1_wrport_adr <= (main_sdram_bankmachine1_produce - 1'd1);
    end else begin
        main_sdram_bankmachine1_wrport_adr <= main_sdram_bankmachine1_produce;
    end
end
assign main_sdram_bankmachine1_wrport_dat_w = main_sdram_bankmachine1_syncfifo1_din;
assign main_sdram_bankmachine1_wrport_we = (main_sdram_bankmachine1_syncfifo1_we & (main_sdram_bankmachine1_syncfifo1_writable | main_sdram_bankmachine1_replace));
assign main_sdram_bankmachine1_do_read = (main_sdram_bankmachine1_syncfifo1_readable & main_sdram_bankmachine1_syncfifo1_re);
assign main_sdram_bankmachine1_rdport_adr = main_sdram_bankmachine1_consume;
assign main_sdram_bankmachine1_syncfifo1_dout = main_sdram_bankmachine1_rdport_dat_r;
assign main_sdram_bankmachine1_syncfifo1_writable = (main_sdram_bankmachine1_level != 4'd8);
assign main_sdram_bankmachine1_syncfifo1_readable = (main_sdram_bankmachine1_level != 1'd0);
assign main_sdram_bankmachine1_pipe_valid_sink_ready = ((~main_sdram_bankmachine1_pipe_valid_source_valid) | main_sdram_bankmachine1_pipe_valid_source_ready);
assign main_sdram_bankmachine1_pipe_valid_sink_valid = main_sdram_bankmachine1_sink_sink_valid;
assign main_sdram_bankmachine1_sink_sink_ready = main_sdram_bankmachine1_pipe_valid_sink_ready;
assign main_sdram_bankmachine1_pipe_valid_sink_first = main_sdram_bankmachine1_sink_sink_first;
assign main_sdram_bankmachine1_pipe_valid_sink_last = main_sdram_bankmachine1_sink_sink_last;
assign main_sdram_bankmachine1_pipe_valid_sink_payload_we = main_sdram_bankmachine1_sink_sink_payload_we;
assign main_sdram_bankmachine1_pipe_valid_sink_payload_addr = main_sdram_bankmachine1_sink_sink_payload_addr;
assign main_sdram_bankmachine1_source_source_valid = main_sdram_bankmachine1_pipe_valid_source_valid;
assign main_sdram_bankmachine1_pipe_valid_source_ready = main_sdram_bankmachine1_source_source_ready;
assign main_sdram_bankmachine1_source_source_first = main_sdram_bankmachine1_pipe_valid_source_first;
assign main_sdram_bankmachine1_source_source_last = main_sdram_bankmachine1_pipe_valid_source_last;
assign main_sdram_bankmachine1_source_source_payload_we = main_sdram_bankmachine1_pipe_valid_source_payload_we;
assign main_sdram_bankmachine1_source_source_payload_addr = main_sdram_bankmachine1_pipe_valid_source_payload_addr;
always @(*) begin
    builder_basesoc_litedramcore_bankmachine1_next_state <= 3'd0;
    main_sdram_bankmachine1_cmd_payload_cas <= 1'd0;
    main_sdram_bankmachine1_cmd_payload_is_cmd <= 1'd0;
    main_sdram_bankmachine1_cmd_payload_is_read <= 1'd0;
    main_sdram_bankmachine1_cmd_payload_is_write <= 1'd0;
    main_sdram_bankmachine1_cmd_payload_ras <= 1'd0;
    main_sdram_bankmachine1_cmd_payload_we <= 1'd0;
    main_sdram_bankmachine1_cmd_valid <= 1'd0;
    main_sdram_bankmachine1_refresh_gnt <= 1'd0;
    main_sdram_bankmachine1_req_rdata_valid <= 1'd0;
    main_sdram_bankmachine1_req_wdata_ready <= 1'd0;
    main_sdram_bankmachine1_row_close <= 1'd0;
    main_sdram_bankmachine1_row_col_n_addr_sel <= 1'd0;
    main_sdram_bankmachine1_row_open <= 1'd0;
    builder_basesoc_litedramcore_bankmachine1_next_state <= builder_basesoc_litedramcore_bankmachine1_state;
    case (builder_basesoc_litedramcore_bankmachine1_state)
        1'd1: begin
            if ((main_sdram_bankmachine1_twtpcon_ready & main_sdram_bankmachine1_trascon_ready)) begin
                main_sdram_bankmachine1_cmd_valid <= 1'd1;
                if (main_sdram_bankmachine1_cmd_ready) begin
                    builder_basesoc_litedramcore_bankmachine1_next_state <= 2'd3;
                end
                main_sdram_bankmachine1_cmd_payload_ras <= 1'd1;
                main_sdram_bankmachine1_cmd_payload_we <= 1'd1;
                main_sdram_bankmachine1_cmd_payload_is_cmd <= 1'd1;
            end
            main_sdram_bankmachine1_row_close <= 1'd1;
        end
        2'd2: begin
            if ((main_sdram_bankmachine1_twtpcon_ready & main_sdram_bankmachine1_trascon_ready)) begin
                builder_basesoc_litedramcore_bankmachine1_next_state <= 2'd3;
            end
            main_sdram_bankmachine1_row_close <= 1'd1;
        end
        2'd3: begin
            if (main_sdram_bankmachine1_trccon_ready) begin
                main_sdram_bankmachine1_row_col_n_addr_sel <= 1'd1;
                main_sdram_bankmachine1_row_open <= 1'd1;
                main_sdram_bankmachine1_cmd_valid <= 1'd1;
                main_sdram_bankmachine1_cmd_payload_is_cmd <= 1'd1;
                if (main_sdram_bankmachine1_cmd_ready) begin
                    builder_basesoc_litedramcore_bankmachine1_next_state <= 1'd0;
                end
                main_sdram_bankmachine1_cmd_payload_ras <= 1'd1;
            end
        end
        3'd4: begin
            if (main_sdram_bankmachine1_twtpcon_ready) begin
                main_sdram_bankmachine1_refresh_gnt <= 1'd1;
            end
            main_sdram_bankmachine1_row_close <= 1'd1;
            main_sdram_bankmachine1_cmd_payload_is_cmd <= 1'd1;
            if ((~main_sdram_bankmachine1_refresh_req)) begin
                builder_basesoc_litedramcore_bankmachine1_next_state <= 1'd0;
            end
        end
        default: begin
            if (main_sdram_bankmachine1_refresh_req) begin
                builder_basesoc_litedramcore_bankmachine1_next_state <= 3'd4;
            end else begin
                if (main_sdram_bankmachine1_source_source_valid) begin
                    if (main_sdram_bankmachine1_row_opened) begin
                        if (main_sdram_bankmachine1_row_hit) begin
                            main_sdram_bankmachine1_cmd_valid <= 1'd1;
                            if (main_sdram_bankmachine1_source_source_payload_we) begin
                                main_sdram_bankmachine1_req_wdata_ready <= main_sdram_bankmachine1_cmd_ready;
                                main_sdram_bankmachine1_cmd_payload_is_write <= 1'd1;
                                main_sdram_bankmachine1_cmd_payload_we <= 1'd1;
                            end else begin
                                main_sdram_bankmachine1_req_rdata_valid <= main_sdram_bankmachine1_cmd_ready;
                                main_sdram_bankmachine1_cmd_payload_is_read <= 1'd1;
                            end
                            main_sdram_bankmachine1_cmd_payload_cas <= 1'd1;
                            if ((main_sdram_bankmachine1_cmd_ready & main_sdram_bankmachine1_auto_precharge)) begin
                                builder_basesoc_litedramcore_bankmachine1_next_state <= 2'd2;
                            end
                        end else begin
                            builder_basesoc_litedramcore_bankmachine1_next_state <= 1'd1;
                        end
                    end else begin
                        builder_basesoc_litedramcore_bankmachine1_next_state <= 2'd3;
                    end
                end
            end
        end
    endcase
end
assign main_sdram_bankmachine2_sink_valid = main_sdram_bankmachine2_req_valid;
assign main_sdram_bankmachine2_req_ready = main_sdram_bankmachine2_sink_ready;
assign main_sdram_bankmachine2_sink_payload_we = main_sdram_bankmachine2_req_we;
assign main_sdram_bankmachine2_sink_payload_addr = main_sdram_bankmachine2_req_addr;
assign main_sdram_bankmachine2_sink_sink_valid = main_sdram_bankmachine2_source_valid;
assign main_sdram_bankmachine2_source_ready = main_sdram_bankmachine2_sink_sink_ready;
assign main_sdram_bankmachine2_sink_sink_first = main_sdram_bankmachine2_source_first;
assign main_sdram_bankmachine2_sink_sink_last = main_sdram_bankmachine2_source_last;
assign main_sdram_bankmachine2_sink_sink_payload_we = main_sdram_bankmachine2_source_payload_we;
assign main_sdram_bankmachine2_sink_sink_payload_addr = main_sdram_bankmachine2_source_payload_addr;
assign main_sdram_bankmachine2_source_source_ready = (main_sdram_bankmachine2_req_wdata_ready | main_sdram_bankmachine2_req_rdata_valid);
assign main_sdram_bankmachine2_req_lock = (main_sdram_bankmachine2_source_valid | main_sdram_bankmachine2_source_source_valid);
assign main_sdram_bankmachine2_row_hit = (main_sdram_bankmachine2_row == main_sdram_bankmachine2_source_source_payload_addr[21:9]);
assign main_sdram_bankmachine2_cmd_payload_ba = 2'd2;
always @(*) begin
    main_sdram_bankmachine2_cmd_payload_a <= 13'd0;
    if (main_sdram_bankmachine2_row_col_n_addr_sel) begin
        main_sdram_bankmachine2_cmd_payload_a <= main_sdram_bankmachine2_source_source_payload_addr[21:9];
    end else begin
        main_sdram_bankmachine2_cmd_payload_a <= ((main_sdram_bankmachine2_auto_precharge <<< 4'd10) | {main_sdram_bankmachine2_source_source_payload_addr[8:0], {0{1'd0}}});
    end
end
assign main_sdram_bankmachine2_twtpcon_valid = ((main_sdram_bankmachine2_cmd_valid & main_sdram_bankmachine2_cmd_ready) & main_sdram_bankmachine2_cmd_payload_is_write);
assign main_sdram_bankmachine2_trccon_valid = ((main_sdram_bankmachine2_cmd_valid & main_sdram_bankmachine2_cmd_ready) & main_sdram_bankmachine2_row_open);
assign main_sdram_bankmachine2_trascon_valid = ((main_sdram_bankmachine2_cmd_valid & main_sdram_bankmachine2_cmd_ready) & main_sdram_bankmachine2_row_open);
always @(*) begin
    main_sdram_bankmachine2_auto_precharge <= 1'd0;
    if ((main_sdram_bankmachine2_source_valid & main_sdram_bankmachine2_source_source_valid)) begin
        if ((main_sdram_bankmachine2_source_payload_addr[21:9] != main_sdram_bankmachine2_source_source_payload_addr[21:9])) begin
            main_sdram_bankmachine2_auto_precharge <= (main_sdram_bankmachine2_row_close == 1'd0);
        end
    end
end
assign main_sdram_bankmachine2_syncfifo2_din = {main_sdram_bankmachine2_fifo_in_last, main_sdram_bankmachine2_fifo_in_first, main_sdram_bankmachine2_fifo_in_payload_addr, main_sdram_bankmachine2_fifo_in_payload_we};
assign {main_sdram_bankmachine2_fifo_out_last, main_sdram_bankmachine2_fifo_out_first, main_sdram_bankmachine2_fifo_out_payload_addr, main_sdram_bankmachine2_fifo_out_payload_we} = main_sdram_bankmachine2_syncfifo2_dout;
assign main_sdram_bankmachine2_sink_ready = main_sdram_bankmachine2_syncfifo2_writable;
assign main_sdram_bankmachine2_syncfifo2_we = main_sdram_bankmachine2_sink_valid;
assign main_sdram_bankmachine2_fifo_in_first = main_sdram_bankmachine2_sink_first;
assign main_sdram_bankmachine2_fifo_in_last = main_sdram_bankmachine2_sink_last;
assign main_sdram_bankmachine2_fifo_in_payload_we = main_sdram_bankmachine2_sink_payload_we;
assign main_sdram_bankmachine2_fifo_in_payload_addr = main_sdram_bankmachine2_sink_payload_addr;
assign main_sdram_bankmachine2_source_valid = main_sdram_bankmachine2_syncfifo2_readable;
assign main_sdram_bankmachine2_source_first = main_sdram_bankmachine2_fifo_out_first;
assign main_sdram_bankmachine2_source_last = main_sdram_bankmachine2_fifo_out_last;
assign main_sdram_bankmachine2_source_payload_we = main_sdram_bankmachine2_fifo_out_payload_we;
assign main_sdram_bankmachine2_source_payload_addr = main_sdram_bankmachine2_fifo_out_payload_addr;
assign main_sdram_bankmachine2_syncfifo2_re = main_sdram_bankmachine2_source_ready;
always @(*) begin
    main_sdram_bankmachine2_wrport_adr <= 3'd0;
    if (main_sdram_bankmachine2_replace) begin
        main_sdram_bankmachine2_wrport_adr <= (main_sdram_bankmachine2_produce - 1'd1);
    end else begin
        main_sdram_bankmachine2_wrport_adr <= main_sdram_bankmachine2_produce;
    end
end
assign main_sdram_bankmachine2_wrport_dat_w = main_sdram_bankmachine2_syncfifo2_din;
assign main_sdram_bankmachine2_wrport_we = (main_sdram_bankmachine2_syncfifo2_we & (main_sdram_bankmachine2_syncfifo2_writable | main_sdram_bankmachine2_replace));
assign main_sdram_bankmachine2_do_read = (main_sdram_bankmachine2_syncfifo2_readable & main_sdram_bankmachine2_syncfifo2_re);
assign main_sdram_bankmachine2_rdport_adr = main_sdram_bankmachine2_consume;
assign main_sdram_bankmachine2_syncfifo2_dout = main_sdram_bankmachine2_rdport_dat_r;
assign main_sdram_bankmachine2_syncfifo2_writable = (main_sdram_bankmachine2_level != 4'd8);
assign main_sdram_bankmachine2_syncfifo2_readable = (main_sdram_bankmachine2_level != 1'd0);
assign main_sdram_bankmachine2_pipe_valid_sink_ready = ((~main_sdram_bankmachine2_pipe_valid_source_valid) | main_sdram_bankmachine2_pipe_valid_source_ready);
assign main_sdram_bankmachine2_pipe_valid_sink_valid = main_sdram_bankmachine2_sink_sink_valid;
assign main_sdram_bankmachine2_sink_sink_ready = main_sdram_bankmachine2_pipe_valid_sink_ready;
assign main_sdram_bankmachine2_pipe_valid_sink_first = main_sdram_bankmachine2_sink_sink_first;
assign main_sdram_bankmachine2_pipe_valid_sink_last = main_sdram_bankmachine2_sink_sink_last;
assign main_sdram_bankmachine2_pipe_valid_sink_payload_we = main_sdram_bankmachine2_sink_sink_payload_we;
assign main_sdram_bankmachine2_pipe_valid_sink_payload_addr = main_sdram_bankmachine2_sink_sink_payload_addr;
assign main_sdram_bankmachine2_source_source_valid = main_sdram_bankmachine2_pipe_valid_source_valid;
assign main_sdram_bankmachine2_pipe_valid_source_ready = main_sdram_bankmachine2_source_source_ready;
assign main_sdram_bankmachine2_source_source_first = main_sdram_bankmachine2_pipe_valid_source_first;
assign main_sdram_bankmachine2_source_source_last = main_sdram_bankmachine2_pipe_valid_source_last;
assign main_sdram_bankmachine2_source_source_payload_we = main_sdram_bankmachine2_pipe_valid_source_payload_we;
assign main_sdram_bankmachine2_source_source_payload_addr = main_sdram_bankmachine2_pipe_valid_source_payload_addr;
always @(*) begin
    builder_basesoc_litedramcore_bankmachine2_next_state <= 3'd0;
    main_sdram_bankmachine2_cmd_payload_cas <= 1'd0;
    main_sdram_bankmachine2_cmd_payload_is_cmd <= 1'd0;
    main_sdram_bankmachine2_cmd_payload_is_read <= 1'd0;
    main_sdram_bankmachine2_cmd_payload_is_write <= 1'd0;
    main_sdram_bankmachine2_cmd_payload_ras <= 1'd0;
    main_sdram_bankmachine2_cmd_payload_we <= 1'd0;
    main_sdram_bankmachine2_cmd_valid <= 1'd0;
    main_sdram_bankmachine2_refresh_gnt <= 1'd0;
    main_sdram_bankmachine2_req_rdata_valid <= 1'd0;
    main_sdram_bankmachine2_req_wdata_ready <= 1'd0;
    main_sdram_bankmachine2_row_close <= 1'd0;
    main_sdram_bankmachine2_row_col_n_addr_sel <= 1'd0;
    main_sdram_bankmachine2_row_open <= 1'd0;
    builder_basesoc_litedramcore_bankmachine2_next_state <= builder_basesoc_litedramcore_bankmachine2_state;
    case (builder_basesoc_litedramcore_bankmachine2_state)
        1'd1: begin
            if ((main_sdram_bankmachine2_twtpcon_ready & main_sdram_bankmachine2_trascon_ready)) begin
                main_sdram_bankmachine2_cmd_valid <= 1'd1;
                if (main_sdram_bankmachine2_cmd_ready) begin
                    builder_basesoc_litedramcore_bankmachine2_next_state <= 2'd3;
                end
                main_sdram_bankmachine2_cmd_payload_ras <= 1'd1;
                main_sdram_bankmachine2_cmd_payload_we <= 1'd1;
                main_sdram_bankmachine2_cmd_payload_is_cmd <= 1'd1;
            end
            main_sdram_bankmachine2_row_close <= 1'd1;
        end
        2'd2: begin
            if ((main_sdram_bankmachine2_twtpcon_ready & main_sdram_bankmachine2_trascon_ready)) begin
                builder_basesoc_litedramcore_bankmachine2_next_state <= 2'd3;
            end
            main_sdram_bankmachine2_row_close <= 1'd1;
        end
        2'd3: begin
            if (main_sdram_bankmachine2_trccon_ready) begin
                main_sdram_bankmachine2_row_col_n_addr_sel <= 1'd1;
                main_sdram_bankmachine2_row_open <= 1'd1;
                main_sdram_bankmachine2_cmd_valid <= 1'd1;
                main_sdram_bankmachine2_cmd_payload_is_cmd <= 1'd1;
                if (main_sdram_bankmachine2_cmd_ready) begin
                    builder_basesoc_litedramcore_bankmachine2_next_state <= 1'd0;
                end
                main_sdram_bankmachine2_cmd_payload_ras <= 1'd1;
            end
        end
        3'd4: begin
            if (main_sdram_bankmachine2_twtpcon_ready) begin
                main_sdram_bankmachine2_refresh_gnt <= 1'd1;
            end
            main_sdram_bankmachine2_row_close <= 1'd1;
            main_sdram_bankmachine2_cmd_payload_is_cmd <= 1'd1;
            if ((~main_sdram_bankmachine2_refresh_req)) begin
                builder_basesoc_litedramcore_bankmachine2_next_state <= 1'd0;
            end
        end
        default: begin
            if (main_sdram_bankmachine2_refresh_req) begin
                builder_basesoc_litedramcore_bankmachine2_next_state <= 3'd4;
            end else begin
                if (main_sdram_bankmachine2_source_source_valid) begin
                    if (main_sdram_bankmachine2_row_opened) begin
                        if (main_sdram_bankmachine2_row_hit) begin
                            main_sdram_bankmachine2_cmd_valid <= 1'd1;
                            if (main_sdram_bankmachine2_source_source_payload_we) begin
                                main_sdram_bankmachine2_req_wdata_ready <= main_sdram_bankmachine2_cmd_ready;
                                main_sdram_bankmachine2_cmd_payload_is_write <= 1'd1;
                                main_sdram_bankmachine2_cmd_payload_we <= 1'd1;
                            end else begin
                                main_sdram_bankmachine2_req_rdata_valid <= main_sdram_bankmachine2_cmd_ready;
                                main_sdram_bankmachine2_cmd_payload_is_read <= 1'd1;
                            end
                            main_sdram_bankmachine2_cmd_payload_cas <= 1'd1;
                            if ((main_sdram_bankmachine2_cmd_ready & main_sdram_bankmachine2_auto_precharge)) begin
                                builder_basesoc_litedramcore_bankmachine2_next_state <= 2'd2;
                            end
                        end else begin
                            builder_basesoc_litedramcore_bankmachine2_next_state <= 1'd1;
                        end
                    end else begin
                        builder_basesoc_litedramcore_bankmachine2_next_state <= 2'd3;
                    end
                end
            end
        end
    endcase
end
assign main_sdram_bankmachine3_sink_valid = main_sdram_bankmachine3_req_valid;
assign main_sdram_bankmachine3_req_ready = main_sdram_bankmachine3_sink_ready;
assign main_sdram_bankmachine3_sink_payload_we = main_sdram_bankmachine3_req_we;
assign main_sdram_bankmachine3_sink_payload_addr = main_sdram_bankmachine3_req_addr;
assign main_sdram_bankmachine3_sink_sink_valid = main_sdram_bankmachine3_source_valid;
assign main_sdram_bankmachine3_source_ready = main_sdram_bankmachine3_sink_sink_ready;
assign main_sdram_bankmachine3_sink_sink_first = main_sdram_bankmachine3_source_first;
assign main_sdram_bankmachine3_sink_sink_last = main_sdram_bankmachine3_source_last;
assign main_sdram_bankmachine3_sink_sink_payload_we = main_sdram_bankmachine3_source_payload_we;
assign main_sdram_bankmachine3_sink_sink_payload_addr = main_sdram_bankmachine3_source_payload_addr;
assign main_sdram_bankmachine3_source_source_ready = (main_sdram_bankmachine3_req_wdata_ready | main_sdram_bankmachine3_req_rdata_valid);
assign main_sdram_bankmachine3_req_lock = (main_sdram_bankmachine3_source_valid | main_sdram_bankmachine3_source_source_valid);
assign main_sdram_bankmachine3_row_hit = (main_sdram_bankmachine3_row == main_sdram_bankmachine3_source_source_payload_addr[21:9]);
assign main_sdram_bankmachine3_cmd_payload_ba = 2'd3;
always @(*) begin
    main_sdram_bankmachine3_cmd_payload_a <= 13'd0;
    if (main_sdram_bankmachine3_row_col_n_addr_sel) begin
        main_sdram_bankmachine3_cmd_payload_a <= main_sdram_bankmachine3_source_source_payload_addr[21:9];
    end else begin
        main_sdram_bankmachine3_cmd_payload_a <= ((main_sdram_bankmachine3_auto_precharge <<< 4'd10) | {main_sdram_bankmachine3_source_source_payload_addr[8:0], {0{1'd0}}});
    end
end
assign main_sdram_bankmachine3_twtpcon_valid = ((main_sdram_bankmachine3_cmd_valid & main_sdram_bankmachine3_cmd_ready) & main_sdram_bankmachine3_cmd_payload_is_write);
assign main_sdram_bankmachine3_trccon_valid = ((main_sdram_bankmachine3_cmd_valid & main_sdram_bankmachine3_cmd_ready) & main_sdram_bankmachine3_row_open);
assign main_sdram_bankmachine3_trascon_valid = ((main_sdram_bankmachine3_cmd_valid & main_sdram_bankmachine3_cmd_ready) & main_sdram_bankmachine3_row_open);
always @(*) begin
    main_sdram_bankmachine3_auto_precharge <= 1'd0;
    if ((main_sdram_bankmachine3_source_valid & main_sdram_bankmachine3_source_source_valid)) begin
        if ((main_sdram_bankmachine3_source_payload_addr[21:9] != main_sdram_bankmachine3_source_source_payload_addr[21:9])) begin
            main_sdram_bankmachine3_auto_precharge <= (main_sdram_bankmachine3_row_close == 1'd0);
        end
    end
end
assign main_sdram_bankmachine3_syncfifo3_din = {main_sdram_bankmachine3_fifo_in_last, main_sdram_bankmachine3_fifo_in_first, main_sdram_bankmachine3_fifo_in_payload_addr, main_sdram_bankmachine3_fifo_in_payload_we};
assign {main_sdram_bankmachine3_fifo_out_last, main_sdram_bankmachine3_fifo_out_first, main_sdram_bankmachine3_fifo_out_payload_addr, main_sdram_bankmachine3_fifo_out_payload_we} = main_sdram_bankmachine3_syncfifo3_dout;
assign main_sdram_bankmachine3_sink_ready = main_sdram_bankmachine3_syncfifo3_writable;
assign main_sdram_bankmachine3_syncfifo3_we = main_sdram_bankmachine3_sink_valid;
assign main_sdram_bankmachine3_fifo_in_first = main_sdram_bankmachine3_sink_first;
assign main_sdram_bankmachine3_fifo_in_last = main_sdram_bankmachine3_sink_last;
assign main_sdram_bankmachine3_fifo_in_payload_we = main_sdram_bankmachine3_sink_payload_we;
assign main_sdram_bankmachine3_fifo_in_payload_addr = main_sdram_bankmachine3_sink_payload_addr;
assign main_sdram_bankmachine3_source_valid = main_sdram_bankmachine3_syncfifo3_readable;
assign main_sdram_bankmachine3_source_first = main_sdram_bankmachine3_fifo_out_first;
assign main_sdram_bankmachine3_source_last = main_sdram_bankmachine3_fifo_out_last;
assign main_sdram_bankmachine3_source_payload_we = main_sdram_bankmachine3_fifo_out_payload_we;
assign main_sdram_bankmachine3_source_payload_addr = main_sdram_bankmachine3_fifo_out_payload_addr;
assign main_sdram_bankmachine3_syncfifo3_re = main_sdram_bankmachine3_source_ready;
always @(*) begin
    main_sdram_bankmachine3_wrport_adr <= 3'd0;
    if (main_sdram_bankmachine3_replace) begin
        main_sdram_bankmachine3_wrport_adr <= (main_sdram_bankmachine3_produce - 1'd1);
    end else begin
        main_sdram_bankmachine3_wrport_adr <= main_sdram_bankmachine3_produce;
    end
end
assign main_sdram_bankmachine3_wrport_dat_w = main_sdram_bankmachine3_syncfifo3_din;
assign main_sdram_bankmachine3_wrport_we = (main_sdram_bankmachine3_syncfifo3_we & (main_sdram_bankmachine3_syncfifo3_writable | main_sdram_bankmachine3_replace));
assign main_sdram_bankmachine3_do_read = (main_sdram_bankmachine3_syncfifo3_readable & main_sdram_bankmachine3_syncfifo3_re);
assign main_sdram_bankmachine3_rdport_adr = main_sdram_bankmachine3_consume;
assign main_sdram_bankmachine3_syncfifo3_dout = main_sdram_bankmachine3_rdport_dat_r;
assign main_sdram_bankmachine3_syncfifo3_writable = (main_sdram_bankmachine3_level != 4'd8);
assign main_sdram_bankmachine3_syncfifo3_readable = (main_sdram_bankmachine3_level != 1'd0);
assign main_sdram_bankmachine3_pipe_valid_sink_ready = ((~main_sdram_bankmachine3_pipe_valid_source_valid) | main_sdram_bankmachine3_pipe_valid_source_ready);
assign main_sdram_bankmachine3_pipe_valid_sink_valid = main_sdram_bankmachine3_sink_sink_valid;
assign main_sdram_bankmachine3_sink_sink_ready = main_sdram_bankmachine3_pipe_valid_sink_ready;
assign main_sdram_bankmachine3_pipe_valid_sink_first = main_sdram_bankmachine3_sink_sink_first;
assign main_sdram_bankmachine3_pipe_valid_sink_last = main_sdram_bankmachine3_sink_sink_last;
assign main_sdram_bankmachine3_pipe_valid_sink_payload_we = main_sdram_bankmachine3_sink_sink_payload_we;
assign main_sdram_bankmachine3_pipe_valid_sink_payload_addr = main_sdram_bankmachine3_sink_sink_payload_addr;
assign main_sdram_bankmachine3_source_source_valid = main_sdram_bankmachine3_pipe_valid_source_valid;
assign main_sdram_bankmachine3_pipe_valid_source_ready = main_sdram_bankmachine3_source_source_ready;
assign main_sdram_bankmachine3_source_source_first = main_sdram_bankmachine3_pipe_valid_source_first;
assign main_sdram_bankmachine3_source_source_last = main_sdram_bankmachine3_pipe_valid_source_last;
assign main_sdram_bankmachine3_source_source_payload_we = main_sdram_bankmachine3_pipe_valid_source_payload_we;
assign main_sdram_bankmachine3_source_source_payload_addr = main_sdram_bankmachine3_pipe_valid_source_payload_addr;
always @(*) begin
    builder_basesoc_litedramcore_bankmachine3_next_state <= 3'd0;
    main_sdram_bankmachine3_cmd_payload_cas <= 1'd0;
    main_sdram_bankmachine3_cmd_payload_is_cmd <= 1'd0;
    main_sdram_bankmachine3_cmd_payload_is_read <= 1'd0;
    main_sdram_bankmachine3_cmd_payload_is_write <= 1'd0;
    main_sdram_bankmachine3_cmd_payload_ras <= 1'd0;
    main_sdram_bankmachine3_cmd_payload_we <= 1'd0;
    main_sdram_bankmachine3_cmd_valid <= 1'd0;
    main_sdram_bankmachine3_refresh_gnt <= 1'd0;
    main_sdram_bankmachine3_req_rdata_valid <= 1'd0;
    main_sdram_bankmachine3_req_wdata_ready <= 1'd0;
    main_sdram_bankmachine3_row_close <= 1'd0;
    main_sdram_bankmachine3_row_col_n_addr_sel <= 1'd0;
    main_sdram_bankmachine3_row_open <= 1'd0;
    builder_basesoc_litedramcore_bankmachine3_next_state <= builder_basesoc_litedramcore_bankmachine3_state;
    case (builder_basesoc_litedramcore_bankmachine3_state)
        1'd1: begin
            if ((main_sdram_bankmachine3_twtpcon_ready & main_sdram_bankmachine3_trascon_ready)) begin
                main_sdram_bankmachine3_cmd_valid <= 1'd1;
                if (main_sdram_bankmachine3_cmd_ready) begin
                    builder_basesoc_litedramcore_bankmachine3_next_state <= 2'd3;
                end
                main_sdram_bankmachine3_cmd_payload_ras <= 1'd1;
                main_sdram_bankmachine3_cmd_payload_we <= 1'd1;
                main_sdram_bankmachine3_cmd_payload_is_cmd <= 1'd1;
            end
            main_sdram_bankmachine3_row_close <= 1'd1;
        end
        2'd2: begin
            if ((main_sdram_bankmachine3_twtpcon_ready & main_sdram_bankmachine3_trascon_ready)) begin
                builder_basesoc_litedramcore_bankmachine3_next_state <= 2'd3;
            end
            main_sdram_bankmachine3_row_close <= 1'd1;
        end
        2'd3: begin
            if (main_sdram_bankmachine3_trccon_ready) begin
                main_sdram_bankmachine3_row_col_n_addr_sel <= 1'd1;
                main_sdram_bankmachine3_row_open <= 1'd1;
                main_sdram_bankmachine3_cmd_valid <= 1'd1;
                main_sdram_bankmachine3_cmd_payload_is_cmd <= 1'd1;
                if (main_sdram_bankmachine3_cmd_ready) begin
                    builder_basesoc_litedramcore_bankmachine3_next_state <= 1'd0;
                end
                main_sdram_bankmachine3_cmd_payload_ras <= 1'd1;
            end
        end
        3'd4: begin
            if (main_sdram_bankmachine3_twtpcon_ready) begin
                main_sdram_bankmachine3_refresh_gnt <= 1'd1;
            end
            main_sdram_bankmachine3_row_close <= 1'd1;
            main_sdram_bankmachine3_cmd_payload_is_cmd <= 1'd1;
            if ((~main_sdram_bankmachine3_refresh_req)) begin
                builder_basesoc_litedramcore_bankmachine3_next_state <= 1'd0;
            end
        end
        default: begin
            if (main_sdram_bankmachine3_refresh_req) begin
                builder_basesoc_litedramcore_bankmachine3_next_state <= 3'd4;
            end else begin
                if (main_sdram_bankmachine3_source_source_valid) begin
                    if (main_sdram_bankmachine3_row_opened) begin
                        if (main_sdram_bankmachine3_row_hit) begin
                            main_sdram_bankmachine3_cmd_valid <= 1'd1;
                            if (main_sdram_bankmachine3_source_source_payload_we) begin
                                main_sdram_bankmachine3_req_wdata_ready <= main_sdram_bankmachine3_cmd_ready;
                                main_sdram_bankmachine3_cmd_payload_is_write <= 1'd1;
                                main_sdram_bankmachine3_cmd_payload_we <= 1'd1;
                            end else begin
                                main_sdram_bankmachine3_req_rdata_valid <= main_sdram_bankmachine3_cmd_ready;
                                main_sdram_bankmachine3_cmd_payload_is_read <= 1'd1;
                            end
                            main_sdram_bankmachine3_cmd_payload_cas <= 1'd1;
                            if ((main_sdram_bankmachine3_cmd_ready & main_sdram_bankmachine3_auto_precharge)) begin
                                builder_basesoc_litedramcore_bankmachine3_next_state <= 2'd2;
                            end
                        end else begin
                            builder_basesoc_litedramcore_bankmachine3_next_state <= 1'd1;
                        end
                    end else begin
                        builder_basesoc_litedramcore_bankmachine3_next_state <= 2'd3;
                    end
                end
            end
        end
    endcase
end
assign main_sdram_choose_req_want_cmds = 1'd1;
assign main_sdram_trrdcon_valid = ((main_sdram_choose_req_cmd_valid & main_sdram_choose_req_cmd_ready) & ((main_sdram_choose_req_cmd_payload_ras & (~main_sdram_choose_req_cmd_payload_cas)) & (~main_sdram_choose_req_cmd_payload_we)));
assign main_sdram_tfawcon_valid = ((main_sdram_choose_req_cmd_valid & main_sdram_choose_req_cmd_ready) & ((main_sdram_choose_req_cmd_payload_ras & (~main_sdram_choose_req_cmd_payload_cas)) & (~main_sdram_choose_req_cmd_payload_we)));
assign main_sdram_ras_allowed = (main_sdram_trrdcon_ready & main_sdram_tfawcon_ready);
assign main_sdram_tccdcon_valid = ((main_sdram_choose_req_cmd_valid & main_sdram_choose_req_cmd_ready) & (main_sdram_choose_req_cmd_payload_is_write | main_sdram_choose_req_cmd_payload_is_read));
assign main_sdram_cas_allowed = main_sdram_tccdcon_ready;
assign main_sdram_twtrcon_valid = ((main_sdram_choose_req_cmd_valid & main_sdram_choose_req_cmd_ready) & main_sdram_choose_req_cmd_payload_is_write);
assign main_sdram_read_available = ((((main_sdram_bankmachine0_cmd_valid & main_sdram_bankmachine0_cmd_payload_is_read) | (main_sdram_bankmachine1_cmd_valid & main_sdram_bankmachine1_cmd_payload_is_read)) | (main_sdram_bankmachine2_cmd_valid & main_sdram_bankmachine2_cmd_payload_is_read)) | (main_sdram_bankmachine3_cmd_valid & main_sdram_bankmachine3_cmd_payload_is_read));
assign main_sdram_write_available = ((((main_sdram_bankmachine0_cmd_valid & main_sdram_bankmachine0_cmd_payload_is_write) | (main_sdram_bankmachine1_cmd_valid & main_sdram_bankmachine1_cmd_payload_is_write)) | (main_sdram_bankmachine2_cmd_valid & main_sdram_bankmachine2_cmd_payload_is_write)) | (main_sdram_bankmachine3_cmd_valid & main_sdram_bankmachine3_cmd_payload_is_write));
assign main_sdram_max_time0 = (main_sdram_time0 == 1'd0);
assign main_sdram_max_time1 = (main_sdram_time1 == 1'd0);
assign main_sdram_bankmachine0_refresh_req = main_sdram_cmd_valid;
assign main_sdram_bankmachine1_refresh_req = main_sdram_cmd_valid;
assign main_sdram_bankmachine2_refresh_req = main_sdram_cmd_valid;
assign main_sdram_bankmachine3_refresh_req = main_sdram_cmd_valid;
assign main_sdram_go_to_refresh = (((main_sdram_bankmachine0_refresh_gnt & main_sdram_bankmachine1_refresh_gnt) & main_sdram_bankmachine2_refresh_gnt) & main_sdram_bankmachine3_refresh_gnt);
assign main_sdram_interface_rdata = {main_sdram_dfi_p0_rddata};
assign {main_sdram_dfi_p0_wrdata} = main_sdram_interface_wdata;
assign {main_sdram_dfi_p0_wrdata_mask} = (~main_sdram_interface_wdata_we);
always @(*) begin
    main_sdram_choose_cmd_valids <= 4'd0;
    main_sdram_choose_cmd_valids[0] <= (main_sdram_bankmachine0_cmd_valid & (((main_sdram_bankmachine0_cmd_payload_is_cmd & main_sdram_choose_cmd_want_cmds) & ((~((main_sdram_bankmachine0_cmd_payload_ras & (~main_sdram_bankmachine0_cmd_payload_cas)) & (~main_sdram_bankmachine0_cmd_payload_we))) | main_sdram_choose_cmd_want_activates)) | ((main_sdram_bankmachine0_cmd_payload_is_read == main_sdram_choose_cmd_want_reads) & (main_sdram_bankmachine0_cmd_payload_is_write == main_sdram_choose_cmd_want_writes))));
    main_sdram_choose_cmd_valids[1] <= (main_sdram_bankmachine1_cmd_valid & (((main_sdram_bankmachine1_cmd_payload_is_cmd & main_sdram_choose_cmd_want_cmds) & ((~((main_sdram_bankmachine1_cmd_payload_ras & (~main_sdram_bankmachine1_cmd_payload_cas)) & (~main_sdram_bankmachine1_cmd_payload_we))) | main_sdram_choose_cmd_want_activates)) | ((main_sdram_bankmachine1_cmd_payload_is_read == main_sdram_choose_cmd_want_reads) & (main_sdram_bankmachine1_cmd_payload_is_write == main_sdram_choose_cmd_want_writes))));
    main_sdram_choose_cmd_valids[2] <= (main_sdram_bankmachine2_cmd_valid & (((main_sdram_bankmachine2_cmd_payload_is_cmd & main_sdram_choose_cmd_want_cmds) & ((~((main_sdram_bankmachine2_cmd_payload_ras & (~main_sdram_bankmachine2_cmd_payload_cas)) & (~main_sdram_bankmachine2_cmd_payload_we))) | main_sdram_choose_cmd_want_activates)) | ((main_sdram_bankmachine2_cmd_payload_is_read == main_sdram_choose_cmd_want_reads) & (main_sdram_bankmachine2_cmd_payload_is_write == main_sdram_choose_cmd_want_writes))));
    main_sdram_choose_cmd_valids[3] <= (main_sdram_bankmachine3_cmd_valid & (((main_sdram_bankmachine3_cmd_payload_is_cmd & main_sdram_choose_cmd_want_cmds) & ((~((main_sdram_bankmachine3_cmd_payload_ras & (~main_sdram_bankmachine3_cmd_payload_cas)) & (~main_sdram_bankmachine3_cmd_payload_we))) | main_sdram_choose_cmd_want_activates)) | ((main_sdram_bankmachine3_cmd_payload_is_read == main_sdram_choose_cmd_want_reads) & (main_sdram_bankmachine3_cmd_payload_is_write == main_sdram_choose_cmd_want_writes))));
end
assign main_sdram_choose_cmd_request = main_sdram_choose_cmd_valids;
assign main_sdram_choose_cmd_cmd_valid = builder_comb_rhs_self8;
assign main_sdram_choose_cmd_cmd_payload_a = builder_comb_rhs_self9;
assign main_sdram_choose_cmd_cmd_payload_ba = builder_comb_rhs_self10;
assign main_sdram_choose_cmd_cmd_payload_is_read = builder_comb_rhs_self11;
assign main_sdram_choose_cmd_cmd_payload_is_write = builder_comb_rhs_self12;
assign main_sdram_choose_cmd_cmd_payload_is_cmd = builder_comb_rhs_self13;
always @(*) begin
    main_sdram_choose_cmd_cmd_payload_cas <= 1'd0;
    if (main_sdram_choose_cmd_cmd_valid) begin
        main_sdram_choose_cmd_cmd_payload_cas <= builder_comb_t_self0;
    end
end
always @(*) begin
    main_sdram_choose_cmd_cmd_payload_ras <= 1'd0;
    if (main_sdram_choose_cmd_cmd_valid) begin
        main_sdram_choose_cmd_cmd_payload_ras <= builder_comb_t_self1;
    end
end
always @(*) begin
    main_sdram_choose_cmd_cmd_payload_we <= 1'd0;
    if (main_sdram_choose_cmd_cmd_valid) begin
        main_sdram_choose_cmd_cmd_payload_we <= builder_comb_t_self2;
    end
end
assign main_sdram_choose_cmd_ce = (main_sdram_choose_cmd_cmd_ready | (~main_sdram_choose_cmd_cmd_valid));
always @(*) begin
    main_sdram_choose_req_valids <= 4'd0;
    main_sdram_choose_req_valids[0] <= (main_sdram_bankmachine0_cmd_valid & (((main_sdram_bankmachine0_cmd_payload_is_cmd & main_sdram_choose_req_want_cmds) & ((~((main_sdram_bankmachine0_cmd_payload_ras & (~main_sdram_bankmachine0_cmd_payload_cas)) & (~main_sdram_bankmachine0_cmd_payload_we))) | main_sdram_choose_req_want_activates)) | ((main_sdram_bankmachine0_cmd_payload_is_read == main_sdram_choose_req_want_reads) & (main_sdram_bankmachine0_cmd_payload_is_write == main_sdram_choose_req_want_writes))));
    main_sdram_choose_req_valids[1] <= (main_sdram_bankmachine1_cmd_valid & (((main_sdram_bankmachine1_cmd_payload_is_cmd & main_sdram_choose_req_want_cmds) & ((~((main_sdram_bankmachine1_cmd_payload_ras & (~main_sdram_bankmachine1_cmd_payload_cas)) & (~main_sdram_bankmachine1_cmd_payload_we))) | main_sdram_choose_req_want_activates)) | ((main_sdram_bankmachine1_cmd_payload_is_read == main_sdram_choose_req_want_reads) & (main_sdram_bankmachine1_cmd_payload_is_write == main_sdram_choose_req_want_writes))));
    main_sdram_choose_req_valids[2] <= (main_sdram_bankmachine2_cmd_valid & (((main_sdram_bankmachine2_cmd_payload_is_cmd & main_sdram_choose_req_want_cmds) & ((~((main_sdram_bankmachine2_cmd_payload_ras & (~main_sdram_bankmachine2_cmd_payload_cas)) & (~main_sdram_bankmachine2_cmd_payload_we))) | main_sdram_choose_req_want_activates)) | ((main_sdram_bankmachine2_cmd_payload_is_read == main_sdram_choose_req_want_reads) & (main_sdram_bankmachine2_cmd_payload_is_write == main_sdram_choose_req_want_writes))));
    main_sdram_choose_req_valids[3] <= (main_sdram_bankmachine3_cmd_valid & (((main_sdram_bankmachine3_cmd_payload_is_cmd & main_sdram_choose_req_want_cmds) & ((~((main_sdram_bankmachine3_cmd_payload_ras & (~main_sdram_bankmachine3_cmd_payload_cas)) & (~main_sdram_bankmachine3_cmd_payload_we))) | main_sdram_choose_req_want_activates)) | ((main_sdram_bankmachine3_cmd_payload_is_read == main_sdram_choose_req_want_reads) & (main_sdram_bankmachine3_cmd_payload_is_write == main_sdram_choose_req_want_writes))));
end
assign main_sdram_choose_req_request = main_sdram_choose_req_valids;
assign main_sdram_choose_req_cmd_valid = builder_comb_rhs_self14;
assign main_sdram_choose_req_cmd_payload_a = builder_comb_rhs_self15;
assign main_sdram_choose_req_cmd_payload_ba = builder_comb_rhs_self16;
assign main_sdram_choose_req_cmd_payload_is_read = builder_comb_rhs_self17;
assign main_sdram_choose_req_cmd_payload_is_write = builder_comb_rhs_self18;
assign main_sdram_choose_req_cmd_payload_is_cmd = builder_comb_rhs_self19;
always @(*) begin
    main_sdram_choose_req_cmd_payload_cas <= 1'd0;
    if (main_sdram_choose_req_cmd_valid) begin
        main_sdram_choose_req_cmd_payload_cas <= builder_comb_t_self3;
    end
end
always @(*) begin
    main_sdram_choose_req_cmd_payload_ras <= 1'd0;
    if (main_sdram_choose_req_cmd_valid) begin
        main_sdram_choose_req_cmd_payload_ras <= builder_comb_t_self4;
    end
end
always @(*) begin
    main_sdram_choose_req_cmd_payload_we <= 1'd0;
    if (main_sdram_choose_req_cmd_valid) begin
        main_sdram_choose_req_cmd_payload_we <= builder_comb_t_self5;
    end
end
always @(*) begin
    main_sdram_bankmachine0_cmd_ready <= 1'd0;
    if (((main_sdram_choose_cmd_cmd_valid & main_sdram_choose_cmd_cmd_ready) & (main_sdram_choose_cmd_grant == 1'd0))) begin
        main_sdram_bankmachine0_cmd_ready <= 1'd1;
    end
    if (((main_sdram_choose_req_cmd_valid & main_sdram_choose_req_cmd_ready) & (main_sdram_choose_req_grant == 1'd0))) begin
        main_sdram_bankmachine0_cmd_ready <= 1'd1;
    end
end
always @(*) begin
    main_sdram_bankmachine1_cmd_ready <= 1'd0;
    if (((main_sdram_choose_cmd_cmd_valid & main_sdram_choose_cmd_cmd_ready) & (main_sdram_choose_cmd_grant == 1'd1))) begin
        main_sdram_bankmachine1_cmd_ready <= 1'd1;
    end
    if (((main_sdram_choose_req_cmd_valid & main_sdram_choose_req_cmd_ready) & (main_sdram_choose_req_grant == 1'd1))) begin
        main_sdram_bankmachine1_cmd_ready <= 1'd1;
    end
end
always @(*) begin
    main_sdram_bankmachine2_cmd_ready <= 1'd0;
    if (((main_sdram_choose_cmd_cmd_valid & main_sdram_choose_cmd_cmd_ready) & (main_sdram_choose_cmd_grant == 2'd2))) begin
        main_sdram_bankmachine2_cmd_ready <= 1'd1;
    end
    if (((main_sdram_choose_req_cmd_valid & main_sdram_choose_req_cmd_ready) & (main_sdram_choose_req_grant == 2'd2))) begin
        main_sdram_bankmachine2_cmd_ready <= 1'd1;
    end
end
always @(*) begin
    main_sdram_bankmachine3_cmd_ready <= 1'd0;
    if (((main_sdram_choose_cmd_cmd_valid & main_sdram_choose_cmd_cmd_ready) & (main_sdram_choose_cmd_grant == 2'd3))) begin
        main_sdram_bankmachine3_cmd_ready <= 1'd1;
    end
    if (((main_sdram_choose_req_cmd_valid & main_sdram_choose_req_cmd_ready) & (main_sdram_choose_req_grant == 2'd3))) begin
        main_sdram_bankmachine3_cmd_ready <= 1'd1;
    end
end
assign main_sdram_choose_req_ce = (main_sdram_choose_req_cmd_ready | (~main_sdram_choose_req_cmd_valid));
assign main_sdram_dfi_p0_reset_n = 1'd1;
assign main_sdram_dfi_p0_cke = {1{main_sdram_steerer0}};
assign main_sdram_dfi_p0_odt = {1{main_sdram_steerer1}};
always @(*) begin
    builder_basesoc_litedramcore_multiplexer_next_state <= 3'd0;
    main_sdram_choose_req_cmd_ready <= 1'd0;
    main_sdram_choose_req_want_activates <= 1'd0;
    main_sdram_choose_req_want_reads <= 1'd0;
    main_sdram_choose_req_want_writes <= 1'd0;
    main_sdram_cmd_ready <= 1'd0;
    main_sdram_en0 <= 1'd0;
    main_sdram_en1 <= 1'd0;
    main_sdram_steerer_sel <= 2'd0;
    main_sdram_choose_req_want_activates <= main_sdram_ras_allowed;
    builder_basesoc_litedramcore_multiplexer_next_state <= builder_basesoc_litedramcore_multiplexer_state;
    case (builder_basesoc_litedramcore_multiplexer_state)
        1'd1: begin
            main_sdram_en1 <= 1'd1;
            main_sdram_choose_req_want_writes <= 1'd1;
            if (1'd1) begin
                main_sdram_choose_req_cmd_ready <= (main_sdram_cas_allowed & ((~((main_sdram_choose_req_cmd_payload_ras & (~main_sdram_choose_req_cmd_payload_cas)) & (~main_sdram_choose_req_cmd_payload_we))) | main_sdram_ras_allowed));
            end else begin
                main_sdram_choose_req_want_activates <= main_sdram_ras_allowed;
                main_sdram_choose_req_cmd_ready <= ((~((main_sdram_choose_req_cmd_payload_ras & (~main_sdram_choose_req_cmd_payload_cas)) & (~main_sdram_choose_req_cmd_payload_we))) | main_sdram_ras_allowed);
                main_sdram_choose_req_cmd_ready <= main_sdram_cas_allowed;
            end
            main_sdram_steerer_sel <= 1'd0;
            if (1'd1) begin
                main_sdram_steerer_sel <= 2'd2;
            end
            if (1'd1) begin
                main_sdram_steerer_sel <= 1'd1;
            end
            if (main_sdram_read_available) begin
                if (((~main_sdram_write_available) | main_sdram_max_time1)) begin
                    builder_basesoc_litedramcore_multiplexer_next_state <= 2'd3;
                end
            end
            if (main_sdram_go_to_refresh) begin
                builder_basesoc_litedramcore_multiplexer_next_state <= 2'd2;
            end
        end
        2'd2: begin
            main_sdram_steerer_sel <= 2'd3;
            main_sdram_cmd_ready <= 1'd1;
            if (main_sdram_cmd_last) begin
                builder_basesoc_litedramcore_multiplexer_next_state <= 1'd0;
            end
        end
        2'd3: begin
            if (main_sdram_twtrcon_ready) begin
                builder_basesoc_litedramcore_multiplexer_next_state <= 1'd0;
            end
        end
        3'd4: begin
            builder_basesoc_litedramcore_multiplexer_next_state <= 3'd5;
        end
        3'd5: begin
            builder_basesoc_litedramcore_multiplexer_next_state <= 1'd1;
        end
        default: begin
            main_sdram_en0 <= 1'd1;
            main_sdram_choose_req_want_reads <= 1'd1;
            if (1'd1) begin
                main_sdram_choose_req_cmd_ready <= (main_sdram_cas_allowed & ((~((main_sdram_choose_req_cmd_payload_ras & (~main_sdram_choose_req_cmd_payload_cas)) & (~main_sdram_choose_req_cmd_payload_we))) | main_sdram_ras_allowed));
            end else begin
                main_sdram_choose_req_want_activates <= main_sdram_ras_allowed;
                main_sdram_choose_req_cmd_ready <= ((~((main_sdram_choose_req_cmd_payload_ras & (~main_sdram_choose_req_cmd_payload_cas)) & (~main_sdram_choose_req_cmd_payload_we))) | main_sdram_ras_allowed);
                main_sdram_choose_req_cmd_ready <= main_sdram_cas_allowed;
            end
            main_sdram_steerer_sel <= 1'd0;
            if (1'd1) begin
                main_sdram_steerer_sel <= 2'd2;
            end
            if (1'd1) begin
                main_sdram_steerer_sel <= 1'd1;
            end
            if (main_sdram_write_available) begin
                if (((~main_sdram_read_available) | main_sdram_max_time0)) begin
                    builder_basesoc_litedramcore_multiplexer_next_state <= 3'd4;
                end
            end
            if (main_sdram_go_to_refresh) begin
                builder_basesoc_litedramcore_multiplexer_next_state <= 2'd2;
            end
        end
    endcase
end
assign builder_basesoc_litedramcore_roundrobin0_request = {(((main_port_cmd_payload_addr[10:9] == 1'd0) & (~(((builder_basesoc_litedramcore_locked0 | (main_sdram_interface_bank1_lock & (builder_basesoc_litedramcore_roundrobin1_grant == 1'd0))) | (main_sdram_interface_bank2_lock & (builder_basesoc_litedramcore_roundrobin2_grant == 1'd0))) | (main_sdram_interface_bank3_lock & (builder_basesoc_litedramcore_roundrobin3_grant == 1'd0))))) & main_port_cmd_valid)};
assign builder_basesoc_litedramcore_roundrobin0_ce = ((~main_sdram_interface_bank0_valid) & (~main_sdram_interface_bank0_lock));
assign main_sdram_interface_bank0_addr = builder_comb_rhs_self20;
assign main_sdram_interface_bank0_we = builder_comb_rhs_self21;
assign main_sdram_interface_bank0_valid = builder_comb_rhs_self22;
assign builder_basesoc_litedramcore_roundrobin1_request = {(((main_port_cmd_payload_addr[10:9] == 1'd1) & (~(((builder_basesoc_litedramcore_locked1 | (main_sdram_interface_bank0_lock & (builder_basesoc_litedramcore_roundrobin0_grant == 1'd0))) | (main_sdram_interface_bank2_lock & (builder_basesoc_litedramcore_roundrobin2_grant == 1'd0))) | (main_sdram_interface_bank3_lock & (builder_basesoc_litedramcore_roundrobin3_grant == 1'd0))))) & main_port_cmd_valid)};
assign builder_basesoc_litedramcore_roundrobin1_ce = ((~main_sdram_interface_bank1_valid) & (~main_sdram_interface_bank1_lock));
assign main_sdram_interface_bank1_addr = builder_comb_rhs_self23;
assign main_sdram_interface_bank1_we = builder_comb_rhs_self24;
assign main_sdram_interface_bank1_valid = builder_comb_rhs_self25;
assign builder_basesoc_litedramcore_roundrobin2_request = {(((main_port_cmd_payload_addr[10:9] == 2'd2) & (~(((builder_basesoc_litedramcore_locked2 | (main_sdram_interface_bank0_lock & (builder_basesoc_litedramcore_roundrobin0_grant == 1'd0))) | (main_sdram_interface_bank1_lock & (builder_basesoc_litedramcore_roundrobin1_grant == 1'd0))) | (main_sdram_interface_bank3_lock & (builder_basesoc_litedramcore_roundrobin3_grant == 1'd0))))) & main_port_cmd_valid)};
assign builder_basesoc_litedramcore_roundrobin2_ce = ((~main_sdram_interface_bank2_valid) & (~main_sdram_interface_bank2_lock));
assign main_sdram_interface_bank2_addr = builder_comb_rhs_self26;
assign main_sdram_interface_bank2_we = builder_comb_rhs_self27;
assign main_sdram_interface_bank2_valid = builder_comb_rhs_self28;
assign builder_basesoc_litedramcore_roundrobin3_request = {(((main_port_cmd_payload_addr[10:9] == 2'd3) & (~(((builder_basesoc_litedramcore_locked3 | (main_sdram_interface_bank0_lock & (builder_basesoc_litedramcore_roundrobin0_grant == 1'd0))) | (main_sdram_interface_bank1_lock & (builder_basesoc_litedramcore_roundrobin1_grant == 1'd0))) | (main_sdram_interface_bank2_lock & (builder_basesoc_litedramcore_roundrobin2_grant == 1'd0))))) & main_port_cmd_valid)};
assign builder_basesoc_litedramcore_roundrobin3_ce = ((~main_sdram_interface_bank3_valid) & (~main_sdram_interface_bank3_lock));
assign main_sdram_interface_bank3_addr = builder_comb_rhs_self29;
assign main_sdram_interface_bank3_we = builder_comb_rhs_self30;
assign main_sdram_interface_bank3_valid = builder_comb_rhs_self31;
assign main_port_cmd_ready = ((((1'd0 | (((builder_basesoc_litedramcore_roundrobin0_grant == 1'd0) & ((main_port_cmd_payload_addr[10:9] == 1'd0) & (~(((builder_basesoc_litedramcore_locked0 | (main_sdram_interface_bank1_lock & (builder_basesoc_litedramcore_roundrobin1_grant == 1'd0))) | (main_sdram_interface_bank2_lock & (builder_basesoc_litedramcore_roundrobin2_grant == 1'd0))) | (main_sdram_interface_bank3_lock & (builder_basesoc_litedramcore_roundrobin3_grant == 1'd0)))))) & main_sdram_interface_bank0_ready)) | (((builder_basesoc_litedramcore_roundrobin1_grant == 1'd0) & ((main_port_cmd_payload_addr[10:9] == 1'd1) & (~(((builder_basesoc_litedramcore_locked1 | (main_sdram_interface_bank0_lock & (builder_basesoc_litedramcore_roundrobin0_grant == 1'd0))) | (main_sdram_interface_bank2_lock & (builder_basesoc_litedramcore_roundrobin2_grant == 1'd0))) | (main_sdram_interface_bank3_lock & (builder_basesoc_litedramcore_roundrobin3_grant == 1'd0)))))) & main_sdram_interface_bank1_ready)) | (((builder_basesoc_litedramcore_roundrobin2_grant == 1'd0) & ((main_port_cmd_payload_addr[10:9] == 2'd2) & (~(((builder_basesoc_litedramcore_locked2 | (main_sdram_interface_bank0_lock & (builder_basesoc_litedramcore_roundrobin0_grant == 1'd0))) | (main_sdram_interface_bank1_lock & (builder_basesoc_litedramcore_roundrobin1_grant == 1'd0))) | (main_sdram_interface_bank3_lock & (builder_basesoc_litedramcore_roundrobin3_grant == 1'd0)))))) & main_sdram_interface_bank2_ready)) | (((builder_basesoc_litedramcore_roundrobin3_grant == 1'd0) & ((main_port_cmd_payload_addr[10:9] == 2'd3) & (~(((builder_basesoc_litedramcore_locked3 | (main_sdram_interface_bank0_lock & (builder_basesoc_litedramcore_roundrobin0_grant == 1'd0))) | (main_sdram_interface_bank1_lock & (builder_basesoc_litedramcore_roundrobin1_grant == 1'd0))) | (main_sdram_interface_bank2_lock & (builder_basesoc_litedramcore_roundrobin2_grant == 1'd0)))))) & main_sdram_interface_bank3_ready));
assign main_port_wdata_ready = builder_basesoc_litedramcore_new_master_wdata_ready;
assign main_port_rdata_valid = builder_basesoc_litedramcore_new_master_rdata_valid3;
always @(*) begin
    main_sdram_interface_wdata <= 16'd0;
    main_sdram_interface_wdata_we <= 2'd0;
    case ({builder_basesoc_litedramcore_new_master_wdata_ready})
        1'd1: begin
            main_sdram_interface_wdata <= main_port_wdata_payload_data;
            main_sdram_interface_wdata_we <= main_port_wdata_payload_we;
        end
        default: begin
            main_sdram_interface_wdata <= 1'd0;
            main_sdram_interface_wdata_we <= 1'd0;
        end
    endcase
end
assign main_port_rdata_payload_data = main_sdram_interface_rdata;
assign builder_basesoc_litedramcore_roundrobin0_grant = 1'd0;
assign builder_basesoc_litedramcore_roundrobin1_grant = 1'd0;
assign builder_basesoc_litedramcore_roundrobin2_grant = 1'd0;
assign builder_basesoc_litedramcore_roundrobin3_grant = 1'd0;
assign main_data_port_adr = main_wb_sdram_adr[10:2];
always @(*) begin
    main_data_port_dat_w <= 128'd0;
    main_data_port_we <= 16'd0;
    if (main_write_from_slave) begin
        main_data_port_dat_w <= main_interface_dat_r;
        main_data_port_we <= {16{1'd1}};
    end else begin
        main_data_port_dat_w <= {4{main_wb_sdram_dat_w}};
        if ((((main_wb_sdram_cyc & main_wb_sdram_stb) & main_wb_sdram_we) & main_wb_sdram_ack)) begin
            main_data_port_we <= {({4{(main_wb_sdram_adr[1:0] == 2'd3)}} & main_wb_sdram_sel), ({4{(main_wb_sdram_adr[1:0] == 2'd2)}} & main_wb_sdram_sel), ({4{(main_wb_sdram_adr[1:0] == 1'd1)}} & main_wb_sdram_sel), ({4{(main_wb_sdram_adr[1:0] == 1'd0)}} & main_wb_sdram_sel)};
        end
    end
end
assign main_interface_dat_w = main_data_port_dat_r;
assign main_interface_sel = 16'd65535;
always @(*) begin
    main_wb_sdram_dat_r <= 32'd0;
    case (main_adr_offset_r)
        1'd0: begin
            main_wb_sdram_dat_r <= main_data_port_dat_r[31:0];
        end
        1'd1: begin
            main_wb_sdram_dat_r <= main_data_port_dat_r[63:32];
        end
        2'd2: begin
            main_wb_sdram_dat_r <= main_data_port_dat_r[95:64];
        end
        default: begin
            main_wb_sdram_dat_r <= main_data_port_dat_r[127:96];
        end
    endcase
end
assign {main_tag_do_dirty, main_tag_do_tag} = main_tag_port_dat_r;
assign main_tag_port_dat_w = {main_tag_di_dirty, main_tag_di_tag};
assign main_tag_port_adr = main_wb_sdram_adr[10:2];
assign main_tag_di_tag = main_wb_sdram_adr[29:11];
assign main_interface_adr = {main_tag_do_tag, main_wb_sdram_adr[10:2]};
always @(*) begin
    builder_basesoc_fullmemorywe_next_state <= 2'd0;
    main_interface_cyc <= 1'd0;
    main_interface_stb <= 1'd0;
    main_interface_we <= 1'd0;
    main_tag_di_dirty <= 1'd0;
    main_tag_port_we <= 1'd0;
    main_wb_sdram_ack <= 1'd0;
    main_word_clr <= 1'd0;
    main_word_inc <= 1'd0;
    main_write_from_slave <= 1'd0;
    builder_basesoc_fullmemorywe_next_state <= builder_basesoc_fullmemorywe_state;
    case (builder_basesoc_fullmemorywe_state)
        1'd1: begin
            main_word_clr <= 1'd1;
            if ((main_tag_do_tag == main_wb_sdram_adr[29:11])) begin
                main_wb_sdram_ack <= 1'd1;
                if (main_wb_sdram_we) begin
                    main_tag_di_dirty <= 1'd1;
                    main_tag_port_we <= 1'd1;
                end
                builder_basesoc_fullmemorywe_next_state <= 1'd0;
            end else begin
                if (main_tag_do_dirty) begin
                    builder_basesoc_fullmemorywe_next_state <= 2'd2;
                end else begin
                    main_tag_port_we <= 1'd1;
                    main_word_clr <= 1'd1;
                    builder_basesoc_fullmemorywe_next_state <= 2'd3;
                end
            end
        end
        2'd2: begin
            main_interface_stb <= 1'd1;
            main_interface_cyc <= 1'd1;
            main_interface_we <= 1'd1;
            if (main_interface_ack) begin
                main_word_inc <= 1'd1;
                if (1'd1) begin
                    main_tag_port_we <= 1'd1;
                    main_word_clr <= 1'd1;
                    builder_basesoc_fullmemorywe_next_state <= 2'd3;
                end
            end
        end
        2'd3: begin
            main_interface_stb <= 1'd1;
            main_interface_cyc <= 1'd1;
            main_interface_we <= 1'd0;
            if (main_interface_ack) begin
                main_write_from_slave <= 1'd1;
                main_word_inc <= 1'd1;
                if (1'd1) begin
                    builder_basesoc_fullmemorywe_next_state <= 1'd1;
                end else begin
                    builder_basesoc_fullmemorywe_next_state <= 2'd3;
                end
            end
        end
        default: begin
            if ((main_wb_sdram_cyc & main_wb_sdram_stb)) begin
                builder_basesoc_fullmemorywe_next_state <= 1'd1;
            end
        end
    endcase
end
assign main_wishbone_bridge_cmd_payload_addr = (main_interface_adr - 27'd67108864);
assign main_wishbone_bridge_cmd_payload_we = main_interface_we;
assign main_wishbone_bridge_cmd_last = (~main_interface_we);
assign main_wishbone_bridge_flush = (~main_interface_cyc);
always @(*) begin
    main_wishbone_bridge_wdata_valid <= 1'd0;
    main_wishbone_bridge_wdata_valid <= (main_interface_stb & main_interface_we);
    if (1'd0) begin
        if ((~main_wishbone_bridge_is_ongoing)) begin
            main_wishbone_bridge_wdata_valid <= 1'd0;
        end
    end
end
assign main_wishbone_bridge_wdata_payload_data = main_interface_dat_w;
assign main_wishbone_bridge_wdata_payload_we = main_interface_sel;
assign main_wishbone_bridge_rdata_ready = 1'd1;
always @(*) begin
    builder_basesoc_litedramnativeportconverter_next_state <= 1'd0;
    main_port_cmd_payload_addr <= 24'd0;
    main_port_cmd_payload_we <= 1'd0;
    main_port_cmd_valid <= 1'd0;
    main_wishbone_bridge_cmd_ready <= 1'd0;
    main_wishbone_bridge_count_litedramnativeportconverter_next_value <= 3'd0;
    main_wishbone_bridge_count_litedramnativeportconverter_next_value_ce <= 1'd0;
    builder_basesoc_litedramnativeportconverter_next_state <= builder_basesoc_litedramnativeportconverter_state;
    case (builder_basesoc_litedramnativeportconverter_state)
        1'd1: begin
            main_port_cmd_valid <= 1'd1;
            main_port_cmd_payload_we <= main_wishbone_bridge_cmd_payload_we;
            main_port_cmd_payload_addr <= ((main_wishbone_bridge_cmd_payload_addr * 4'd8) + main_wishbone_bridge_count);
            if (main_port_cmd_ready) begin
                main_wishbone_bridge_count_litedramnativeportconverter_next_value <= (main_wishbone_bridge_count + 1'd1);
                main_wishbone_bridge_count_litedramnativeportconverter_next_value_ce <= 1'd1;
                if ((main_wishbone_bridge_count == 3'd7)) begin
                    main_wishbone_bridge_cmd_ready <= 1'd1;
                    builder_basesoc_litedramnativeportconverter_next_state <= 1'd0;
                end
            end
        end
        default: begin
            main_wishbone_bridge_count_litedramnativeportconverter_next_value <= 1'd0;
            main_wishbone_bridge_count_litedramnativeportconverter_next_value_ce <= 1'd1;
            if (main_wishbone_bridge_cmd_valid) begin
                builder_basesoc_litedramnativeportconverter_next_state <= 1'd1;
            end
        end
    endcase
end
assign main_wishbone_bridge_wdata_converter_converter_sink_valid = main_wishbone_bridge_wdata_converter_sink_valid;
assign main_wishbone_bridge_wdata_converter_converter_sink_first = main_wishbone_bridge_wdata_converter_sink_first;
assign main_wishbone_bridge_wdata_converter_converter_sink_last = main_wishbone_bridge_wdata_converter_sink_last;
assign main_wishbone_bridge_wdata_converter_sink_ready = main_wishbone_bridge_wdata_converter_converter_sink_ready;
always @(*) begin
    main_wishbone_bridge_wdata_converter_converter_sink_payload_data <= 144'd0;
    main_wishbone_bridge_wdata_converter_converter_sink_payload_data[15:0] <= main_wishbone_bridge_wdata_converter_sink_payload_data[15:0];
    main_wishbone_bridge_wdata_converter_converter_sink_payload_data[17:16] <= main_wishbone_bridge_wdata_converter_sink_payload_we[1:0];
    main_wishbone_bridge_wdata_converter_converter_sink_payload_data[33:18] <= main_wishbone_bridge_wdata_converter_sink_payload_data[31:16];
    main_wishbone_bridge_wdata_converter_converter_sink_payload_data[35:34] <= main_wishbone_bridge_wdata_converter_sink_payload_we[3:2];
    main_wishbone_bridge_wdata_converter_converter_sink_payload_data[51:36] <= main_wishbone_bridge_wdata_converter_sink_payload_data[47:32];
    main_wishbone_bridge_wdata_converter_converter_sink_payload_data[53:52] <= main_wishbone_bridge_wdata_converter_sink_payload_we[5:4];
    main_wishbone_bridge_wdata_converter_converter_sink_payload_data[69:54] <= main_wishbone_bridge_wdata_converter_sink_payload_data[63:48];
    main_wishbone_bridge_wdata_converter_converter_sink_payload_data[71:70] <= main_wishbone_bridge_wdata_converter_sink_payload_we[7:6];
    main_wishbone_bridge_wdata_converter_converter_sink_payload_data[87:72] <= main_wishbone_bridge_wdata_converter_sink_payload_data[79:64];
    main_wishbone_bridge_wdata_converter_converter_sink_payload_data[89:88] <= main_wishbone_bridge_wdata_converter_sink_payload_we[9:8];
    main_wishbone_bridge_wdata_converter_converter_sink_payload_data[105:90] <= main_wishbone_bridge_wdata_converter_sink_payload_data[95:80];
    main_wishbone_bridge_wdata_converter_converter_sink_payload_data[107:106] <= main_wishbone_bridge_wdata_converter_sink_payload_we[11:10];
    main_wishbone_bridge_wdata_converter_converter_sink_payload_data[123:108] <= main_wishbone_bridge_wdata_converter_sink_payload_data[111:96];
    main_wishbone_bridge_wdata_converter_converter_sink_payload_data[125:124] <= main_wishbone_bridge_wdata_converter_sink_payload_we[13:12];
    main_wishbone_bridge_wdata_converter_converter_sink_payload_data[141:126] <= main_wishbone_bridge_wdata_converter_sink_payload_data[127:112];
    main_wishbone_bridge_wdata_converter_converter_sink_payload_data[143:142] <= main_wishbone_bridge_wdata_converter_sink_payload_we[15:14];
end
assign main_wishbone_bridge_wdata_converter_source_valid = main_wishbone_bridge_wdata_converter_source_source_valid;
assign main_wishbone_bridge_wdata_converter_source_first = main_wishbone_bridge_wdata_converter_source_source_first;
assign main_wishbone_bridge_wdata_converter_source_last = main_wishbone_bridge_wdata_converter_source_source_last;
assign main_wishbone_bridge_wdata_converter_source_source_ready = main_wishbone_bridge_wdata_converter_source_ready;
assign {main_wishbone_bridge_wdata_converter_source_payload_we, main_wishbone_bridge_wdata_converter_source_payload_data} = main_wishbone_bridge_wdata_converter_source_source_payload_data;
assign main_wishbone_bridge_wdata_converter_source_source_valid = main_wishbone_bridge_wdata_converter_converter_source_valid;
assign main_wishbone_bridge_wdata_converter_converter_source_ready = main_wishbone_bridge_wdata_converter_source_source_ready;
assign main_wishbone_bridge_wdata_converter_source_source_first = main_wishbone_bridge_wdata_converter_converter_source_first;
assign main_wishbone_bridge_wdata_converter_source_source_last = main_wishbone_bridge_wdata_converter_converter_source_last;
assign main_wishbone_bridge_wdata_converter_source_source_payload_data = main_wishbone_bridge_wdata_converter_converter_source_payload_data;
assign main_wishbone_bridge_wdata_converter_converter_first = (main_wishbone_bridge_wdata_converter_converter_mux == 1'd0);
assign main_wishbone_bridge_wdata_converter_converter_last = (main_wishbone_bridge_wdata_converter_converter_mux == 3'd7);
assign main_wishbone_bridge_wdata_converter_converter_source_valid = main_wishbone_bridge_wdata_converter_converter_sink_valid;
assign main_wishbone_bridge_wdata_converter_converter_source_first = (main_wishbone_bridge_wdata_converter_converter_sink_first & main_wishbone_bridge_wdata_converter_converter_first);
assign main_wishbone_bridge_wdata_converter_converter_source_last = (main_wishbone_bridge_wdata_converter_converter_sink_last & main_wishbone_bridge_wdata_converter_converter_last);
assign main_wishbone_bridge_wdata_converter_converter_sink_ready = (main_wishbone_bridge_wdata_converter_converter_last & main_wishbone_bridge_wdata_converter_converter_source_ready);
always @(*) begin
    main_wishbone_bridge_wdata_converter_converter_source_payload_data <= 18'd0;
    case (main_wishbone_bridge_wdata_converter_converter_mux)
        1'd0: begin
            main_wishbone_bridge_wdata_converter_converter_source_payload_data <= main_wishbone_bridge_wdata_converter_converter_sink_payload_data[17:0];
        end
        1'd1: begin
            main_wishbone_bridge_wdata_converter_converter_source_payload_data <= main_wishbone_bridge_wdata_converter_converter_sink_payload_data[35:18];
        end
        2'd2: begin
            main_wishbone_bridge_wdata_converter_converter_source_payload_data <= main_wishbone_bridge_wdata_converter_converter_sink_payload_data[53:36];
        end
        2'd3: begin
            main_wishbone_bridge_wdata_converter_converter_source_payload_data <= main_wishbone_bridge_wdata_converter_converter_sink_payload_data[71:54];
        end
        3'd4: begin
            main_wishbone_bridge_wdata_converter_converter_source_payload_data <= main_wishbone_bridge_wdata_converter_converter_sink_payload_data[89:72];
        end
        3'd5: begin
            main_wishbone_bridge_wdata_converter_converter_source_payload_data <= main_wishbone_bridge_wdata_converter_converter_sink_payload_data[107:90];
        end
        3'd6: begin
            main_wishbone_bridge_wdata_converter_converter_source_payload_data <= main_wishbone_bridge_wdata_converter_converter_sink_payload_data[125:108];
        end
        default: begin
            main_wishbone_bridge_wdata_converter_converter_source_payload_data <= main_wishbone_bridge_wdata_converter_converter_sink_payload_data[143:126];
        end
    endcase
end
assign main_wishbone_bridge_wdata_converter_converter_source_payload_valid_token_count = main_wishbone_bridge_wdata_converter_converter_last;
assign main_wishbone_bridge_wdata_converter_sink_valid = main_wishbone_bridge_wdata_valid;
assign main_wishbone_bridge_wdata_ready = main_wishbone_bridge_wdata_converter_sink_ready;
assign main_wishbone_bridge_wdata_converter_sink_first = main_wishbone_bridge_wdata_first;
assign main_wishbone_bridge_wdata_converter_sink_last = main_wishbone_bridge_wdata_last;
assign main_wishbone_bridge_wdata_converter_sink_payload_data = main_wishbone_bridge_wdata_payload_data;
assign main_wishbone_bridge_wdata_converter_sink_payload_we = main_wishbone_bridge_wdata_payload_we;
assign main_port_wdata_valid = main_wishbone_bridge_wdata_converter_source_valid;
assign main_wishbone_bridge_wdata_converter_source_ready = main_port_wdata_ready;
assign main_port_wdata_first = main_wishbone_bridge_wdata_converter_source_first;
assign main_port_wdata_last = main_wishbone_bridge_wdata_converter_source_last;
assign main_port_wdata_payload_data = main_wishbone_bridge_wdata_converter_source_payload_data;
assign main_port_wdata_payload_we = main_wishbone_bridge_wdata_converter_source_payload_we;
assign main_wishbone_bridge_rdata_converter_converter_sink_valid = main_wishbone_bridge_rdata_converter_sink_valid;
assign main_wishbone_bridge_rdata_converter_converter_sink_first = main_wishbone_bridge_rdata_converter_sink_first;
assign main_wishbone_bridge_rdata_converter_converter_sink_last = main_wishbone_bridge_rdata_converter_sink_last;
assign main_wishbone_bridge_rdata_converter_sink_ready = main_wishbone_bridge_rdata_converter_converter_sink_ready;
assign main_wishbone_bridge_rdata_converter_converter_sink_payload_data = {main_wishbone_bridge_rdata_converter_sink_payload_data};
assign main_wishbone_bridge_rdata_converter_source_valid = main_wishbone_bridge_rdata_converter_source_source_valid;
assign main_wishbone_bridge_rdata_converter_source_first = main_wishbone_bridge_rdata_converter_source_source_first;
assign main_wishbone_bridge_rdata_converter_source_last = main_wishbone_bridge_rdata_converter_source_source_last;
assign main_wishbone_bridge_rdata_converter_source_source_ready = main_wishbone_bridge_rdata_converter_source_ready;
always @(*) begin
    main_wishbone_bridge_rdata_converter_source_payload_data <= 128'd0;
    main_wishbone_bridge_rdata_converter_source_payload_data[15:0] <= main_wishbone_bridge_rdata_converter_source_source_payload_data[15:0];
    main_wishbone_bridge_rdata_converter_source_payload_data[31:16] <= main_wishbone_bridge_rdata_converter_source_source_payload_data[31:16];
    main_wishbone_bridge_rdata_converter_source_payload_data[47:32] <= main_wishbone_bridge_rdata_converter_source_source_payload_data[47:32];
    main_wishbone_bridge_rdata_converter_source_payload_data[63:48] <= main_wishbone_bridge_rdata_converter_source_source_payload_data[63:48];
    main_wishbone_bridge_rdata_converter_source_payload_data[79:64] <= main_wishbone_bridge_rdata_converter_source_source_payload_data[79:64];
    main_wishbone_bridge_rdata_converter_source_payload_data[95:80] <= main_wishbone_bridge_rdata_converter_source_source_payload_data[95:80];
    main_wishbone_bridge_rdata_converter_source_payload_data[111:96] <= main_wishbone_bridge_rdata_converter_source_source_payload_data[111:96];
    main_wishbone_bridge_rdata_converter_source_payload_data[127:112] <= main_wishbone_bridge_rdata_converter_source_source_payload_data[127:112];
end
assign main_wishbone_bridge_rdata_converter_source_source_valid = main_wishbone_bridge_rdata_converter_converter_source_valid;
assign main_wishbone_bridge_rdata_converter_converter_source_ready = main_wishbone_bridge_rdata_converter_source_source_ready;
assign main_wishbone_bridge_rdata_converter_source_source_first = main_wishbone_bridge_rdata_converter_converter_source_first;
assign main_wishbone_bridge_rdata_converter_source_source_last = main_wishbone_bridge_rdata_converter_converter_source_last;
assign main_wishbone_bridge_rdata_converter_source_source_payload_data = main_wishbone_bridge_rdata_converter_converter_source_payload_data;
assign main_wishbone_bridge_rdata_converter_converter_sink_ready = ((~main_wishbone_bridge_rdata_converter_converter_strobe_all) | main_wishbone_bridge_rdata_converter_converter_source_ready);
assign main_wishbone_bridge_rdata_converter_converter_source_valid = main_wishbone_bridge_rdata_converter_converter_strobe_all;
assign main_wishbone_bridge_rdata_converter_converter_load_part = (main_wishbone_bridge_rdata_converter_converter_sink_valid & main_wishbone_bridge_rdata_converter_converter_sink_ready);
assign main_wishbone_bridge_rdata_converter_sink_valid = main_port_rdata_valid;
assign main_port_rdata_ready = main_wishbone_bridge_rdata_converter_sink_ready;
assign main_wishbone_bridge_rdata_converter_sink_first = main_port_rdata_first;
assign main_wishbone_bridge_rdata_converter_sink_last = main_port_rdata_last;
assign main_wishbone_bridge_rdata_converter_sink_payload_data = main_port_rdata_payload_data;
assign main_wishbone_bridge_rdata_valid = main_wishbone_bridge_rdata_converter_source_valid;
assign main_wishbone_bridge_rdata_converter_source_ready = main_wishbone_bridge_rdata_ready;
assign main_wishbone_bridge_rdata_first = main_wishbone_bridge_rdata_converter_source_first;
assign main_wishbone_bridge_rdata_last = main_wishbone_bridge_rdata_converter_source_last;
assign main_wishbone_bridge_rdata_payload_data = main_wishbone_bridge_rdata_converter_source_payload_data;
always @(*) begin
    builder_basesoc_fsm_next_state <= 2'd0;
    main_interface_ack <= 1'd0;
    main_interface_dat_r <= 128'd0;
    main_wishbone_bridge_aborted_fsm_next_value <= 1'd0;
    main_wishbone_bridge_aborted_fsm_next_value_ce <= 1'd0;
    main_wishbone_bridge_cmd_valid <= 1'd0;
    main_wishbone_bridge_is_ongoing <= 1'd0;
    builder_basesoc_fsm_next_state <= builder_basesoc_fsm_state;
    case (builder_basesoc_fsm_state)
        1'd1: begin
            main_wishbone_bridge_is_ongoing <= 1'd1;
            main_wishbone_bridge_aborted_fsm_next_value <= ((~main_interface_cyc) | main_wishbone_bridge_aborted);
            main_wishbone_bridge_aborted_fsm_next_value_ce <= 1'd1;
            if ((main_wishbone_bridge_wdata_valid & main_wishbone_bridge_wdata_ready)) begin
                main_interface_ack <= (main_interface_cyc & (~main_wishbone_bridge_aborted));
                builder_basesoc_fsm_next_state <= 1'd0;
            end
        end
        2'd2: begin
            main_wishbone_bridge_aborted_fsm_next_value <= ((~main_interface_cyc) | main_wishbone_bridge_aborted);
            main_wishbone_bridge_aborted_fsm_next_value_ce <= 1'd1;
            if (main_wishbone_bridge_rdata_valid) begin
                main_interface_ack <= (main_interface_cyc & (~main_wishbone_bridge_aborted));
                main_interface_dat_r <= main_wishbone_bridge_rdata_payload_data;
                builder_basesoc_fsm_next_state <= 1'd0;
            end
        end
        default: begin
            main_wishbone_bridge_cmd_valid <= (main_interface_cyc & main_interface_stb);
            if (((main_wishbone_bridge_cmd_valid & main_wishbone_bridge_cmd_ready) & main_interface_we)) begin
                builder_basesoc_fsm_next_state <= 1'd1;
            end
            if (((main_wishbone_bridge_cmd_valid & main_wishbone_bridge_cmd_ready) & (~main_interface_we))) begin
                builder_basesoc_fsm_next_state <= 2'd2;
            end
            main_wishbone_bridge_aborted_fsm_next_value <= 1'd0;
            main_wishbone_bridge_aborted_fsm_next_value_ce <= 1'd1;
        end
    endcase
end
assign {user_led7, user_led6, user_led5, user_led4, user_led3, user_led2, user_led1, user_led0} = main_storage;
assign basesoc_start0 = basesoc_start1;
assign basesoc_length0 = basesoc_length1;
assign basesoc_done1 = basesoc_done0;
assign basesoc_mode0 = 1'd0;
assign basesoc_mosi = basesoc_mosi_storage;
assign basesoc_miso_status = basesoc_miso;
assign basesoc_cs = basesoc_sel;
assign basesoc_cs_mode = basesoc_mode1;
assign basesoc_loopback = basesoc_mode2;
assign basesoc_clk_rise = (basesoc_clk_divider1 == (basesoc_clk_divider0[15:1] - 1'd1));
assign basesoc_clk_fall = (basesoc_clk_divider1 == (basesoc_clk_divider0 - 1'd1));
assign basesoc_clk_divider0 = basesoc_storage;
always @(*) begin
    basesoc_clk_enable <= 1'd0;
    basesoc_count_spimaster_next_value <= 3'd0;
    basesoc_count_spimaster_next_value_ce <= 1'd0;
    basesoc_done0 <= 1'd0;
    basesoc_irq <= 1'd0;
    basesoc_miso_latch <= 1'd0;
    basesoc_mosi_latch <= 1'd0;
    basesoc_xfer_enable <= 1'd0;
    builder_basesoc_spimaster_next_state <= 2'd0;
    builder_basesoc_spimaster_next_state <= builder_basesoc_spimaster_state;
    case (builder_basesoc_spimaster_state)
        1'd1: begin
            basesoc_count_spimaster_next_value <= 1'd0;
            basesoc_count_spimaster_next_value_ce <= 1'd1;
            if (basesoc_clk_fall) begin
                basesoc_xfer_enable <= 1'd1;
                builder_basesoc_spimaster_next_state <= 2'd2;
            end
        end
        2'd2: begin
            basesoc_clk_enable <= 1'd1;
            basesoc_xfer_enable <= 1'd1;
            if (basesoc_clk_fall) begin
                basesoc_count_spimaster_next_value <= (basesoc_count + 1'd1);
                basesoc_count_spimaster_next_value_ce <= 1'd1;
                if ((basesoc_count == (basesoc_length0 - 1'd1))) begin
                    builder_basesoc_spimaster_next_state <= 2'd3;
                end
            end
        end
        2'd3: begin
            basesoc_xfer_enable <= 1'd1;
            if (basesoc_clk_rise) begin
                basesoc_miso_latch <= 1'd1;
                basesoc_irq <= 1'd1;
                builder_basesoc_spimaster_next_state <= 1'd0;
            end
        end
        default: begin
            basesoc_done0 <= 1'd1;
            if (basesoc_start0) begin
                basesoc_done0 <= 1'd0;
                basesoc_mosi_latch <= 1'd1;
                builder_basesoc_spimaster_next_state <= 1'd1;
            end
        end
    endcase
end
always @(*) begin
    builder_basesoc_adr_wishbone2csr_next_value1 <= 14'd0;
    builder_basesoc_adr_wishbone2csr_next_value_ce1 <= 1'd0;
    builder_basesoc_dat_w_wishbone2csr_next_value0 <= 32'd0;
    builder_basesoc_dat_w_wishbone2csr_next_value_ce0 <= 1'd0;
    builder_basesoc_we_wishbone2csr_next_value2 <= 1'd0;
    builder_basesoc_we_wishbone2csr_next_value_ce2 <= 1'd0;
    builder_basesoc_wishbone2csr_next_state <= 2'd0;
    builder_basesoc_wishbone_ack <= 1'd0;
    builder_basesoc_wishbone_dat_r <= 32'd0;
    builder_basesoc_wishbone2csr_next_state <= builder_basesoc_wishbone2csr_state;
    case (builder_basesoc_wishbone2csr_state)
        1'd1: begin
            builder_basesoc_adr_wishbone2csr_next_value1 <= 1'd0;
            builder_basesoc_adr_wishbone2csr_next_value_ce1 <= 1'd1;
            builder_basesoc_we_wishbone2csr_next_value2 <= 1'd0;
            builder_basesoc_we_wishbone2csr_next_value_ce2 <= 1'd1;
            builder_basesoc_wishbone2csr_next_state <= 2'd2;
        end
        2'd2: begin
            builder_basesoc_wishbone_ack <= 1'd1;
            builder_basesoc_wishbone_dat_r <= builder_basesoc_dat_r;
            builder_basesoc_wishbone2csr_next_state <= 1'd0;
        end
        default: begin
            builder_basesoc_dat_w_wishbone2csr_next_value0 <= builder_basesoc_wishbone_dat_w;
            builder_basesoc_dat_w_wishbone2csr_next_value_ce0 <= 1'd1;
            if ((builder_basesoc_wishbone_cyc & builder_basesoc_wishbone_stb)) begin
                builder_basesoc_adr_wishbone2csr_next_value1 <= builder_basesoc_wishbone_adr;
                builder_basesoc_adr_wishbone2csr_next_value_ce1 <= 1'd1;
                builder_basesoc_we_wishbone2csr_next_value2 <= (builder_basesoc_wishbone_we & (builder_basesoc_wishbone_sel != 1'd0));
                builder_basesoc_we_wishbone2csr_next_value_ce2 <= 1'd1;
                builder_basesoc_wishbone2csr_next_state <= 1'd1;
            end
        end
    endcase
end
assign builder_csr_bankarray_csrbank0_sel = (builder_csr_bankarray_interface0_bank_bus_adr[13:9] == 1'd0);
assign builder_csr_bankarray_csrbank0_reset0_r = builder_csr_bankarray_interface0_bank_bus_dat_w[1:0];
always @(*) begin
    builder_csr_bankarray_csrbank0_reset0_re <= 1'd0;
    builder_csr_bankarray_csrbank0_reset0_we <= 1'd0;
    if ((builder_csr_bankarray_csrbank0_sel & (builder_csr_bankarray_interface0_bank_bus_adr[8:0] == 1'd0))) begin
        builder_csr_bankarray_csrbank0_reset0_re <= builder_csr_bankarray_interface0_bank_bus_we;
        builder_csr_bankarray_csrbank0_reset0_we <= (~builder_csr_bankarray_interface0_bank_bus_we);
    end
end
assign builder_csr_bankarray_csrbank0_scratch0_r = builder_csr_bankarray_interface0_bank_bus_dat_w[31:0];
always @(*) begin
    builder_csr_bankarray_csrbank0_scratch0_re <= 1'd0;
    builder_csr_bankarray_csrbank0_scratch0_we <= 1'd0;
    if ((builder_csr_bankarray_csrbank0_sel & (builder_csr_bankarray_interface0_bank_bus_adr[8:0] == 1'd1))) begin
        builder_csr_bankarray_csrbank0_scratch0_re <= builder_csr_bankarray_interface0_bank_bus_we;
        builder_csr_bankarray_csrbank0_scratch0_we <= (~builder_csr_bankarray_interface0_bank_bus_we);
    end
end
assign builder_csr_bankarray_csrbank0_bus_errors_r = builder_csr_bankarray_interface0_bank_bus_dat_w[31:0];
always @(*) begin
    builder_csr_bankarray_csrbank0_bus_errors_re <= 1'd0;
    builder_csr_bankarray_csrbank0_bus_errors_we <= 1'd0;
    if ((builder_csr_bankarray_csrbank0_sel & (builder_csr_bankarray_interface0_bank_bus_adr[8:0] == 2'd2))) begin
        builder_csr_bankarray_csrbank0_bus_errors_re <= builder_csr_bankarray_interface0_bank_bus_we;
        builder_csr_bankarray_csrbank0_bus_errors_we <= (~builder_csr_bankarray_interface0_bank_bus_we);
    end
end
always @(*) begin
    main_soc_rst <= 1'd0;
    if (main_reset_re) begin
        main_soc_rst <= main_reset_storage[0];
    end
end
assign main_cpu_rst = main_reset_storage[1];
assign builder_csr_bankarray_csrbank0_reset0_w = main_reset_storage[1:0];
assign builder_csr_bankarray_csrbank0_scratch0_w = main_scratch_storage[31:0];
assign builder_csr_bankarray_csrbank0_bus_errors_w = main_bus_errors_status[31:0];
assign main_bus_errors_we = builder_csr_bankarray_csrbank0_bus_errors_we;
assign builder_csr_bankarray_sel = (builder_csr_bankarray_sram_bus_adr[13:9] == 1'd1);
always @(*) begin
    builder_csr_bankarray_sram_bus_dat_r <= 32'd0;
    if (builder_csr_bankarray_sel_r) begin
        builder_csr_bankarray_sram_bus_dat_r <= builder_csr_bankarray_dat_r;
    end
end
assign builder_csr_bankarray_adr = builder_csr_bankarray_sram_bus_adr[5:0];
assign builder_csr_bankarray_csrbank1_sel = (builder_csr_bankarray_interface1_bank_bus_adr[13:9] == 2'd2);
assign builder_csr_bankarray_csrbank1_out0_r = builder_csr_bankarray_interface1_bank_bus_dat_w[7:0];
always @(*) begin
    builder_csr_bankarray_csrbank1_out0_re <= 1'd0;
    builder_csr_bankarray_csrbank1_out0_we <= 1'd0;
    if ((builder_csr_bankarray_csrbank1_sel & (builder_csr_bankarray_interface1_bank_bus_adr[8:0] == 1'd0))) begin
        builder_csr_bankarray_csrbank1_out0_re <= builder_csr_bankarray_interface1_bank_bus_we;
        builder_csr_bankarray_csrbank1_out0_we <= (~builder_csr_bankarray_interface1_bank_bus_we);
    end
end
assign builder_csr_bankarray_csrbank1_out0_w = main_storage[7:0];
assign builder_csr_bankarray_csrbank2_sel = (builder_csr_bankarray_interface2_bank_bus_adr[13:9] == 2'd3);
assign builder_csr_bankarray_csrbank2_dfii_control0_r = builder_csr_bankarray_interface2_bank_bus_dat_w[3:0];
always @(*) begin
    builder_csr_bankarray_csrbank2_dfii_control0_re <= 1'd0;
    builder_csr_bankarray_csrbank2_dfii_control0_we <= 1'd0;
    if ((builder_csr_bankarray_csrbank2_sel & (builder_csr_bankarray_interface2_bank_bus_adr[8:0] == 1'd0))) begin
        builder_csr_bankarray_csrbank2_dfii_control0_re <= builder_csr_bankarray_interface2_bank_bus_we;
        builder_csr_bankarray_csrbank2_dfii_control0_we <= (~builder_csr_bankarray_interface2_bank_bus_we);
    end
end
assign builder_csr_bankarray_csrbank2_dfii_pi0_command0_r = builder_csr_bankarray_interface2_bank_bus_dat_w[7:0];
always @(*) begin
    builder_csr_bankarray_csrbank2_dfii_pi0_command0_re <= 1'd0;
    builder_csr_bankarray_csrbank2_dfii_pi0_command0_we <= 1'd0;
    if ((builder_csr_bankarray_csrbank2_sel & (builder_csr_bankarray_interface2_bank_bus_adr[8:0] == 1'd1))) begin
        builder_csr_bankarray_csrbank2_dfii_pi0_command0_re <= builder_csr_bankarray_interface2_bank_bus_we;
        builder_csr_bankarray_csrbank2_dfii_pi0_command0_we <= (~builder_csr_bankarray_interface2_bank_bus_we);
    end
end
assign main_sdram_command_issue_r = builder_csr_bankarray_interface2_bank_bus_dat_w[0];
always @(*) begin
    main_sdram_command_issue_re <= 1'd0;
    main_sdram_command_issue_we <= 1'd0;
    if ((builder_csr_bankarray_csrbank2_sel & (builder_csr_bankarray_interface2_bank_bus_adr[8:0] == 2'd2))) begin
        main_sdram_command_issue_re <= builder_csr_bankarray_interface2_bank_bus_we;
        main_sdram_command_issue_we <= (~builder_csr_bankarray_interface2_bank_bus_we);
    end
end
assign builder_csr_bankarray_csrbank2_dfii_pi0_address0_r = builder_csr_bankarray_interface2_bank_bus_dat_w[12:0];
always @(*) begin
    builder_csr_bankarray_csrbank2_dfii_pi0_address0_re <= 1'd0;
    builder_csr_bankarray_csrbank2_dfii_pi0_address0_we <= 1'd0;
    if ((builder_csr_bankarray_csrbank2_sel & (builder_csr_bankarray_interface2_bank_bus_adr[8:0] == 2'd3))) begin
        builder_csr_bankarray_csrbank2_dfii_pi0_address0_re <= builder_csr_bankarray_interface2_bank_bus_we;
        builder_csr_bankarray_csrbank2_dfii_pi0_address0_we <= (~builder_csr_bankarray_interface2_bank_bus_we);
    end
end
assign builder_csr_bankarray_csrbank2_dfii_pi0_baddress0_r = builder_csr_bankarray_interface2_bank_bus_dat_w[1:0];
always @(*) begin
    builder_csr_bankarray_csrbank2_dfii_pi0_baddress0_re <= 1'd0;
    builder_csr_bankarray_csrbank2_dfii_pi0_baddress0_we <= 1'd0;
    if ((builder_csr_bankarray_csrbank2_sel & (builder_csr_bankarray_interface2_bank_bus_adr[8:0] == 3'd4))) begin
        builder_csr_bankarray_csrbank2_dfii_pi0_baddress0_re <= builder_csr_bankarray_interface2_bank_bus_we;
        builder_csr_bankarray_csrbank2_dfii_pi0_baddress0_we <= (~builder_csr_bankarray_interface2_bank_bus_we);
    end
end
assign builder_csr_bankarray_csrbank2_dfii_pi0_wrdata0_r = builder_csr_bankarray_interface2_bank_bus_dat_w[15:0];
always @(*) begin
    builder_csr_bankarray_csrbank2_dfii_pi0_wrdata0_re <= 1'd0;
    builder_csr_bankarray_csrbank2_dfii_pi0_wrdata0_we <= 1'd0;
    if ((builder_csr_bankarray_csrbank2_sel & (builder_csr_bankarray_interface2_bank_bus_adr[8:0] == 3'd5))) begin
        builder_csr_bankarray_csrbank2_dfii_pi0_wrdata0_re <= builder_csr_bankarray_interface2_bank_bus_we;
        builder_csr_bankarray_csrbank2_dfii_pi0_wrdata0_we <= (~builder_csr_bankarray_interface2_bank_bus_we);
    end
end
assign builder_csr_bankarray_csrbank2_dfii_pi0_rddata_r = builder_csr_bankarray_interface2_bank_bus_dat_w[15:0];
always @(*) begin
    builder_csr_bankarray_csrbank2_dfii_pi0_rddata_re <= 1'd0;
    builder_csr_bankarray_csrbank2_dfii_pi0_rddata_we <= 1'd0;
    if ((builder_csr_bankarray_csrbank2_sel & (builder_csr_bankarray_interface2_bank_bus_adr[8:0] == 3'd6))) begin
        builder_csr_bankarray_csrbank2_dfii_pi0_rddata_re <= builder_csr_bankarray_interface2_bank_bus_we;
        builder_csr_bankarray_csrbank2_dfii_pi0_rddata_we <= (~builder_csr_bankarray_interface2_bank_bus_we);
    end
end
assign main_sdram_sel = main_sdram_storage[0];
assign main_sdram_cke1 = main_sdram_storage[1];
assign main_sdram_odt = main_sdram_storage[2];
assign main_sdram_reset_n = main_sdram_storage[3];
assign builder_csr_bankarray_csrbank2_dfii_control0_w = main_sdram_storage[3:0];
assign main_sdram_csrfield_cs = main_sdram_command_storage[0];
assign main_sdram_csrfield_we = main_sdram_command_storage[1];
assign main_sdram_csrfield_cas = main_sdram_command_storage[2];
assign main_sdram_csrfield_ras = main_sdram_command_storage[3];
assign main_sdram_csrfield_wren = main_sdram_command_storage[4];
assign main_sdram_csrfield_rden = main_sdram_command_storage[5];
assign main_sdram_csrfield_cs_top = main_sdram_command_storage[6];
assign main_sdram_csrfield_cs_bottom = main_sdram_command_storage[7];
assign builder_csr_bankarray_csrbank2_dfii_pi0_command0_w = main_sdram_command_storage[7:0];
assign builder_csr_bankarray_csrbank2_dfii_pi0_address0_w = main_sdram_address_storage[12:0];
assign builder_csr_bankarray_csrbank2_dfii_pi0_baddress0_w = main_sdram_baddress_storage[1:0];
assign builder_csr_bankarray_csrbank2_dfii_pi0_wrdata0_w = main_sdram_wrdata_storage[15:0];
assign builder_csr_bankarray_csrbank2_dfii_pi0_rddata_w = main_sdram_rddata_status[15:0];
assign main_sdram_rddata_we = builder_csr_bankarray_csrbank2_dfii_pi0_rddata_we;
assign builder_csr_bankarray_csrbank3_sel = (builder_csr_bankarray_interface3_bank_bus_adr[13:9] == 3'd4);
assign builder_csr_bankarray_csrbank3_control0_r = builder_csr_bankarray_interface3_bank_bus_dat_w[15:0];
always @(*) begin
    builder_csr_bankarray_csrbank3_control0_re <= 1'd0;
    builder_csr_bankarray_csrbank3_control0_we <= 1'd0;
    if ((builder_csr_bankarray_csrbank3_sel & (builder_csr_bankarray_interface3_bank_bus_adr[8:0] == 1'd0))) begin
        builder_csr_bankarray_csrbank3_control0_re <= builder_csr_bankarray_interface3_bank_bus_we;
        builder_csr_bankarray_csrbank3_control0_we <= (~builder_csr_bankarray_interface3_bank_bus_we);
    end
end
assign builder_csr_bankarray_csrbank3_status_r = builder_csr_bankarray_interface3_bank_bus_dat_w[1:0];
always @(*) begin
    builder_csr_bankarray_csrbank3_status_re <= 1'd0;
    builder_csr_bankarray_csrbank3_status_we <= 1'd0;
    if ((builder_csr_bankarray_csrbank3_sel & (builder_csr_bankarray_interface3_bank_bus_adr[8:0] == 1'd1))) begin
        builder_csr_bankarray_csrbank3_status_re <= builder_csr_bankarray_interface3_bank_bus_we;
        builder_csr_bankarray_csrbank3_status_we <= (~builder_csr_bankarray_interface3_bank_bus_we);
    end
end
assign builder_csr_bankarray_csrbank3_mosi0_r = builder_csr_bankarray_interface3_bank_bus_dat_w[7:0];
always @(*) begin
    builder_csr_bankarray_csrbank3_mosi0_re <= 1'd0;
    builder_csr_bankarray_csrbank3_mosi0_we <= 1'd0;
    if ((builder_csr_bankarray_csrbank3_sel & (builder_csr_bankarray_interface3_bank_bus_adr[8:0] == 2'd2))) begin
        builder_csr_bankarray_csrbank3_mosi0_re <= builder_csr_bankarray_interface3_bank_bus_we;
        builder_csr_bankarray_csrbank3_mosi0_we <= (~builder_csr_bankarray_interface3_bank_bus_we);
    end
end
assign builder_csr_bankarray_csrbank3_miso_r = builder_csr_bankarray_interface3_bank_bus_dat_w[7:0];
always @(*) begin
    builder_csr_bankarray_csrbank3_miso_re <= 1'd0;
    builder_csr_bankarray_csrbank3_miso_we <= 1'd0;
    if ((builder_csr_bankarray_csrbank3_sel & (builder_csr_bankarray_interface3_bank_bus_adr[8:0] == 2'd3))) begin
        builder_csr_bankarray_csrbank3_miso_re <= builder_csr_bankarray_interface3_bank_bus_we;
        builder_csr_bankarray_csrbank3_miso_we <= (~builder_csr_bankarray_interface3_bank_bus_we);
    end
end
assign builder_csr_bankarray_csrbank3_cs0_r = builder_csr_bankarray_interface3_bank_bus_dat_w[16:0];
always @(*) begin
    builder_csr_bankarray_csrbank3_cs0_re <= 1'd0;
    builder_csr_bankarray_csrbank3_cs0_we <= 1'd0;
    if ((builder_csr_bankarray_csrbank3_sel & (builder_csr_bankarray_interface3_bank_bus_adr[8:0] == 3'd4))) begin
        builder_csr_bankarray_csrbank3_cs0_re <= builder_csr_bankarray_interface3_bank_bus_we;
        builder_csr_bankarray_csrbank3_cs0_we <= (~builder_csr_bankarray_interface3_bank_bus_we);
    end
end
assign builder_csr_bankarray_csrbank3_loopback0_r = builder_csr_bankarray_interface3_bank_bus_dat_w[0];
always @(*) begin
    builder_csr_bankarray_csrbank3_loopback0_re <= 1'd0;
    builder_csr_bankarray_csrbank3_loopback0_we <= 1'd0;
    if ((builder_csr_bankarray_csrbank3_sel & (builder_csr_bankarray_interface3_bank_bus_adr[8:0] == 3'd5))) begin
        builder_csr_bankarray_csrbank3_loopback0_re <= builder_csr_bankarray_interface3_bank_bus_we;
        builder_csr_bankarray_csrbank3_loopback0_we <= (~builder_csr_bankarray_interface3_bank_bus_we);
    end
end
assign builder_csr_bankarray_csrbank3_clk_divider0_r = builder_csr_bankarray_interface3_bank_bus_dat_w[15:0];
always @(*) begin
    builder_csr_bankarray_csrbank3_clk_divider0_re <= 1'd0;
    builder_csr_bankarray_csrbank3_clk_divider0_we <= 1'd0;
    if ((builder_csr_bankarray_csrbank3_sel & (builder_csr_bankarray_interface3_bank_bus_adr[8:0] == 3'd6))) begin
        builder_csr_bankarray_csrbank3_clk_divider0_re <= builder_csr_bankarray_interface3_bank_bus_we;
        builder_csr_bankarray_csrbank3_clk_divider0_we <= (~builder_csr_bankarray_interface3_bank_bus_we);
    end
end
always @(*) begin
    basesoc_start1 <= 1'd0;
    if (basesoc_control_re) begin
        basesoc_start1 <= basesoc_control_storage[0];
    end
end
assign basesoc_length1 = basesoc_control_storage[15:8];
assign builder_csr_bankarray_csrbank3_control0_w = basesoc_control_storage[15:0];
always @(*) begin
    basesoc_status_status <= 2'd0;
    basesoc_status_status[0] <= basesoc_done1;
    basesoc_status_status[1] <= basesoc_mode0;
end
assign builder_csr_bankarray_csrbank3_status_w = basesoc_status_status[1:0];
assign basesoc_status_we = builder_csr_bankarray_csrbank3_status_we;
assign builder_csr_bankarray_csrbank3_mosi0_w = basesoc_mosi_storage[7:0];
assign builder_csr_bankarray_csrbank3_miso_w = basesoc_miso_status[7:0];
assign basesoc_miso_we = builder_csr_bankarray_csrbank3_miso_we;
assign basesoc_sel = basesoc_cs_storage[0];
assign basesoc_mode1 = basesoc_cs_storage[16];
assign builder_csr_bankarray_csrbank3_cs0_w = basesoc_cs_storage[16:0];
assign basesoc_mode2 = basesoc_loopback_storage;
assign builder_csr_bankarray_csrbank3_loopback0_w = basesoc_loopback_storage;
assign builder_csr_bankarray_csrbank3_clk_divider0_w = basesoc_storage[15:0];
assign builder_csr_bankarray_csrbank4_sel = (builder_csr_bankarray_interface4_bank_bus_adr[13:9] == 3'd5);
assign builder_csr_bankarray_csrbank4_load0_r = builder_csr_bankarray_interface4_bank_bus_dat_w[31:0];
always @(*) begin
    builder_csr_bankarray_csrbank4_load0_re <= 1'd0;
    builder_csr_bankarray_csrbank4_load0_we <= 1'd0;
    if ((builder_csr_bankarray_csrbank4_sel & (builder_csr_bankarray_interface4_bank_bus_adr[8:0] == 1'd0))) begin
        builder_csr_bankarray_csrbank4_load0_re <= builder_csr_bankarray_interface4_bank_bus_we;
        builder_csr_bankarray_csrbank4_load0_we <= (~builder_csr_bankarray_interface4_bank_bus_we);
    end
end
assign builder_csr_bankarray_csrbank4_reload0_r = builder_csr_bankarray_interface4_bank_bus_dat_w[31:0];
always @(*) begin
    builder_csr_bankarray_csrbank4_reload0_re <= 1'd0;
    builder_csr_bankarray_csrbank4_reload0_we <= 1'd0;
    if ((builder_csr_bankarray_csrbank4_sel & (builder_csr_bankarray_interface4_bank_bus_adr[8:0] == 1'd1))) begin
        builder_csr_bankarray_csrbank4_reload0_re <= builder_csr_bankarray_interface4_bank_bus_we;
        builder_csr_bankarray_csrbank4_reload0_we <= (~builder_csr_bankarray_interface4_bank_bus_we);
    end
end
assign builder_csr_bankarray_csrbank4_en0_r = builder_csr_bankarray_interface4_bank_bus_dat_w[0];
always @(*) begin
    builder_csr_bankarray_csrbank4_en0_re <= 1'd0;
    builder_csr_bankarray_csrbank4_en0_we <= 1'd0;
    if ((builder_csr_bankarray_csrbank4_sel & (builder_csr_bankarray_interface4_bank_bus_adr[8:0] == 2'd2))) begin
        builder_csr_bankarray_csrbank4_en0_re <= builder_csr_bankarray_interface4_bank_bus_we;
        builder_csr_bankarray_csrbank4_en0_we <= (~builder_csr_bankarray_interface4_bank_bus_we);
    end
end
assign builder_csr_bankarray_csrbank4_update_value0_r = builder_csr_bankarray_interface4_bank_bus_dat_w[0];
always @(*) begin
    builder_csr_bankarray_csrbank4_update_value0_re <= 1'd0;
    builder_csr_bankarray_csrbank4_update_value0_we <= 1'd0;
    if ((builder_csr_bankarray_csrbank4_sel & (builder_csr_bankarray_interface4_bank_bus_adr[8:0] == 2'd3))) begin
        builder_csr_bankarray_csrbank4_update_value0_re <= builder_csr_bankarray_interface4_bank_bus_we;
        builder_csr_bankarray_csrbank4_update_value0_we <= (~builder_csr_bankarray_interface4_bank_bus_we);
    end
end
assign builder_csr_bankarray_csrbank4_value_r = builder_csr_bankarray_interface4_bank_bus_dat_w[31:0];
always @(*) begin
    builder_csr_bankarray_csrbank4_value_re <= 1'd0;
    builder_csr_bankarray_csrbank4_value_we <= 1'd0;
    if ((builder_csr_bankarray_csrbank4_sel & (builder_csr_bankarray_interface4_bank_bus_adr[8:0] == 3'd4))) begin
        builder_csr_bankarray_csrbank4_value_re <= builder_csr_bankarray_interface4_bank_bus_we;
        builder_csr_bankarray_csrbank4_value_we <= (~builder_csr_bankarray_interface4_bank_bus_we);
    end
end
assign builder_csr_bankarray_csrbank4_ev_status_r = builder_csr_bankarray_interface4_bank_bus_dat_w[0];
always @(*) begin
    builder_csr_bankarray_csrbank4_ev_status_re <= 1'd0;
    builder_csr_bankarray_csrbank4_ev_status_we <= 1'd0;
    if ((builder_csr_bankarray_csrbank4_sel & (builder_csr_bankarray_interface4_bank_bus_adr[8:0] == 3'd5))) begin
        builder_csr_bankarray_csrbank4_ev_status_re <= builder_csr_bankarray_interface4_bank_bus_we;
        builder_csr_bankarray_csrbank4_ev_status_we <= (~builder_csr_bankarray_interface4_bank_bus_we);
    end
end
assign builder_csr_bankarray_csrbank4_ev_pending_r = builder_csr_bankarray_interface4_bank_bus_dat_w[0];
always @(*) begin
    builder_csr_bankarray_csrbank4_ev_pending_re <= 1'd0;
    builder_csr_bankarray_csrbank4_ev_pending_we <= 1'd0;
    if ((builder_csr_bankarray_csrbank4_sel & (builder_csr_bankarray_interface4_bank_bus_adr[8:0] == 3'd6))) begin
        builder_csr_bankarray_csrbank4_ev_pending_re <= builder_csr_bankarray_interface4_bank_bus_we;
        builder_csr_bankarray_csrbank4_ev_pending_we <= (~builder_csr_bankarray_interface4_bank_bus_we);
    end
end
assign builder_csr_bankarray_csrbank4_ev_enable0_r = builder_csr_bankarray_interface4_bank_bus_dat_w[0];
always @(*) begin
    builder_csr_bankarray_csrbank4_ev_enable0_re <= 1'd0;
    builder_csr_bankarray_csrbank4_ev_enable0_we <= 1'd0;
    if ((builder_csr_bankarray_csrbank4_sel & (builder_csr_bankarray_interface4_bank_bus_adr[8:0] == 3'd7))) begin
        builder_csr_bankarray_csrbank4_ev_enable0_re <= builder_csr_bankarray_interface4_bank_bus_we;
        builder_csr_bankarray_csrbank4_ev_enable0_we <= (~builder_csr_bankarray_interface4_bank_bus_we);
    end
end
assign builder_csr_bankarray_csrbank4_load0_w = main_load_storage[31:0];
assign builder_csr_bankarray_csrbank4_reload0_w = main_reload_storage[31:0];
assign builder_csr_bankarray_csrbank4_en0_w = main_en_storage;
assign builder_csr_bankarray_csrbank4_update_value0_w = main_update_value_storage;
assign builder_csr_bankarray_csrbank4_value_w = main_value_status[31:0];
assign main_value_we = builder_csr_bankarray_csrbank4_value_we;
always @(*) begin
    main_status_status <= 1'd0;
    main_status_status <= main_zero0;
end
assign builder_csr_bankarray_csrbank4_ev_status_w = main_status_status;
assign main_status_we = builder_csr_bankarray_csrbank4_ev_status_we;
always @(*) begin
    main_pending_status <= 1'd0;
    main_pending_status <= main_zero1;
end
assign builder_csr_bankarray_csrbank4_ev_pending_w = main_pending_status;
assign main_pending_we = builder_csr_bankarray_csrbank4_ev_pending_we;
assign main_zero2 = main_enable_storage;
assign builder_csr_bankarray_csrbank4_ev_enable0_w = main_enable_storage;
assign builder_csr_bankarray_csrbank5_sel = (builder_csr_bankarray_interface5_bank_bus_adr[13:9] == 3'd6);
assign main_uartcrossover_rxtx_r = builder_csr_bankarray_interface5_bank_bus_dat_w[7:0];
always @(*) begin
    main_uartcrossover_rxtx_re <= 1'd0;
    main_uartcrossover_rxtx_we <= 1'd0;
    if ((builder_csr_bankarray_csrbank5_sel & (builder_csr_bankarray_interface5_bank_bus_adr[8:0] == 1'd0))) begin
        main_uartcrossover_rxtx_re <= builder_csr_bankarray_interface5_bank_bus_we;
        main_uartcrossover_rxtx_we <= (~builder_csr_bankarray_interface5_bank_bus_we);
    end
end
assign builder_csr_bankarray_csrbank5_txfull_r = builder_csr_bankarray_interface5_bank_bus_dat_w[0];
always @(*) begin
    builder_csr_bankarray_csrbank5_txfull_re <= 1'd0;
    builder_csr_bankarray_csrbank5_txfull_we <= 1'd0;
    if ((builder_csr_bankarray_csrbank5_sel & (builder_csr_bankarray_interface5_bank_bus_adr[8:0] == 1'd1))) begin
        builder_csr_bankarray_csrbank5_txfull_re <= builder_csr_bankarray_interface5_bank_bus_we;
        builder_csr_bankarray_csrbank5_txfull_we <= (~builder_csr_bankarray_interface5_bank_bus_we);
    end
end
assign builder_csr_bankarray_csrbank5_rxempty_r = builder_csr_bankarray_interface5_bank_bus_dat_w[0];
always @(*) begin
    builder_csr_bankarray_csrbank5_rxempty_re <= 1'd0;
    builder_csr_bankarray_csrbank5_rxempty_we <= 1'd0;
    if ((builder_csr_bankarray_csrbank5_sel & (builder_csr_bankarray_interface5_bank_bus_adr[8:0] == 2'd2))) begin
        builder_csr_bankarray_csrbank5_rxempty_re <= builder_csr_bankarray_interface5_bank_bus_we;
        builder_csr_bankarray_csrbank5_rxempty_we <= (~builder_csr_bankarray_interface5_bank_bus_we);
    end
end
assign builder_csr_bankarray_csrbank5_ev_status_r = builder_csr_bankarray_interface5_bank_bus_dat_w[1:0];
always @(*) begin
    builder_csr_bankarray_csrbank5_ev_status_re <= 1'd0;
    builder_csr_bankarray_csrbank5_ev_status_we <= 1'd0;
    if ((builder_csr_bankarray_csrbank5_sel & (builder_csr_bankarray_interface5_bank_bus_adr[8:0] == 2'd3))) begin
        builder_csr_bankarray_csrbank5_ev_status_re <= builder_csr_bankarray_interface5_bank_bus_we;
        builder_csr_bankarray_csrbank5_ev_status_we <= (~builder_csr_bankarray_interface5_bank_bus_we);
    end
end
assign builder_csr_bankarray_csrbank5_ev_pending_r = builder_csr_bankarray_interface5_bank_bus_dat_w[1:0];
always @(*) begin
    builder_csr_bankarray_csrbank5_ev_pending_re <= 1'd0;
    builder_csr_bankarray_csrbank5_ev_pending_we <= 1'd0;
    if ((builder_csr_bankarray_csrbank5_sel & (builder_csr_bankarray_interface5_bank_bus_adr[8:0] == 3'd4))) begin
        builder_csr_bankarray_csrbank5_ev_pending_re <= builder_csr_bankarray_interface5_bank_bus_we;
        builder_csr_bankarray_csrbank5_ev_pending_we <= (~builder_csr_bankarray_interface5_bank_bus_we);
    end
end
assign builder_csr_bankarray_csrbank5_ev_enable0_r = builder_csr_bankarray_interface5_bank_bus_dat_w[1:0];
always @(*) begin
    builder_csr_bankarray_csrbank5_ev_enable0_re <= 1'd0;
    builder_csr_bankarray_csrbank5_ev_enable0_we <= 1'd0;
    if ((builder_csr_bankarray_csrbank5_sel & (builder_csr_bankarray_interface5_bank_bus_adr[8:0] == 3'd5))) begin
        builder_csr_bankarray_csrbank5_ev_enable0_re <= builder_csr_bankarray_interface5_bank_bus_we;
        builder_csr_bankarray_csrbank5_ev_enable0_we <= (~builder_csr_bankarray_interface5_bank_bus_we);
    end
end
assign builder_csr_bankarray_csrbank5_txempty_r = builder_csr_bankarray_interface5_bank_bus_dat_w[0];
always @(*) begin
    builder_csr_bankarray_csrbank5_txempty_re <= 1'd0;
    builder_csr_bankarray_csrbank5_txempty_we <= 1'd0;
    if ((builder_csr_bankarray_csrbank5_sel & (builder_csr_bankarray_interface5_bank_bus_adr[8:0] == 3'd6))) begin
        builder_csr_bankarray_csrbank5_txempty_re <= builder_csr_bankarray_interface5_bank_bus_we;
        builder_csr_bankarray_csrbank5_txempty_we <= (~builder_csr_bankarray_interface5_bank_bus_we);
    end
end
assign builder_csr_bankarray_csrbank5_rxfull_r = builder_csr_bankarray_interface5_bank_bus_dat_w[0];
always @(*) begin
    builder_csr_bankarray_csrbank5_rxfull_re <= 1'd0;
    builder_csr_bankarray_csrbank5_rxfull_we <= 1'd0;
    if ((builder_csr_bankarray_csrbank5_sel & (builder_csr_bankarray_interface5_bank_bus_adr[8:0] == 3'd7))) begin
        builder_csr_bankarray_csrbank5_rxfull_re <= builder_csr_bankarray_interface5_bank_bus_we;
        builder_csr_bankarray_csrbank5_rxfull_we <= (~builder_csr_bankarray_interface5_bank_bus_we);
    end
end
assign main_xover_rxtx_r = builder_csr_bankarray_interface5_bank_bus_dat_w[7:0];
always @(*) begin
    main_xover_rxtx_re <= 1'd0;
    main_xover_rxtx_we <= 1'd0;
    if ((builder_csr_bankarray_csrbank5_sel & (builder_csr_bankarray_interface5_bank_bus_adr[8:0] == 4'd8))) begin
        main_xover_rxtx_re <= builder_csr_bankarray_interface5_bank_bus_we;
        main_xover_rxtx_we <= (~builder_csr_bankarray_interface5_bank_bus_we);
    end
end
assign builder_csr_bankarray_csrbank5_xover_txfull_r = builder_csr_bankarray_interface5_bank_bus_dat_w[0];
always @(*) begin
    builder_csr_bankarray_csrbank5_xover_txfull_re <= 1'd0;
    builder_csr_bankarray_csrbank5_xover_txfull_we <= 1'd0;
    if ((builder_csr_bankarray_csrbank5_sel & (builder_csr_bankarray_interface5_bank_bus_adr[8:0] == 4'd9))) begin
        builder_csr_bankarray_csrbank5_xover_txfull_re <= builder_csr_bankarray_interface5_bank_bus_we;
        builder_csr_bankarray_csrbank5_xover_txfull_we <= (~builder_csr_bankarray_interface5_bank_bus_we);
    end
end
assign builder_csr_bankarray_csrbank5_xover_rxempty_r = builder_csr_bankarray_interface5_bank_bus_dat_w[0];
always @(*) begin
    builder_csr_bankarray_csrbank5_xover_rxempty_re <= 1'd0;
    builder_csr_bankarray_csrbank5_xover_rxempty_we <= 1'd0;
    if ((builder_csr_bankarray_csrbank5_sel & (builder_csr_bankarray_interface5_bank_bus_adr[8:0] == 4'd10))) begin
        builder_csr_bankarray_csrbank5_xover_rxempty_re <= builder_csr_bankarray_interface5_bank_bus_we;
        builder_csr_bankarray_csrbank5_xover_rxempty_we <= (~builder_csr_bankarray_interface5_bank_bus_we);
    end
end
assign builder_csr_bankarray_csrbank5_xover_ev_status_r = builder_csr_bankarray_interface5_bank_bus_dat_w[1:0];
always @(*) begin
    builder_csr_bankarray_csrbank5_xover_ev_status_re <= 1'd0;
    builder_csr_bankarray_csrbank5_xover_ev_status_we <= 1'd0;
    if ((builder_csr_bankarray_csrbank5_sel & (builder_csr_bankarray_interface5_bank_bus_adr[8:0] == 4'd11))) begin
        builder_csr_bankarray_csrbank5_xover_ev_status_re <= builder_csr_bankarray_interface5_bank_bus_we;
        builder_csr_bankarray_csrbank5_xover_ev_status_we <= (~builder_csr_bankarray_interface5_bank_bus_we);
    end
end
assign builder_csr_bankarray_csrbank5_xover_ev_pending_r = builder_csr_bankarray_interface5_bank_bus_dat_w[1:0];
always @(*) begin
    builder_csr_bankarray_csrbank5_xover_ev_pending_re <= 1'd0;
    builder_csr_bankarray_csrbank5_xover_ev_pending_we <= 1'd0;
    if ((builder_csr_bankarray_csrbank5_sel & (builder_csr_bankarray_interface5_bank_bus_adr[8:0] == 4'd12))) begin
        builder_csr_bankarray_csrbank5_xover_ev_pending_re <= builder_csr_bankarray_interface5_bank_bus_we;
        builder_csr_bankarray_csrbank5_xover_ev_pending_we <= (~builder_csr_bankarray_interface5_bank_bus_we);
    end
end
assign builder_csr_bankarray_csrbank5_xover_ev_enable0_r = builder_csr_bankarray_interface5_bank_bus_dat_w[1:0];
always @(*) begin
    builder_csr_bankarray_csrbank5_xover_ev_enable0_re <= 1'd0;
    builder_csr_bankarray_csrbank5_xover_ev_enable0_we <= 1'd0;
    if ((builder_csr_bankarray_csrbank5_sel & (builder_csr_bankarray_interface5_bank_bus_adr[8:0] == 4'd13))) begin
        builder_csr_bankarray_csrbank5_xover_ev_enable0_re <= builder_csr_bankarray_interface5_bank_bus_we;
        builder_csr_bankarray_csrbank5_xover_ev_enable0_we <= (~builder_csr_bankarray_interface5_bank_bus_we);
    end
end
assign builder_csr_bankarray_csrbank5_xover_txempty_r = builder_csr_bankarray_interface5_bank_bus_dat_w[0];
always @(*) begin
    builder_csr_bankarray_csrbank5_xover_txempty_re <= 1'd0;
    builder_csr_bankarray_csrbank5_xover_txempty_we <= 1'd0;
    if ((builder_csr_bankarray_csrbank5_sel & (builder_csr_bankarray_interface5_bank_bus_adr[8:0] == 4'd14))) begin
        builder_csr_bankarray_csrbank5_xover_txempty_re <= builder_csr_bankarray_interface5_bank_bus_we;
        builder_csr_bankarray_csrbank5_xover_txempty_we <= (~builder_csr_bankarray_interface5_bank_bus_we);
    end
end
assign builder_csr_bankarray_csrbank5_xover_rxfull_r = builder_csr_bankarray_interface5_bank_bus_dat_w[0];
always @(*) begin
    builder_csr_bankarray_csrbank5_xover_rxfull_re <= 1'd0;
    builder_csr_bankarray_csrbank5_xover_rxfull_we <= 1'd0;
    if ((builder_csr_bankarray_csrbank5_sel & (builder_csr_bankarray_interface5_bank_bus_adr[8:0] == 4'd15))) begin
        builder_csr_bankarray_csrbank5_xover_rxfull_re <= builder_csr_bankarray_interface5_bank_bus_we;
        builder_csr_bankarray_csrbank5_xover_rxfull_we <= (~builder_csr_bankarray_interface5_bank_bus_we);
    end
end
assign builder_csr_bankarray_csrbank5_txfull_w = main_uartcrossover_txfull_status;
assign main_uartcrossover_txfull_we = builder_csr_bankarray_csrbank5_txfull_we;
assign builder_csr_bankarray_csrbank5_rxempty_w = main_uartcrossover_rxempty_status;
assign main_uartcrossover_rxempty_we = builder_csr_bankarray_csrbank5_rxempty_we;
always @(*) begin
    main_uartcrossover_status_status <= 2'd0;
    main_uartcrossover_status_status[0] <= main_uartcrossover_tx0;
    main_uartcrossover_status_status[1] <= main_uartcrossover_rx0;
end
assign builder_csr_bankarray_csrbank5_ev_status_w = main_uartcrossover_status_status[1:0];
assign main_uartcrossover_status_we = builder_csr_bankarray_csrbank5_ev_status_we;
always @(*) begin
    main_uartcrossover_pending_status <= 2'd0;
    main_uartcrossover_pending_status[0] <= main_uartcrossover_tx1;
    main_uartcrossover_pending_status[1] <= main_uartcrossover_rx1;
end
assign builder_csr_bankarray_csrbank5_ev_pending_w = main_uartcrossover_pending_status[1:0];
assign main_uartcrossover_pending_we = builder_csr_bankarray_csrbank5_ev_pending_we;
assign main_uartcrossover_tx2 = main_uartcrossover_enable_storage[0];
assign main_uartcrossover_rx2 = main_uartcrossover_enable_storage[1];
assign builder_csr_bankarray_csrbank5_ev_enable0_w = main_uartcrossover_enable_storage[1:0];
assign builder_csr_bankarray_csrbank5_txempty_w = main_uartcrossover_txempty_status;
assign main_uartcrossover_txempty_we = builder_csr_bankarray_csrbank5_txempty_we;
assign builder_csr_bankarray_csrbank5_rxfull_w = main_uartcrossover_rxfull_status;
assign main_uartcrossover_rxfull_we = builder_csr_bankarray_csrbank5_rxfull_we;
assign builder_csr_bankarray_csrbank5_xover_txfull_w = main_xover_txfull_status;
assign main_xover_txfull_we = builder_csr_bankarray_csrbank5_xover_txfull_we;
assign builder_csr_bankarray_csrbank5_xover_rxempty_w = main_xover_rxempty_status;
assign main_xover_rxempty_we = builder_csr_bankarray_csrbank5_xover_rxempty_we;
always @(*) begin
    main_xover_status_status <= 2'd0;
    main_xover_status_status[0] <= main_xover_tx0;
    main_xover_status_status[1] <= main_xover_rx0;
end
assign builder_csr_bankarray_csrbank5_xover_ev_status_w = main_xover_status_status[1:0];
assign main_xover_status_we = builder_csr_bankarray_csrbank5_xover_ev_status_we;
always @(*) begin
    main_xover_pending_status <= 2'd0;
    main_xover_pending_status[0] <= main_xover_tx1;
    main_xover_pending_status[1] <= main_xover_rx1;
end
assign builder_csr_bankarray_csrbank5_xover_ev_pending_w = main_xover_pending_status[1:0];
assign main_xover_pending_we = builder_csr_bankarray_csrbank5_xover_ev_pending_we;
assign main_xover_tx2 = main_xover_enable_storage[0];
assign main_xover_rx2 = main_xover_enable_storage[1];
assign builder_csr_bankarray_csrbank5_xover_ev_enable0_w = main_xover_enable_storage[1:0];
assign builder_csr_bankarray_csrbank5_xover_txempty_w = main_xover_txempty_status;
assign main_xover_txempty_we = builder_csr_bankarray_csrbank5_xover_txempty_we;
assign builder_csr_bankarray_csrbank5_xover_rxfull_w = main_xover_rxfull_status;
assign main_xover_rxfull_we = builder_csr_bankarray_csrbank5_xover_rxfull_we;
assign builder_csr_interconnect_adr = builder_basesoc_adr;
assign builder_csr_interconnect_we = builder_basesoc_we;
assign builder_csr_interconnect_dat_w = builder_basesoc_dat_w;
assign builder_basesoc_dat_r = builder_csr_interconnect_dat_r;
assign builder_csr_bankarray_interface0_bank_bus_adr = builder_csr_interconnect_adr;
assign builder_csr_bankarray_interface1_bank_bus_adr = builder_csr_interconnect_adr;
assign builder_csr_bankarray_interface2_bank_bus_adr = builder_csr_interconnect_adr;
assign builder_csr_bankarray_interface3_bank_bus_adr = builder_csr_interconnect_adr;
assign builder_csr_bankarray_interface4_bank_bus_adr = builder_csr_interconnect_adr;
assign builder_csr_bankarray_interface5_bank_bus_adr = builder_csr_interconnect_adr;
assign builder_csr_bankarray_sram_bus_adr = builder_csr_interconnect_adr;
assign builder_csr_bankarray_interface0_bank_bus_we = builder_csr_interconnect_we;
assign builder_csr_bankarray_interface1_bank_bus_we = builder_csr_interconnect_we;
assign builder_csr_bankarray_interface2_bank_bus_we = builder_csr_interconnect_we;
assign builder_csr_bankarray_interface3_bank_bus_we = builder_csr_interconnect_we;
assign builder_csr_bankarray_interface4_bank_bus_we = builder_csr_interconnect_we;
assign builder_csr_bankarray_interface5_bank_bus_we = builder_csr_interconnect_we;
assign builder_csr_bankarray_sram_bus_we = builder_csr_interconnect_we;
assign builder_csr_bankarray_interface0_bank_bus_dat_w = builder_csr_interconnect_dat_w;
assign builder_csr_bankarray_interface1_bank_bus_dat_w = builder_csr_interconnect_dat_w;
assign builder_csr_bankarray_interface2_bank_bus_dat_w = builder_csr_interconnect_dat_w;
assign builder_csr_bankarray_interface3_bank_bus_dat_w = builder_csr_interconnect_dat_w;
assign builder_csr_bankarray_interface4_bank_bus_dat_w = builder_csr_interconnect_dat_w;
assign builder_csr_bankarray_interface5_bank_bus_dat_w = builder_csr_interconnect_dat_w;
assign builder_csr_bankarray_sram_bus_dat_w = builder_csr_interconnect_dat_w;
assign builder_csr_interconnect_dat_r = ((((((builder_csr_bankarray_interface0_bank_bus_dat_r | builder_csr_bankarray_interface1_bank_bus_dat_r) | builder_csr_bankarray_interface2_bank_bus_dat_r) | builder_csr_bankarray_interface3_bank_bus_dat_r) | builder_csr_bankarray_interface4_bank_bus_dat_r) | builder_csr_bankarray_interface5_bank_bus_dat_r) | builder_csr_bankarray_sram_bus_dat_r);
always @(*) begin
    builder_comb_rhs_self0 <= 32'd0;
    case (builder_grant)
        1'd0: begin
            builder_comb_rhs_self0 <= main_cpu_ibus_ibus_adr;
        end
        1'd1: begin
            builder_comb_rhs_self0 <= main_cpu_dbus_dbus_adr;
        end
        default: begin
            builder_comb_rhs_self0 <= main_basesoc_wishbone_adr;
        end
    endcase
end
always @(*) begin
    builder_comb_rhs_self1 <= 32'd0;
    case (builder_grant)
        1'd0: begin
            builder_comb_rhs_self1 <= main_cpu_ibus_ibus_dat_w;
        end
        1'd1: begin
            builder_comb_rhs_self1 <= main_cpu_dbus_dbus_dat_w;
        end
        default: begin
            builder_comb_rhs_self1 <= main_basesoc_wishbone_dat_w;
        end
    endcase
end
always @(*) begin
    builder_comb_rhs_self2 <= 4'd0;
    case (builder_grant)
        1'd0: begin
            builder_comb_rhs_self2 <= main_cpu_ibus_ibus_sel;
        end
        1'd1: begin
            builder_comb_rhs_self2 <= main_cpu_dbus_dbus_sel;
        end
        default: begin
            builder_comb_rhs_self2 <= main_basesoc_wishbone_sel;
        end
    endcase
end
always @(*) begin
    builder_comb_rhs_self3 <= 1'd0;
    case (builder_grant)
        1'd0: begin
            builder_comb_rhs_self3 <= main_cpu_ibus_ibus_cyc;
        end
        1'd1: begin
            builder_comb_rhs_self3 <= main_cpu_dbus_dbus_cyc;
        end
        default: begin
            builder_comb_rhs_self3 <= main_basesoc_wishbone_cyc;
        end
    endcase
end
always @(*) begin
    builder_comb_rhs_self4 <= 1'd0;
    case (builder_grant)
        1'd0: begin
            builder_comb_rhs_self4 <= main_cpu_ibus_ibus_stb;
        end
        1'd1: begin
            builder_comb_rhs_self4 <= main_cpu_dbus_dbus_stb;
        end
        default: begin
            builder_comb_rhs_self4 <= main_basesoc_wishbone_stb;
        end
    endcase
end
always @(*) begin
    builder_comb_rhs_self5 <= 1'd0;
    case (builder_grant)
        1'd0: begin
            builder_comb_rhs_self5 <= main_cpu_ibus_ibus_we;
        end
        1'd1: begin
            builder_comb_rhs_self5 <= main_cpu_dbus_dbus_we;
        end
        default: begin
            builder_comb_rhs_self5 <= main_basesoc_wishbone_we;
        end
    endcase
end
always @(*) begin
    builder_comb_rhs_self6 <= 3'd0;
    case (builder_grant)
        1'd0: begin
            builder_comb_rhs_self6 <= main_cpu_ibus_ibus_cti;
        end
        1'd1: begin
            builder_comb_rhs_self6 <= main_cpu_dbus_dbus_cti;
        end
        default: begin
            builder_comb_rhs_self6 <= main_basesoc_wishbone_cti;
        end
    endcase
end
always @(*) begin
    builder_comb_rhs_self7 <= 2'd0;
    case (builder_grant)
        1'd0: begin
            builder_comb_rhs_self7 <= main_cpu_ibus_ibus_bte;
        end
        1'd1: begin
            builder_comb_rhs_self7 <= main_cpu_dbus_dbus_bte;
        end
        default: begin
            builder_comb_rhs_self7 <= main_basesoc_wishbone_bte;
        end
    endcase
end
always @(*) begin
    builder_comb_rhs_self8 <= 1'd0;
    case (main_sdram_choose_cmd_grant)
        1'd0: begin
            builder_comb_rhs_self8 <= main_sdram_choose_cmd_valids[0];
        end
        1'd1: begin
            builder_comb_rhs_self8 <= main_sdram_choose_cmd_valids[1];
        end
        2'd2: begin
            builder_comb_rhs_self8 <= main_sdram_choose_cmd_valids[2];
        end
        default: begin
            builder_comb_rhs_self8 <= main_sdram_choose_cmd_valids[3];
        end
    endcase
end
always @(*) begin
    builder_comb_rhs_self9 <= 13'd0;
    case (main_sdram_choose_cmd_grant)
        1'd0: begin
            builder_comb_rhs_self9 <= main_sdram_bankmachine0_cmd_payload_a;
        end
        1'd1: begin
            builder_comb_rhs_self9 <= main_sdram_bankmachine1_cmd_payload_a;
        end
        2'd2: begin
            builder_comb_rhs_self9 <= main_sdram_bankmachine2_cmd_payload_a;
        end
        default: begin
            builder_comb_rhs_self9 <= main_sdram_bankmachine3_cmd_payload_a;
        end
    endcase
end
always @(*) begin
    builder_comb_rhs_self10 <= 2'd0;
    case (main_sdram_choose_cmd_grant)
        1'd0: begin
            builder_comb_rhs_self10 <= main_sdram_bankmachine0_cmd_payload_ba;
        end
        1'd1: begin
            builder_comb_rhs_self10 <= main_sdram_bankmachine1_cmd_payload_ba;
        end
        2'd2: begin
            builder_comb_rhs_self10 <= main_sdram_bankmachine2_cmd_payload_ba;
        end
        default: begin
            builder_comb_rhs_self10 <= main_sdram_bankmachine3_cmd_payload_ba;
        end
    endcase
end
always @(*) begin
    builder_comb_rhs_self11 <= 1'd0;
    case (main_sdram_choose_cmd_grant)
        1'd0: begin
            builder_comb_rhs_self11 <= main_sdram_bankmachine0_cmd_payload_is_read;
        end
        1'd1: begin
            builder_comb_rhs_self11 <= main_sdram_bankmachine1_cmd_payload_is_read;
        end
        2'd2: begin
            builder_comb_rhs_self11 <= main_sdram_bankmachine2_cmd_payload_is_read;
        end
        default: begin
            builder_comb_rhs_self11 <= main_sdram_bankmachine3_cmd_payload_is_read;
        end
    endcase
end
always @(*) begin
    builder_comb_rhs_self12 <= 1'd0;
    case (main_sdram_choose_cmd_grant)
        1'd0: begin
            builder_comb_rhs_self12 <= main_sdram_bankmachine0_cmd_payload_is_write;
        end
        1'd1: begin
            builder_comb_rhs_self12 <= main_sdram_bankmachine1_cmd_payload_is_write;
        end
        2'd2: begin
            builder_comb_rhs_self12 <= main_sdram_bankmachine2_cmd_payload_is_write;
        end
        default: begin
            builder_comb_rhs_self12 <= main_sdram_bankmachine3_cmd_payload_is_write;
        end
    endcase
end
always @(*) begin
    builder_comb_rhs_self13 <= 1'd0;
    case (main_sdram_choose_cmd_grant)
        1'd0: begin
            builder_comb_rhs_self13 <= main_sdram_bankmachine0_cmd_payload_is_cmd;
        end
        1'd1: begin
            builder_comb_rhs_self13 <= main_sdram_bankmachine1_cmd_payload_is_cmd;
        end
        2'd2: begin
            builder_comb_rhs_self13 <= main_sdram_bankmachine2_cmd_payload_is_cmd;
        end
        default: begin
            builder_comb_rhs_self13 <= main_sdram_bankmachine3_cmd_payload_is_cmd;
        end
    endcase
end
always @(*) begin
    builder_comb_t_self0 <= 1'd0;
    case (main_sdram_choose_cmd_grant)
        1'd0: begin
            builder_comb_t_self0 <= main_sdram_bankmachine0_cmd_payload_cas;
        end
        1'd1: begin
            builder_comb_t_self0 <= main_sdram_bankmachine1_cmd_payload_cas;
        end
        2'd2: begin
            builder_comb_t_self0 <= main_sdram_bankmachine2_cmd_payload_cas;
        end
        default: begin
            builder_comb_t_self0 <= main_sdram_bankmachine3_cmd_payload_cas;
        end
    endcase
end
always @(*) begin
    builder_comb_t_self1 <= 1'd0;
    case (main_sdram_choose_cmd_grant)
        1'd0: begin
            builder_comb_t_self1 <= main_sdram_bankmachine0_cmd_payload_ras;
        end
        1'd1: begin
            builder_comb_t_self1 <= main_sdram_bankmachine1_cmd_payload_ras;
        end
        2'd2: begin
            builder_comb_t_self1 <= main_sdram_bankmachine2_cmd_payload_ras;
        end
        default: begin
            builder_comb_t_self1 <= main_sdram_bankmachine3_cmd_payload_ras;
        end
    endcase
end
always @(*) begin
    builder_comb_t_self2 <= 1'd0;
    case (main_sdram_choose_cmd_grant)
        1'd0: begin
            builder_comb_t_self2 <= main_sdram_bankmachine0_cmd_payload_we;
        end
        1'd1: begin
            builder_comb_t_self2 <= main_sdram_bankmachine1_cmd_payload_we;
        end
        2'd2: begin
            builder_comb_t_self2 <= main_sdram_bankmachine2_cmd_payload_we;
        end
        default: begin
            builder_comb_t_self2 <= main_sdram_bankmachine3_cmd_payload_we;
        end
    endcase
end
always @(*) begin
    builder_comb_rhs_self14 <= 1'd0;
    case (main_sdram_choose_req_grant)
        1'd0: begin
            builder_comb_rhs_self14 <= main_sdram_choose_req_valids[0];
        end
        1'd1: begin
            builder_comb_rhs_self14 <= main_sdram_choose_req_valids[1];
        end
        2'd2: begin
            builder_comb_rhs_self14 <= main_sdram_choose_req_valids[2];
        end
        default: begin
            builder_comb_rhs_self14 <= main_sdram_choose_req_valids[3];
        end
    endcase
end
always @(*) begin
    builder_comb_rhs_self15 <= 13'd0;
    case (main_sdram_choose_req_grant)
        1'd0: begin
            builder_comb_rhs_self15 <= main_sdram_bankmachine0_cmd_payload_a;
        end
        1'd1: begin
            builder_comb_rhs_self15 <= main_sdram_bankmachine1_cmd_payload_a;
        end
        2'd2: begin
            builder_comb_rhs_self15 <= main_sdram_bankmachine2_cmd_payload_a;
        end
        default: begin
            builder_comb_rhs_self15 <= main_sdram_bankmachine3_cmd_payload_a;
        end
    endcase
end
always @(*) begin
    builder_comb_rhs_self16 <= 2'd0;
    case (main_sdram_choose_req_grant)
        1'd0: begin
            builder_comb_rhs_self16 <= main_sdram_bankmachine0_cmd_payload_ba;
        end
        1'd1: begin
            builder_comb_rhs_self16 <= main_sdram_bankmachine1_cmd_payload_ba;
        end
        2'd2: begin
            builder_comb_rhs_self16 <= main_sdram_bankmachine2_cmd_payload_ba;
        end
        default: begin
            builder_comb_rhs_self16 <= main_sdram_bankmachine3_cmd_payload_ba;
        end
    endcase
end
always @(*) begin
    builder_comb_rhs_self17 <= 1'd0;
    case (main_sdram_choose_req_grant)
        1'd0: begin
            builder_comb_rhs_self17 <= main_sdram_bankmachine0_cmd_payload_is_read;
        end
        1'd1: begin
            builder_comb_rhs_self17 <= main_sdram_bankmachine1_cmd_payload_is_read;
        end
        2'd2: begin
            builder_comb_rhs_self17 <= main_sdram_bankmachine2_cmd_payload_is_read;
        end
        default: begin
            builder_comb_rhs_self17 <= main_sdram_bankmachine3_cmd_payload_is_read;
        end
    endcase
end
always @(*) begin
    builder_comb_rhs_self18 <= 1'd0;
    case (main_sdram_choose_req_grant)
        1'd0: begin
            builder_comb_rhs_self18 <= main_sdram_bankmachine0_cmd_payload_is_write;
        end
        1'd1: begin
            builder_comb_rhs_self18 <= main_sdram_bankmachine1_cmd_payload_is_write;
        end
        2'd2: begin
            builder_comb_rhs_self18 <= main_sdram_bankmachine2_cmd_payload_is_write;
        end
        default: begin
            builder_comb_rhs_self18 <= main_sdram_bankmachine3_cmd_payload_is_write;
        end
    endcase
end
always @(*) begin
    builder_comb_rhs_self19 <= 1'd0;
    case (main_sdram_choose_req_grant)
        1'd0: begin
            builder_comb_rhs_self19 <= main_sdram_bankmachine0_cmd_payload_is_cmd;
        end
        1'd1: begin
            builder_comb_rhs_self19 <= main_sdram_bankmachine1_cmd_payload_is_cmd;
        end
        2'd2: begin
            builder_comb_rhs_self19 <= main_sdram_bankmachine2_cmd_payload_is_cmd;
        end
        default: begin
            builder_comb_rhs_self19 <= main_sdram_bankmachine3_cmd_payload_is_cmd;
        end
    endcase
end
always @(*) begin
    builder_comb_t_self3 <= 1'd0;
    case (main_sdram_choose_req_grant)
        1'd0: begin
            builder_comb_t_self3 <= main_sdram_bankmachine0_cmd_payload_cas;
        end
        1'd1: begin
            builder_comb_t_self3 <= main_sdram_bankmachine1_cmd_payload_cas;
        end
        2'd2: begin
            builder_comb_t_self3 <= main_sdram_bankmachine2_cmd_payload_cas;
        end
        default: begin
            builder_comb_t_self3 <= main_sdram_bankmachine3_cmd_payload_cas;
        end
    endcase
end
always @(*) begin
    builder_comb_t_self4 <= 1'd0;
    case (main_sdram_choose_req_grant)
        1'd0: begin
            builder_comb_t_self4 <= main_sdram_bankmachine0_cmd_payload_ras;
        end
        1'd1: begin
            builder_comb_t_self4 <= main_sdram_bankmachine1_cmd_payload_ras;
        end
        2'd2: begin
            builder_comb_t_self4 <= main_sdram_bankmachine2_cmd_payload_ras;
        end
        default: begin
            builder_comb_t_self4 <= main_sdram_bankmachine3_cmd_payload_ras;
        end
    endcase
end
always @(*) begin
    builder_comb_t_self5 <= 1'd0;
    case (main_sdram_choose_req_grant)
        1'd0: begin
            builder_comb_t_self5 <= main_sdram_bankmachine0_cmd_payload_we;
        end
        1'd1: begin
            builder_comb_t_self5 <= main_sdram_bankmachine1_cmd_payload_we;
        end
        2'd2: begin
            builder_comb_t_self5 <= main_sdram_bankmachine2_cmd_payload_we;
        end
        default: begin
            builder_comb_t_self5 <= main_sdram_bankmachine3_cmd_payload_we;
        end
    endcase
end
always @(*) begin
    builder_comb_rhs_self20 <= 22'd0;
    case (builder_basesoc_litedramcore_roundrobin0_grant)
        default: begin
            builder_comb_rhs_self20 <= {main_port_cmd_payload_addr[23:11], main_port_cmd_payload_addr[8:0]};
        end
    endcase
end
always @(*) begin
    builder_comb_rhs_self21 <= 1'd0;
    case (builder_basesoc_litedramcore_roundrobin0_grant)
        default: begin
            builder_comb_rhs_self21 <= main_port_cmd_payload_we;
        end
    endcase
end
always @(*) begin
    builder_comb_rhs_self22 <= 1'd0;
    case (builder_basesoc_litedramcore_roundrobin0_grant)
        default: begin
            builder_comb_rhs_self22 <= (((main_port_cmd_payload_addr[10:9] == 1'd0) & (~(((builder_basesoc_litedramcore_locked0 | (main_sdram_interface_bank1_lock & (builder_basesoc_litedramcore_roundrobin1_grant == 1'd0))) | (main_sdram_interface_bank2_lock & (builder_basesoc_litedramcore_roundrobin2_grant == 1'd0))) | (main_sdram_interface_bank3_lock & (builder_basesoc_litedramcore_roundrobin3_grant == 1'd0))))) & main_port_cmd_valid);
        end
    endcase
end
always @(*) begin
    builder_comb_rhs_self23 <= 22'd0;
    case (builder_basesoc_litedramcore_roundrobin1_grant)
        default: begin
            builder_comb_rhs_self23 <= {main_port_cmd_payload_addr[23:11], main_port_cmd_payload_addr[8:0]};
        end
    endcase
end
always @(*) begin
    builder_comb_rhs_self24 <= 1'd0;
    case (builder_basesoc_litedramcore_roundrobin1_grant)
        default: begin
            builder_comb_rhs_self24 <= main_port_cmd_payload_we;
        end
    endcase
end
always @(*) begin
    builder_comb_rhs_self25 <= 1'd0;
    case (builder_basesoc_litedramcore_roundrobin1_grant)
        default: begin
            builder_comb_rhs_self25 <= (((main_port_cmd_payload_addr[10:9] == 1'd1) & (~(((builder_basesoc_litedramcore_locked1 | (main_sdram_interface_bank0_lock & (builder_basesoc_litedramcore_roundrobin0_grant == 1'd0))) | (main_sdram_interface_bank2_lock & (builder_basesoc_litedramcore_roundrobin2_grant == 1'd0))) | (main_sdram_interface_bank3_lock & (builder_basesoc_litedramcore_roundrobin3_grant == 1'd0))))) & main_port_cmd_valid);
        end
    endcase
end
always @(*) begin
    builder_comb_rhs_self26 <= 22'd0;
    case (builder_basesoc_litedramcore_roundrobin2_grant)
        default: begin
            builder_comb_rhs_self26 <= {main_port_cmd_payload_addr[23:11], main_port_cmd_payload_addr[8:0]};
        end
    endcase
end
always @(*) begin
    builder_comb_rhs_self27 <= 1'd0;
    case (builder_basesoc_litedramcore_roundrobin2_grant)
        default: begin
            builder_comb_rhs_self27 <= main_port_cmd_payload_we;
        end
    endcase
end
always @(*) begin
    builder_comb_rhs_self28 <= 1'd0;
    case (builder_basesoc_litedramcore_roundrobin2_grant)
        default: begin
            builder_comb_rhs_self28 <= (((main_port_cmd_payload_addr[10:9] == 2'd2) & (~(((builder_basesoc_litedramcore_locked2 | (main_sdram_interface_bank0_lock & (builder_basesoc_litedramcore_roundrobin0_grant == 1'd0))) | (main_sdram_interface_bank1_lock & (builder_basesoc_litedramcore_roundrobin1_grant == 1'd0))) | (main_sdram_interface_bank3_lock & (builder_basesoc_litedramcore_roundrobin3_grant == 1'd0))))) & main_port_cmd_valid);
        end
    endcase
end
always @(*) begin
    builder_comb_rhs_self29 <= 22'd0;
    case (builder_basesoc_litedramcore_roundrobin3_grant)
        default: begin
            builder_comb_rhs_self29 <= {main_port_cmd_payload_addr[23:11], main_port_cmd_payload_addr[8:0]};
        end
    endcase
end
always @(*) begin
    builder_comb_rhs_self30 <= 1'd0;
    case (builder_basesoc_litedramcore_roundrobin3_grant)
        default: begin
            builder_comb_rhs_self30 <= main_port_cmd_payload_we;
        end
    endcase
end
always @(*) begin
    builder_comb_rhs_self31 <= 1'd0;
    case (builder_basesoc_litedramcore_roundrobin3_grant)
        default: begin
            builder_comb_rhs_self31 <= (((main_port_cmd_payload_addr[10:9] == 2'd3) & (~(((builder_basesoc_litedramcore_locked3 | (main_sdram_interface_bank0_lock & (builder_basesoc_litedramcore_roundrobin0_grant == 1'd0))) | (main_sdram_interface_bank1_lock & (builder_basesoc_litedramcore_roundrobin1_grant == 1'd0))) | (main_sdram_interface_bank2_lock & (builder_basesoc_litedramcore_roundrobin2_grant == 1'd0))))) & main_port_cmd_valid);
        end
    endcase
end
always @(*) begin
    builder_sync_rhs_self0 <= 2'd0;
    case (main_sdram_steerer_sel)
        1'd0: begin
            builder_sync_rhs_self0 <= main_sdram_nop_ba[1:0];
        end
        1'd1: begin
            builder_sync_rhs_self0 <= main_sdram_choose_req_cmd_payload_ba[1:0];
        end
        2'd2: begin
            builder_sync_rhs_self0 <= main_sdram_choose_req_cmd_payload_ba[1:0];
        end
        default: begin
            builder_sync_rhs_self0 <= main_sdram_cmd_payload_ba[1:0];
        end
    endcase
end
always @(*) begin
    builder_sync_rhs_self1 <= 13'd0;
    case (main_sdram_steerer_sel)
        1'd0: begin
            builder_sync_rhs_self1 <= main_sdram_nop_a;
        end
        1'd1: begin
            builder_sync_rhs_self1 <= main_sdram_choose_req_cmd_payload_a;
        end
        2'd2: begin
            builder_sync_rhs_self1 <= main_sdram_choose_req_cmd_payload_a;
        end
        default: begin
            builder_sync_rhs_self1 <= main_sdram_cmd_payload_a;
        end
    endcase
end
always @(*) begin
    builder_sync_rhs_self2 <= 1'd0;
    case (main_sdram_steerer_sel)
        1'd0: begin
            builder_sync_rhs_self2 <= 1'd0;
        end
        1'd1: begin
            builder_sync_rhs_self2 <= ((main_sdram_choose_req_cmd_valid & main_sdram_choose_req_cmd_ready) & main_sdram_choose_req_cmd_payload_cas);
        end
        2'd2: begin
            builder_sync_rhs_self2 <= ((main_sdram_choose_req_cmd_valid & main_sdram_choose_req_cmd_ready) & main_sdram_choose_req_cmd_payload_cas);
        end
        default: begin
            builder_sync_rhs_self2 <= ((main_sdram_cmd_valid & main_sdram_cmd_ready) & main_sdram_cmd_payload_cas);
        end
    endcase
end
always @(*) begin
    builder_sync_rhs_self3 <= 1'd0;
    case (main_sdram_steerer_sel)
        1'd0: begin
            builder_sync_rhs_self3 <= 1'd0;
        end
        1'd1: begin
            builder_sync_rhs_self3 <= ((main_sdram_choose_req_cmd_valid & main_sdram_choose_req_cmd_ready) & main_sdram_choose_req_cmd_payload_ras);
        end
        2'd2: begin
            builder_sync_rhs_self3 <= ((main_sdram_choose_req_cmd_valid & main_sdram_choose_req_cmd_ready) & main_sdram_choose_req_cmd_payload_ras);
        end
        default: begin
            builder_sync_rhs_self3 <= ((main_sdram_cmd_valid & main_sdram_cmd_ready) & main_sdram_cmd_payload_ras);
        end
    endcase
end
always @(*) begin
    builder_sync_rhs_self4 <= 1'd0;
    case (main_sdram_steerer_sel)
        1'd0: begin
            builder_sync_rhs_self4 <= 1'd0;
        end
        1'd1: begin
            builder_sync_rhs_self4 <= ((main_sdram_choose_req_cmd_valid & main_sdram_choose_req_cmd_ready) & main_sdram_choose_req_cmd_payload_we);
        end
        2'd2: begin
            builder_sync_rhs_self4 <= ((main_sdram_choose_req_cmd_valid & main_sdram_choose_req_cmd_ready) & main_sdram_choose_req_cmd_payload_we);
        end
        default: begin
            builder_sync_rhs_self4 <= ((main_sdram_cmd_valid & main_sdram_cmd_ready) & main_sdram_cmd_payload_we);
        end
    endcase
end
always @(*) begin
    builder_sync_rhs_self5 <= 1'd0;
    case (main_sdram_steerer_sel)
        1'd0: begin
            builder_sync_rhs_self5 <= 1'd0;
        end
        1'd1: begin
            builder_sync_rhs_self5 <= ((main_sdram_choose_req_cmd_valid & main_sdram_choose_req_cmd_ready) & main_sdram_choose_req_cmd_payload_is_read);
        end
        2'd2: begin
            builder_sync_rhs_self5 <= ((main_sdram_choose_req_cmd_valid & main_sdram_choose_req_cmd_ready) & main_sdram_choose_req_cmd_payload_is_read);
        end
        default: begin
            builder_sync_rhs_self5 <= ((main_sdram_cmd_valid & main_sdram_cmd_ready) & main_sdram_cmd_payload_is_read);
        end
    endcase
end
always @(*) begin
    builder_sync_rhs_self6 <= 1'd0;
    case (main_sdram_steerer_sel)
        1'd0: begin
            builder_sync_rhs_self6 <= 1'd0;
        end
        1'd1: begin
            builder_sync_rhs_self6 <= ((main_sdram_choose_req_cmd_valid & main_sdram_choose_req_cmd_ready) & main_sdram_choose_req_cmd_payload_is_write);
        end
        2'd2: begin
            builder_sync_rhs_self6 <= ((main_sdram_choose_req_cmd_valid & main_sdram_choose_req_cmd_ready) & main_sdram_choose_req_cmd_payload_is_write);
        end
        default: begin
            builder_sync_rhs_self6 <= ((main_sdram_cmd_valid & main_sdram_cmd_ready) & main_sdram_cmd_payload_is_write);
        end
    endcase
end
always @(*) begin
    builder_sync_f_self <= 1'd0;
    case (basesoc_mosi_sel)
        1'd0: begin
            builder_sync_f_self <= basesoc_mosi_data[0];
        end
        1'd1: begin
            builder_sync_f_self <= basesoc_mosi_data[1];
        end
        2'd2: begin
            builder_sync_f_self <= basesoc_mosi_data[2];
        end
        2'd3: begin
            builder_sync_f_self <= basesoc_mosi_data[3];
        end
        3'd4: begin
            builder_sync_f_self <= basesoc_mosi_data[4];
        end
        3'd5: begin
            builder_sync_f_self <= basesoc_mosi_data[5];
        end
        3'd6: begin
            builder_sync_f_self <= basesoc_mosi_data[6];
        end
        default: begin
            builder_sync_f_self <= basesoc_mosi_data[7];
        end
    endcase
end
assign main_basesoc_rx_rx = builder_regs1;
assign sdrio_clk = sys_clk;
assign sdrio_clk_1 = sys_clk;
assign sdrio_clk_2 = sys_clk;
assign sdrio_clk_3 = sys_clk;
assign sdrio_clk_4 = sys_clk;
assign sdrio_clk_5 = sys_clk;
assign sdrio_clk_6 = sys_clk;
assign sdrio_clk_7 = sys_clk;
assign sdrio_clk_8 = sys_clk;
assign sdrio_clk_9 = sys_clk;
assign sdrio_clk_10 = sys_clk;
assign sdrio_clk_11 = sys_clk;
assign sdrio_clk_12 = sys_clk;
assign sdrio_clk_13 = sys_clk;
assign sdrio_clk_14 = sys_clk;
assign sdrio_clk_15 = sys_clk;


//------------------------------------------------------------------------------
// Synchronous Logic
//------------------------------------------------------------------------------

always @(posedge sdrio_clk) begin
    builder_inferedsdrtristate0_oe <= main_dfi_p0_wrdata_en;
    builder_inferedsdrtristate1_oe <= main_dfi_p0_wrdata_en;
    builder_inferedsdrtristate2_oe <= main_dfi_p0_wrdata_en;
    builder_inferedsdrtristate3_oe <= main_dfi_p0_wrdata_en;
    builder_inferedsdrtristate4_oe <= main_dfi_p0_wrdata_en;
    builder_inferedsdrtristate5_oe <= main_dfi_p0_wrdata_en;
    builder_inferedsdrtristate6_oe <= main_dfi_p0_wrdata_en;
    builder_inferedsdrtristate7_oe <= main_dfi_p0_wrdata_en;
    builder_inferedsdrtristate8_oe <= main_dfi_p0_wrdata_en;
    builder_inferedsdrtristate9_oe <= main_dfi_p0_wrdata_en;
    builder_inferedsdrtristate10_oe <= main_dfi_p0_wrdata_en;
    builder_inferedsdrtristate11_oe <= main_dfi_p0_wrdata_en;
    builder_inferedsdrtristate12_oe <= main_dfi_p0_wrdata_en;
    builder_inferedsdrtristate13_oe <= main_dfi_p0_wrdata_en;
    builder_inferedsdrtristate14_oe <= main_dfi_p0_wrdata_en;
    builder_inferedsdrtristate15_oe <= main_dfi_p0_wrdata_en;
end

always @(posedge sys_clk) begin
    case (builder_grant)
        1'd0: begin
            if ((~builder_request[0])) begin
                if (builder_request[1]) begin
                    builder_grant <= 1'd1;
                end else begin
                    if (builder_request[2]) begin
                        builder_grant <= 2'd2;
                    end
                end
            end
        end
        1'd1: begin
            if ((~builder_request[1])) begin
                if (builder_request[2]) begin
                    builder_grant <= 2'd2;
                end else begin
                    if (builder_request[0]) begin
                        builder_grant <= 1'd0;
                    end
                end
            end
        end
        2'd2: begin
            if ((~builder_request[2])) begin
                if (builder_request[0]) begin
                    builder_grant <= 1'd0;
                end else begin
                    if (builder_request[1]) begin
                        builder_grant <= 1'd1;
                    end
                end
            end
        end
    endcase
    builder_slaves <= builder_master;
    if (builder_wait) begin
        if ((~builder_done)) begin
            builder_count <= (builder_count - 1'd1);
        end
    end else begin
        builder_count <= 20'd1000000;
    end
    if ((main_bus_errors != 32'd4294967295)) begin
        if (main_bus_error) begin
            main_bus_errors <= (main_bus_errors + 1'd1);
        end
    end
    main_cpu_vexriscv_debug_bus_dat_r <= main_cpu_vexriscv_o_rsp_data;
    main_cpu_vexriscv_debug_reset <= (main_cpu_vexriscv_reset_debug_logic | sys_rst);
    if (((((main_cpu_vexriscv_debug_bus_stb & main_cpu_vexriscv_debug_bus_cyc) & (~main_cpu_vexriscv_transfer_in_progress)) & (~main_cpu_vexriscv_transfer_complete)) & (~main_cpu_vexriscv_transfer_wait_for_ack))) begin
        main_cpu_vexriscv_i_cmd_payload_data <= main_cpu_vexriscv_debug_bus_dat_w;
        main_cpu_vexriscv_i_cmd_payload_address <= ((main_cpu_vexriscv_debug_bus_adr[5:0] <<< 2'd2) | 1'd0);
        main_cpu_vexriscv_i_cmd_payload_wr <= main_cpu_vexriscv_debug_bus_we;
        main_cpu_vexriscv_i_cmd_valid <= 1'd1;
        main_cpu_vexriscv_transfer_in_progress <= 1'd1;
        main_cpu_vexriscv_transfer_complete <= 1'd0;
        main_cpu_vexriscv_debug_bus_ack <= 1'd0;
    end else begin
        if (main_cpu_vexriscv_transfer_in_progress) begin
            if (main_cpu_vexriscv_o_cmd_ready) begin
                main_cpu_vexriscv_i_cmd_valid <= 1'd0;
                main_cpu_vexriscv_i_cmd_payload_wr <= 1'd0;
                main_cpu_vexriscv_transfer_complete <= 1'd1;
                main_cpu_vexriscv_transfer_in_progress <= 1'd0;
            end
        end else begin
            if (main_cpu_vexriscv_transfer_complete) begin
                main_cpu_vexriscv_transfer_complete <= 1'd0;
                main_cpu_vexriscv_debug_bus_ack <= 1'd1;
                main_cpu_vexriscv_transfer_wait_for_ack <= 1'd1;
            end else begin
                if ((main_cpu_vexriscv_transfer_wait_for_ack & (~(main_cpu_vexriscv_debug_bus_stb & main_cpu_vexriscv_debug_bus_cyc)))) begin
                    main_cpu_vexriscv_transfer_wait_for_ack <= 1'd0;
                    main_cpu_vexriscv_debug_bus_ack <= 1'd0;
                end
            end
        end
    end
    if (main_cpu_vexriscv_o_resetOut) begin
        if ((main_cpu_ibus_ibus_cyc & main_cpu_ibus_ibus_stb)) begin
            main_cpu_vexriscv_ibus_err <= 1'd1;
        end else begin
            main_cpu_vexriscv_ibus_err <= 1'd0;
        end
        if ((main_cpu_dbus_dbus_cyc & main_cpu_dbus_dbus_stb)) begin
            main_cpu_vexriscv_dbus_err <= 1'd1;
        end else begin
            main_cpu_vexriscv_dbus_err <= 1'd0;
        end
        main_cpu_vexriscv_reset_debug_logic <= 1'd1;
    end else begin
        main_cpu_vexriscv_reset_debug_logic <= 1'd0;
    end
    main_basesoc_ram_bus_ack <= 1'd0;
    if (((main_basesoc_ram_bus_cyc & main_basesoc_ram_bus_stb) & ((~main_basesoc_ram_bus_ack) | main_basesoc_adr_burst))) begin
        main_basesoc_ram_bus_ack <= 1'd1;
    end
    main_ram_bus_ram_bus_ack <= 1'd0;
    if (((main_ram_bus_ram_bus_cyc & main_ram_bus_ram_bus_stb) & ((~main_ram_bus_ram_bus_ack) | main_ram_adr_burst))) begin
        main_ram_bus_ram_bus_ack <= 1'd1;
    end
    {main_basesoc_tx_tick, main_basesoc_tx_phase} <= 24'd12369505;
    if (main_basesoc_tx_enable) begin
        {main_basesoc_tx_tick, main_basesoc_tx_phase} <= (main_basesoc_tx_phase + 24'd12369505);
    end
    builder_basesoc_rs232phytx_state <= builder_basesoc_rs232phytx_next_state;
    if (main_basesoc_tx_count_rs232phytx_next_value_ce0) begin
        main_basesoc_tx_count <= main_basesoc_tx_count_rs232phytx_next_value0;
    end
    if (main_basesoc_serial_tx_rs232phytx_next_value_ce1) begin
        serial_tx <= main_basesoc_serial_tx_rs232phytx_next_value1;
    end
    if (main_basesoc_tx_data_rs232phytx_next_value_ce2) begin
        main_basesoc_tx_data <= main_basesoc_tx_data_rs232phytx_next_value2;
    end
    main_basesoc_rx_rx_d <= main_basesoc_rx_rx;
    {main_basesoc_rx_tick, main_basesoc_rx_phase} <= 32'd2147483648;
    if (main_basesoc_rx_enable) begin
        {main_basesoc_rx_tick, main_basesoc_rx_phase} <= (main_basesoc_rx_phase + 24'd12369505);
    end
    builder_basesoc_rs232phyrx_state <= builder_basesoc_rs232phyrx_next_state;
    if (main_basesoc_rx_count_rs232phyrx_next_value_ce0) begin
        main_basesoc_rx_count <= main_basesoc_rx_count_rs232phyrx_next_value0;
    end
    if (main_basesoc_rx_data_rs232phyrx_next_value_ce1) begin
        main_basesoc_rx_data <= main_basesoc_rx_data_rs232phyrx_next_value1;
    end
    builder_basesoc_uartbone_state <= builder_basesoc_uartbone_next_state;
    if (main_basesoc_data_bytes_count_uartbone_next_value_ce0) begin
        main_basesoc_data_bytes_count <= main_basesoc_data_bytes_count_uartbone_next_value0;
    end
    if (main_basesoc_addr_bytes_count_uartbone_next_value_ce1) begin
        main_basesoc_addr_bytes_count <= main_basesoc_addr_bytes_count_uartbone_next_value1;
    end
    if (main_basesoc_words_count_uartbone_next_value_ce2) begin
        main_basesoc_words_count <= main_basesoc_words_count_uartbone_next_value2;
    end
    if (main_basesoc_cmd_uartbone_next_value_ce3) begin
        main_basesoc_cmd <= main_basesoc_cmd_uartbone_next_value3;
    end
    if (main_basesoc_length_uartbone_next_value_ce4) begin
        main_basesoc_length <= main_basesoc_length_uartbone_next_value4;
    end
    if (main_basesoc_address_uartbone_next_value_ce5) begin
        main_basesoc_address <= main_basesoc_address_uartbone_next_value5;
    end
    if (main_basesoc_incr_uartbone_next_value_ce6) begin
        main_basesoc_incr <= main_basesoc_incr_uartbone_next_value6;
    end
    if (main_basesoc_data_uartbone_next_value_ce7) begin
        main_basesoc_data <= main_basesoc_data_uartbone_next_value7;
    end
    if (main_basesoc_reset) begin
        main_basesoc_incr <= 1'd0;
        builder_basesoc_uartbone_state <= 3'd0;
    end
    if (main_basesoc_wait) begin
        if ((~main_basesoc_done)) begin
            main_basesoc_count <= (main_basesoc_count - 1'd1);
        end
    end else begin
        main_basesoc_count <= 22'd4000000;
    end
    if (main_uartcrossover_tx_clear) begin
        main_uartcrossover_tx_pending <= 1'd0;
    end
    main_uartcrossover_tx_trigger_d <= main_uartcrossover_tx_trigger;
    if ((main_uartcrossover_tx_trigger & (~main_uartcrossover_tx_trigger_d))) begin
        main_uartcrossover_tx_pending <= 1'd1;
    end
    if (main_uartcrossover_rx_clear) begin
        main_uartcrossover_rx_pending <= 1'd0;
    end
    main_uartcrossover_rx_trigger_d <= main_uartcrossover_rx_trigger;
    if ((main_uartcrossover_rx_trigger & (~main_uartcrossover_rx_trigger_d))) begin
        main_uartcrossover_rx_pending <= 1'd1;
    end
    if (main_uartcrossover_tx_fifo_syncfifo_re) begin
        main_uartcrossover_tx_fifo_readable <= 1'd1;
    end else begin
        if (main_uartcrossover_tx_fifo_re) begin
            main_uartcrossover_tx_fifo_readable <= 1'd0;
        end
    end
    if (((main_uartcrossover_tx_fifo_syncfifo_we & main_uartcrossover_tx_fifo_syncfifo_writable) & (~main_uartcrossover_tx_fifo_replace))) begin
        main_uartcrossover_tx_fifo_produce <= (main_uartcrossover_tx_fifo_produce + 1'd1);
    end
    if (main_uartcrossover_tx_fifo_do_read) begin
        main_uartcrossover_tx_fifo_consume <= (main_uartcrossover_tx_fifo_consume + 1'd1);
    end
    if (((main_uartcrossover_tx_fifo_syncfifo_we & main_uartcrossover_tx_fifo_syncfifo_writable) & (~main_uartcrossover_tx_fifo_replace))) begin
        if ((~main_uartcrossover_tx_fifo_do_read)) begin
            main_uartcrossover_tx_fifo_level0 <= (main_uartcrossover_tx_fifo_level0 + 1'd1);
        end
    end else begin
        if (main_uartcrossover_tx_fifo_do_read) begin
            main_uartcrossover_tx_fifo_level0 <= (main_uartcrossover_tx_fifo_level0 - 1'd1);
        end
    end
    if (main_uartcrossover_rx_fifo_syncfifo_re) begin
        main_uartcrossover_rx_fifo_readable <= 1'd1;
    end else begin
        if (main_uartcrossover_rx_fifo_re) begin
            main_uartcrossover_rx_fifo_readable <= 1'd0;
        end
    end
    if (((main_uartcrossover_rx_fifo_syncfifo_we & main_uartcrossover_rx_fifo_syncfifo_writable) & (~main_uartcrossover_rx_fifo_replace))) begin
        main_uartcrossover_rx_fifo_produce <= (main_uartcrossover_rx_fifo_produce + 1'd1);
    end
    if (main_uartcrossover_rx_fifo_do_read) begin
        main_uartcrossover_rx_fifo_consume <= (main_uartcrossover_rx_fifo_consume + 1'd1);
    end
    if (((main_uartcrossover_rx_fifo_syncfifo_we & main_uartcrossover_rx_fifo_syncfifo_writable) & (~main_uartcrossover_rx_fifo_replace))) begin
        if ((~main_uartcrossover_rx_fifo_do_read)) begin
            main_uartcrossover_rx_fifo_level0 <= (main_uartcrossover_rx_fifo_level0 + 1'd1);
        end
    end else begin
        if (main_uartcrossover_rx_fifo_do_read) begin
            main_uartcrossover_rx_fifo_level0 <= (main_uartcrossover_rx_fifo_level0 - 1'd1);
        end
    end
    if (main_xover_tx_clear) begin
        main_xover_tx_pending <= 1'd0;
    end
    main_xover_tx_trigger_d <= main_xover_tx_trigger;
    if ((main_xover_tx_trigger & (~main_xover_tx_trigger_d))) begin
        main_xover_tx_pending <= 1'd1;
    end
    if (main_xover_rx_clear) begin
        main_xover_rx_pending <= 1'd0;
    end
    main_xover_rx_trigger_d <= main_xover_rx_trigger;
    if ((main_xover_rx_trigger & (~main_xover_rx_trigger_d))) begin
        main_xover_rx_pending <= 1'd1;
    end
    if (((~main_xover_pipe_valid_source_valid) | main_xover_pipe_valid_source_ready)) begin
        main_xover_pipe_valid_source_valid <= main_xover_pipe_valid_sink_valid;
        main_xover_pipe_valid_source_first <= main_xover_pipe_valid_sink_first;
        main_xover_pipe_valid_source_last <= main_xover_pipe_valid_sink_last;
        main_xover_pipe_valid_source_payload_data <= main_xover_pipe_valid_sink_payload_data;
    end
    if (main_xover_rx_fifo_syncfifo_re) begin
        main_xover_rx_fifo_readable <= 1'd1;
    end else begin
        if (main_xover_rx_fifo_re) begin
            main_xover_rx_fifo_readable <= 1'd0;
        end
    end
    if (((main_xover_rx_fifo_syncfifo_we & main_xover_rx_fifo_syncfifo_writable) & (~main_xover_rx_fifo_replace))) begin
        main_xover_rx_fifo_produce <= (main_xover_rx_fifo_produce + 1'd1);
    end
    if (main_xover_rx_fifo_do_read) begin
        main_xover_rx_fifo_consume <= (main_xover_rx_fifo_consume + 1'd1);
    end
    if (((main_xover_rx_fifo_syncfifo_we & main_xover_rx_fifo_syncfifo_writable) & (~main_xover_rx_fifo_replace))) begin
        if ((~main_xover_rx_fifo_do_read)) begin
            main_xover_rx_fifo_level0 <= (main_xover_rx_fifo_level0 + 1'd1);
        end
    end else begin
        if (main_xover_rx_fifo_do_read) begin
            main_xover_rx_fifo_level0 <= (main_xover_rx_fifo_level0 - 1'd1);
        end
    end
    if (main_en_storage) begin
        if ((main_value == 1'd0)) begin
            main_value <= main_reload_storage;
        end else begin
            main_value <= (main_value - 1'd1);
        end
    end else begin
        main_value <= main_load_storage;
    end
    if (main_update_value_re) begin
        main_value_status <= main_value;
    end
    if (main_zero_clear) begin
        main_zero_pending <= 1'd0;
    end
    main_zero_trigger_d <= main_zero_trigger;
    if ((main_zero_trigger & (~main_zero_trigger_d))) begin
        main_zero_pending <= 1'd1;
    end
    main_rddata_en <= {main_rddata_en, main_dfi_p0_rddata_en};
    main_dfi_p0_rddata_valid <= main_rddata_en[2];
    if (main_sdram_csr_dfi_p0_rddata_valid) begin
        main_sdram_rddata_status <= main_sdram_csr_dfi_p0_rddata;
    end
    if ((main_sdram_timer_wait & (~main_sdram_timer_done0))) begin
        main_sdram_timer_count1 <= (main_sdram_timer_count1 - 1'd1);
    end else begin
        main_sdram_timer_count1 <= 9'd312;
    end
    main_sdram_postponer_req_o <= 1'd0;
    if (main_sdram_postponer_req_i) begin
        main_sdram_postponer_count <= (main_sdram_postponer_count - 1'd1);
        if ((main_sdram_postponer_count == 1'd0)) begin
            main_sdram_postponer_count <= 1'd0;
            main_sdram_postponer_req_o <= 1'd1;
        end
    end
    if (main_sdram_sequencer_start0) begin
        main_sdram_sequencer_count <= 1'd0;
    end else begin
        if (main_sdram_sequencer_done1) begin
            if ((main_sdram_sequencer_count != 1'd0)) begin
                main_sdram_sequencer_count <= (main_sdram_sequencer_count - 1'd1);
            end
        end
    end
    main_sdram_cmd_payload_a <= 1'd0;
    main_sdram_cmd_payload_ba <= 1'd0;
    main_sdram_cmd_payload_cas <= 1'd0;
    main_sdram_cmd_payload_ras <= 1'd0;
    main_sdram_cmd_payload_we <= 1'd0;
    main_sdram_sequencer_done1 <= 1'd0;
    if ((main_sdram_sequencer_start1 & (main_sdram_sequencer_trigger == 1'd0))) begin
        main_sdram_cmd_payload_a <= 11'd1024;
        main_sdram_cmd_payload_ba <= 1'd0;
        main_sdram_cmd_payload_cas <= 1'd0;
        main_sdram_cmd_payload_ras <= 1'd1;
        main_sdram_cmd_payload_we <= 1'd1;
    end
    if ((main_sdram_sequencer_trigger == 1'd1)) begin
        main_sdram_cmd_payload_a <= 11'd1024;
        main_sdram_cmd_payload_ba <= 1'd0;
        main_sdram_cmd_payload_cas <= 1'd1;
        main_sdram_cmd_payload_ras <= 1'd1;
        main_sdram_cmd_payload_we <= 1'd0;
    end
    if ((main_sdram_sequencer_trigger == 3'd4)) begin
        main_sdram_cmd_payload_a <= 1'd0;
        main_sdram_cmd_payload_ba <= 1'd0;
        main_sdram_cmd_payload_cas <= 1'd0;
        main_sdram_cmd_payload_ras <= 1'd0;
        main_sdram_cmd_payload_we <= 1'd0;
        main_sdram_sequencer_done1 <= 1'd1;
    end
    if ((main_sdram_sequencer_trigger == 3'd4)) begin
        main_sdram_sequencer_trigger <= 1'd0;
    end else begin
        if ((main_sdram_sequencer_trigger != 1'd0)) begin
            main_sdram_sequencer_trigger <= (main_sdram_sequencer_trigger + 1'd1);
        end else begin
            if (main_sdram_sequencer_start1) begin
                main_sdram_sequencer_trigger <= 1'd1;
            end
        end
    end
    builder_basesoc_litedramcore_refresher_state <= builder_basesoc_litedramcore_refresher_next_state;
    if (main_sdram_bankmachine0_row_close) begin
        main_sdram_bankmachine0_row_opened <= 1'd0;
    end else begin
        if (main_sdram_bankmachine0_row_open) begin
            main_sdram_bankmachine0_row_opened <= 1'd1;
            main_sdram_bankmachine0_row <= main_sdram_bankmachine0_source_source_payload_addr[21:9];
        end
    end
    if (((main_sdram_bankmachine0_syncfifo0_we & main_sdram_bankmachine0_syncfifo0_writable) & (~main_sdram_bankmachine0_replace))) begin
        main_sdram_bankmachine0_produce <= (main_sdram_bankmachine0_produce + 1'd1);
    end
    if (main_sdram_bankmachine0_do_read) begin
        main_sdram_bankmachine0_consume <= (main_sdram_bankmachine0_consume + 1'd1);
    end
    if (((main_sdram_bankmachine0_syncfifo0_we & main_sdram_bankmachine0_syncfifo0_writable) & (~main_sdram_bankmachine0_replace))) begin
        if ((~main_sdram_bankmachine0_do_read)) begin
            main_sdram_bankmachine0_level <= (main_sdram_bankmachine0_level + 1'd1);
        end
    end else begin
        if (main_sdram_bankmachine0_do_read) begin
            main_sdram_bankmachine0_level <= (main_sdram_bankmachine0_level - 1'd1);
        end
    end
    if (((~main_sdram_bankmachine0_pipe_valid_source_valid) | main_sdram_bankmachine0_pipe_valid_source_ready)) begin
        main_sdram_bankmachine0_pipe_valid_source_valid <= main_sdram_bankmachine0_pipe_valid_sink_valid;
        main_sdram_bankmachine0_pipe_valid_source_first <= main_sdram_bankmachine0_pipe_valid_sink_first;
        main_sdram_bankmachine0_pipe_valid_source_last <= main_sdram_bankmachine0_pipe_valid_sink_last;
        main_sdram_bankmachine0_pipe_valid_source_payload_we <= main_sdram_bankmachine0_pipe_valid_sink_payload_we;
        main_sdram_bankmachine0_pipe_valid_source_payload_addr <= main_sdram_bankmachine0_pipe_valid_sink_payload_addr;
    end
    if (main_sdram_bankmachine0_twtpcon_valid) begin
        main_sdram_bankmachine0_twtpcon_count <= 2'd3;
        if (1'd0) begin
            main_sdram_bankmachine0_twtpcon_ready <= 1'd1;
        end else begin
            main_sdram_bankmachine0_twtpcon_ready <= 1'd0;
        end
    end else begin
        if ((~main_sdram_bankmachine0_twtpcon_ready)) begin
            main_sdram_bankmachine0_twtpcon_count <= (main_sdram_bankmachine0_twtpcon_count - 1'd1);
            if ((main_sdram_bankmachine0_twtpcon_count == 1'd1)) begin
                main_sdram_bankmachine0_twtpcon_ready <= 1'd1;
            end
        end
    end
    if (main_sdram_bankmachine0_trccon_valid) begin
        main_sdram_bankmachine0_trccon_count <= 2'd2;
        if (1'd0) begin
            main_sdram_bankmachine0_trccon_ready <= 1'd1;
        end else begin
            main_sdram_bankmachine0_trccon_ready <= 1'd0;
        end
    end else begin
        if ((~main_sdram_bankmachine0_trccon_ready)) begin
            main_sdram_bankmachine0_trccon_count <= (main_sdram_bankmachine0_trccon_count - 1'd1);
            if ((main_sdram_bankmachine0_trccon_count == 1'd1)) begin
                main_sdram_bankmachine0_trccon_ready <= 1'd1;
            end
        end
    end
    if (main_sdram_bankmachine0_trascon_valid) begin
        main_sdram_bankmachine0_trascon_count <= 1'd1;
        if (1'd0) begin
            main_sdram_bankmachine0_trascon_ready <= 1'd1;
        end else begin
            main_sdram_bankmachine0_trascon_ready <= 1'd0;
        end
    end else begin
        if ((~main_sdram_bankmachine0_trascon_ready)) begin
            main_sdram_bankmachine0_trascon_count <= (main_sdram_bankmachine0_trascon_count - 1'd1);
            if ((main_sdram_bankmachine0_trascon_count == 1'd1)) begin
                main_sdram_bankmachine0_trascon_ready <= 1'd1;
            end
        end
    end
    builder_basesoc_litedramcore_bankmachine0_state <= builder_basesoc_litedramcore_bankmachine0_next_state;
    if (main_sdram_bankmachine1_row_close) begin
        main_sdram_bankmachine1_row_opened <= 1'd0;
    end else begin
        if (main_sdram_bankmachine1_row_open) begin
            main_sdram_bankmachine1_row_opened <= 1'd1;
            main_sdram_bankmachine1_row <= main_sdram_bankmachine1_source_source_payload_addr[21:9];
        end
    end
    if (((main_sdram_bankmachine1_syncfifo1_we & main_sdram_bankmachine1_syncfifo1_writable) & (~main_sdram_bankmachine1_replace))) begin
        main_sdram_bankmachine1_produce <= (main_sdram_bankmachine1_produce + 1'd1);
    end
    if (main_sdram_bankmachine1_do_read) begin
        main_sdram_bankmachine1_consume <= (main_sdram_bankmachine1_consume + 1'd1);
    end
    if (((main_sdram_bankmachine1_syncfifo1_we & main_sdram_bankmachine1_syncfifo1_writable) & (~main_sdram_bankmachine1_replace))) begin
        if ((~main_sdram_bankmachine1_do_read)) begin
            main_sdram_bankmachine1_level <= (main_sdram_bankmachine1_level + 1'd1);
        end
    end else begin
        if (main_sdram_bankmachine1_do_read) begin
            main_sdram_bankmachine1_level <= (main_sdram_bankmachine1_level - 1'd1);
        end
    end
    if (((~main_sdram_bankmachine1_pipe_valid_source_valid) | main_sdram_bankmachine1_pipe_valid_source_ready)) begin
        main_sdram_bankmachine1_pipe_valid_source_valid <= main_sdram_bankmachine1_pipe_valid_sink_valid;
        main_sdram_bankmachine1_pipe_valid_source_first <= main_sdram_bankmachine1_pipe_valid_sink_first;
        main_sdram_bankmachine1_pipe_valid_source_last <= main_sdram_bankmachine1_pipe_valid_sink_last;
        main_sdram_bankmachine1_pipe_valid_source_payload_we <= main_sdram_bankmachine1_pipe_valid_sink_payload_we;
        main_sdram_bankmachine1_pipe_valid_source_payload_addr <= main_sdram_bankmachine1_pipe_valid_sink_payload_addr;
    end
    if (main_sdram_bankmachine1_twtpcon_valid) begin
        main_sdram_bankmachine1_twtpcon_count <= 2'd3;
        if (1'd0) begin
            main_sdram_bankmachine1_twtpcon_ready <= 1'd1;
        end else begin
            main_sdram_bankmachine1_twtpcon_ready <= 1'd0;
        end
    end else begin
        if ((~main_sdram_bankmachine1_twtpcon_ready)) begin
            main_sdram_bankmachine1_twtpcon_count <= (main_sdram_bankmachine1_twtpcon_count - 1'd1);
            if ((main_sdram_bankmachine1_twtpcon_count == 1'd1)) begin
                main_sdram_bankmachine1_twtpcon_ready <= 1'd1;
            end
        end
    end
    if (main_sdram_bankmachine1_trccon_valid) begin
        main_sdram_bankmachine1_trccon_count <= 2'd2;
        if (1'd0) begin
            main_sdram_bankmachine1_trccon_ready <= 1'd1;
        end else begin
            main_sdram_bankmachine1_trccon_ready <= 1'd0;
        end
    end else begin
        if ((~main_sdram_bankmachine1_trccon_ready)) begin
            main_sdram_bankmachine1_trccon_count <= (main_sdram_bankmachine1_trccon_count - 1'd1);
            if ((main_sdram_bankmachine1_trccon_count == 1'd1)) begin
                main_sdram_bankmachine1_trccon_ready <= 1'd1;
            end
        end
    end
    if (main_sdram_bankmachine1_trascon_valid) begin
        main_sdram_bankmachine1_trascon_count <= 1'd1;
        if (1'd0) begin
            main_sdram_bankmachine1_trascon_ready <= 1'd1;
        end else begin
            main_sdram_bankmachine1_trascon_ready <= 1'd0;
        end
    end else begin
        if ((~main_sdram_bankmachine1_trascon_ready)) begin
            main_sdram_bankmachine1_trascon_count <= (main_sdram_bankmachine1_trascon_count - 1'd1);
            if ((main_sdram_bankmachine1_trascon_count == 1'd1)) begin
                main_sdram_bankmachine1_trascon_ready <= 1'd1;
            end
        end
    end
    builder_basesoc_litedramcore_bankmachine1_state <= builder_basesoc_litedramcore_bankmachine1_next_state;
    if (main_sdram_bankmachine2_row_close) begin
        main_sdram_bankmachine2_row_opened <= 1'd0;
    end else begin
        if (main_sdram_bankmachine2_row_open) begin
            main_sdram_bankmachine2_row_opened <= 1'd1;
            main_sdram_bankmachine2_row <= main_sdram_bankmachine2_source_source_payload_addr[21:9];
        end
    end
    if (((main_sdram_bankmachine2_syncfifo2_we & main_sdram_bankmachine2_syncfifo2_writable) & (~main_sdram_bankmachine2_replace))) begin
        main_sdram_bankmachine2_produce <= (main_sdram_bankmachine2_produce + 1'd1);
    end
    if (main_sdram_bankmachine2_do_read) begin
        main_sdram_bankmachine2_consume <= (main_sdram_bankmachine2_consume + 1'd1);
    end
    if (((main_sdram_bankmachine2_syncfifo2_we & main_sdram_bankmachine2_syncfifo2_writable) & (~main_sdram_bankmachine2_replace))) begin
        if ((~main_sdram_bankmachine2_do_read)) begin
            main_sdram_bankmachine2_level <= (main_sdram_bankmachine2_level + 1'd1);
        end
    end else begin
        if (main_sdram_bankmachine2_do_read) begin
            main_sdram_bankmachine2_level <= (main_sdram_bankmachine2_level - 1'd1);
        end
    end
    if (((~main_sdram_bankmachine2_pipe_valid_source_valid) | main_sdram_bankmachine2_pipe_valid_source_ready)) begin
        main_sdram_bankmachine2_pipe_valid_source_valid <= main_sdram_bankmachine2_pipe_valid_sink_valid;
        main_sdram_bankmachine2_pipe_valid_source_first <= main_sdram_bankmachine2_pipe_valid_sink_first;
        main_sdram_bankmachine2_pipe_valid_source_last <= main_sdram_bankmachine2_pipe_valid_sink_last;
        main_sdram_bankmachine2_pipe_valid_source_payload_we <= main_sdram_bankmachine2_pipe_valid_sink_payload_we;
        main_sdram_bankmachine2_pipe_valid_source_payload_addr <= main_sdram_bankmachine2_pipe_valid_sink_payload_addr;
    end
    if (main_sdram_bankmachine2_twtpcon_valid) begin
        main_sdram_bankmachine2_twtpcon_count <= 2'd3;
        if (1'd0) begin
            main_sdram_bankmachine2_twtpcon_ready <= 1'd1;
        end else begin
            main_sdram_bankmachine2_twtpcon_ready <= 1'd0;
        end
    end else begin
        if ((~main_sdram_bankmachine2_twtpcon_ready)) begin
            main_sdram_bankmachine2_twtpcon_count <= (main_sdram_bankmachine2_twtpcon_count - 1'd1);
            if ((main_sdram_bankmachine2_twtpcon_count == 1'd1)) begin
                main_sdram_bankmachine2_twtpcon_ready <= 1'd1;
            end
        end
    end
    if (main_sdram_bankmachine2_trccon_valid) begin
        main_sdram_bankmachine2_trccon_count <= 2'd2;
        if (1'd0) begin
            main_sdram_bankmachine2_trccon_ready <= 1'd1;
        end else begin
            main_sdram_bankmachine2_trccon_ready <= 1'd0;
        end
    end else begin
        if ((~main_sdram_bankmachine2_trccon_ready)) begin
            main_sdram_bankmachine2_trccon_count <= (main_sdram_bankmachine2_trccon_count - 1'd1);
            if ((main_sdram_bankmachine2_trccon_count == 1'd1)) begin
                main_sdram_bankmachine2_trccon_ready <= 1'd1;
            end
        end
    end
    if (main_sdram_bankmachine2_trascon_valid) begin
        main_sdram_bankmachine2_trascon_count <= 1'd1;
        if (1'd0) begin
            main_sdram_bankmachine2_trascon_ready <= 1'd1;
        end else begin
            main_sdram_bankmachine2_trascon_ready <= 1'd0;
        end
    end else begin
        if ((~main_sdram_bankmachine2_trascon_ready)) begin
            main_sdram_bankmachine2_trascon_count <= (main_sdram_bankmachine2_trascon_count - 1'd1);
            if ((main_sdram_bankmachine2_trascon_count == 1'd1)) begin
                main_sdram_bankmachine2_trascon_ready <= 1'd1;
            end
        end
    end
    builder_basesoc_litedramcore_bankmachine2_state <= builder_basesoc_litedramcore_bankmachine2_next_state;
    if (main_sdram_bankmachine3_row_close) begin
        main_sdram_bankmachine3_row_opened <= 1'd0;
    end else begin
        if (main_sdram_bankmachine3_row_open) begin
            main_sdram_bankmachine3_row_opened <= 1'd1;
            main_sdram_bankmachine3_row <= main_sdram_bankmachine3_source_source_payload_addr[21:9];
        end
    end
    if (((main_sdram_bankmachine3_syncfifo3_we & main_sdram_bankmachine3_syncfifo3_writable) & (~main_sdram_bankmachine3_replace))) begin
        main_sdram_bankmachine3_produce <= (main_sdram_bankmachine3_produce + 1'd1);
    end
    if (main_sdram_bankmachine3_do_read) begin
        main_sdram_bankmachine3_consume <= (main_sdram_bankmachine3_consume + 1'd1);
    end
    if (((main_sdram_bankmachine3_syncfifo3_we & main_sdram_bankmachine3_syncfifo3_writable) & (~main_sdram_bankmachine3_replace))) begin
        if ((~main_sdram_bankmachine3_do_read)) begin
            main_sdram_bankmachine3_level <= (main_sdram_bankmachine3_level + 1'd1);
        end
    end else begin
        if (main_sdram_bankmachine3_do_read) begin
            main_sdram_bankmachine3_level <= (main_sdram_bankmachine3_level - 1'd1);
        end
    end
    if (((~main_sdram_bankmachine3_pipe_valid_source_valid) | main_sdram_bankmachine3_pipe_valid_source_ready)) begin
        main_sdram_bankmachine3_pipe_valid_source_valid <= main_sdram_bankmachine3_pipe_valid_sink_valid;
        main_sdram_bankmachine3_pipe_valid_source_first <= main_sdram_bankmachine3_pipe_valid_sink_first;
        main_sdram_bankmachine3_pipe_valid_source_last <= main_sdram_bankmachine3_pipe_valid_sink_last;
        main_sdram_bankmachine3_pipe_valid_source_payload_we <= main_sdram_bankmachine3_pipe_valid_sink_payload_we;
        main_sdram_bankmachine3_pipe_valid_source_payload_addr <= main_sdram_bankmachine3_pipe_valid_sink_payload_addr;
    end
    if (main_sdram_bankmachine3_twtpcon_valid) begin
        main_sdram_bankmachine3_twtpcon_count <= 2'd3;
        if (1'd0) begin
            main_sdram_bankmachine3_twtpcon_ready <= 1'd1;
        end else begin
            main_sdram_bankmachine3_twtpcon_ready <= 1'd0;
        end
    end else begin
        if ((~main_sdram_bankmachine3_twtpcon_ready)) begin
            main_sdram_bankmachine3_twtpcon_count <= (main_sdram_bankmachine3_twtpcon_count - 1'd1);
            if ((main_sdram_bankmachine3_twtpcon_count == 1'd1)) begin
                main_sdram_bankmachine3_twtpcon_ready <= 1'd1;
            end
        end
    end
    if (main_sdram_bankmachine3_trccon_valid) begin
        main_sdram_bankmachine3_trccon_count <= 2'd2;
        if (1'd0) begin
            main_sdram_bankmachine3_trccon_ready <= 1'd1;
        end else begin
            main_sdram_bankmachine3_trccon_ready <= 1'd0;
        end
    end else begin
        if ((~main_sdram_bankmachine3_trccon_ready)) begin
            main_sdram_bankmachine3_trccon_count <= (main_sdram_bankmachine3_trccon_count - 1'd1);
            if ((main_sdram_bankmachine3_trccon_count == 1'd1)) begin
                main_sdram_bankmachine3_trccon_ready <= 1'd1;
            end
        end
    end
    if (main_sdram_bankmachine3_trascon_valid) begin
        main_sdram_bankmachine3_trascon_count <= 1'd1;
        if (1'd0) begin
            main_sdram_bankmachine3_trascon_ready <= 1'd1;
        end else begin
            main_sdram_bankmachine3_trascon_ready <= 1'd0;
        end
    end else begin
        if ((~main_sdram_bankmachine3_trascon_ready)) begin
            main_sdram_bankmachine3_trascon_count <= (main_sdram_bankmachine3_trascon_count - 1'd1);
            if ((main_sdram_bankmachine3_trascon_count == 1'd1)) begin
                main_sdram_bankmachine3_trascon_ready <= 1'd1;
            end
        end
    end
    builder_basesoc_litedramcore_bankmachine3_state <= builder_basesoc_litedramcore_bankmachine3_next_state;
    if ((~main_sdram_en0)) begin
        main_sdram_time0 <= 5'd31;
    end else begin
        if ((~main_sdram_max_time0)) begin
            main_sdram_time0 <= (main_sdram_time0 - 1'd1);
        end
    end
    if ((~main_sdram_en1)) begin
        main_sdram_time1 <= 4'd15;
    end else begin
        if ((~main_sdram_max_time1)) begin
            main_sdram_time1 <= (main_sdram_time1 - 1'd1);
        end
    end
    if (main_sdram_choose_cmd_ce) begin
        case (main_sdram_choose_cmd_grant)
            1'd0: begin
                if (main_sdram_choose_cmd_request[1]) begin
                    main_sdram_choose_cmd_grant <= 1'd1;
                end else begin
                    if (main_sdram_choose_cmd_request[2]) begin
                        main_sdram_choose_cmd_grant <= 2'd2;
                    end else begin
                        if (main_sdram_choose_cmd_request[3]) begin
                            main_sdram_choose_cmd_grant <= 2'd3;
                        end
                    end
                end
            end
            1'd1: begin
                if (main_sdram_choose_cmd_request[2]) begin
                    main_sdram_choose_cmd_grant <= 2'd2;
                end else begin
                    if (main_sdram_choose_cmd_request[3]) begin
                        main_sdram_choose_cmd_grant <= 2'd3;
                    end else begin
                        if (main_sdram_choose_cmd_request[0]) begin
                            main_sdram_choose_cmd_grant <= 1'd0;
                        end
                    end
                end
            end
            2'd2: begin
                if (main_sdram_choose_cmd_request[3]) begin
                    main_sdram_choose_cmd_grant <= 2'd3;
                end else begin
                    if (main_sdram_choose_cmd_request[0]) begin
                        main_sdram_choose_cmd_grant <= 1'd0;
                    end else begin
                        if (main_sdram_choose_cmd_request[1]) begin
                            main_sdram_choose_cmd_grant <= 1'd1;
                        end
                    end
                end
            end
            2'd3: begin
                if (main_sdram_choose_cmd_request[0]) begin
                    main_sdram_choose_cmd_grant <= 1'd0;
                end else begin
                    if (main_sdram_choose_cmd_request[1]) begin
                        main_sdram_choose_cmd_grant <= 1'd1;
                    end else begin
                        if (main_sdram_choose_cmd_request[2]) begin
                            main_sdram_choose_cmd_grant <= 2'd2;
                        end
                    end
                end
            end
        endcase
    end
    if (main_sdram_choose_req_ce) begin
        case (main_sdram_choose_req_grant)
            1'd0: begin
                if (main_sdram_choose_req_request[1]) begin
                    main_sdram_choose_req_grant <= 1'd1;
                end else begin
                    if (main_sdram_choose_req_request[2]) begin
                        main_sdram_choose_req_grant <= 2'd2;
                    end else begin
                        if (main_sdram_choose_req_request[3]) begin
                            main_sdram_choose_req_grant <= 2'd3;
                        end
                    end
                end
            end
            1'd1: begin
                if (main_sdram_choose_req_request[2]) begin
                    main_sdram_choose_req_grant <= 2'd2;
                end else begin
                    if (main_sdram_choose_req_request[3]) begin
                        main_sdram_choose_req_grant <= 2'd3;
                    end else begin
                        if (main_sdram_choose_req_request[0]) begin
                            main_sdram_choose_req_grant <= 1'd0;
                        end
                    end
                end
            end
            2'd2: begin
                if (main_sdram_choose_req_request[3]) begin
                    main_sdram_choose_req_grant <= 2'd3;
                end else begin
                    if (main_sdram_choose_req_request[0]) begin
                        main_sdram_choose_req_grant <= 1'd0;
                    end else begin
                        if (main_sdram_choose_req_request[1]) begin
                            main_sdram_choose_req_grant <= 1'd1;
                        end
                    end
                end
            end
            2'd3: begin
                if (main_sdram_choose_req_request[0]) begin
                    main_sdram_choose_req_grant <= 1'd0;
                end else begin
                    if (main_sdram_choose_req_request[1]) begin
                        main_sdram_choose_req_grant <= 1'd1;
                    end else begin
                        if (main_sdram_choose_req_request[2]) begin
                            main_sdram_choose_req_grant <= 2'd2;
                        end
                    end
                end
            end
        endcase
    end
    main_sdram_dfi_p0_cs_n <= 1'd0;
    main_sdram_dfi_p0_bank <= builder_sync_rhs_self0;
    main_sdram_dfi_p0_address <= builder_sync_rhs_self1;
    main_sdram_dfi_p0_cas_n <= (~builder_sync_rhs_self2);
    main_sdram_dfi_p0_ras_n <= (~builder_sync_rhs_self3);
    main_sdram_dfi_p0_we_n <= (~builder_sync_rhs_self4);
    main_sdram_dfi_p0_rddata_en <= builder_sync_rhs_self5;
    main_sdram_dfi_p0_wrdata_en <= builder_sync_rhs_self6;
    if (main_sdram_trrdcon_valid) begin
        main_sdram_trrdcon_count <= 1'd0;
        if (1'd1) begin
            main_sdram_trrdcon_ready <= 1'd1;
        end else begin
            main_sdram_trrdcon_ready <= 1'd0;
        end
    end else begin
        if ((~main_sdram_trrdcon_ready)) begin
            main_sdram_trrdcon_count <= (main_sdram_trrdcon_count - 1'd1);
            if ((main_sdram_trrdcon_count == 1'd1)) begin
                main_sdram_trrdcon_ready <= 1'd1;
            end
        end
    end
    if (main_sdram_tccdcon_valid) begin
        main_sdram_tccdcon_count <= 1'd0;
        if (1'd1) begin
            main_sdram_tccdcon_ready <= 1'd1;
        end else begin
            main_sdram_tccdcon_ready <= 1'd0;
        end
    end else begin
        if ((~main_sdram_tccdcon_ready)) begin
            main_sdram_tccdcon_count <= (main_sdram_tccdcon_count - 1'd1);
            if ((main_sdram_tccdcon_count == 1'd1)) begin
                main_sdram_tccdcon_ready <= 1'd1;
            end
        end
    end
    if (main_sdram_twtrcon_valid) begin
        main_sdram_twtrcon_count <= 3'd4;
        if (1'd0) begin
            main_sdram_twtrcon_ready <= 1'd1;
        end else begin
            main_sdram_twtrcon_ready <= 1'd0;
        end
    end else begin
        if ((~main_sdram_twtrcon_ready)) begin
            main_sdram_twtrcon_count <= (main_sdram_twtrcon_count - 1'd1);
            if ((main_sdram_twtrcon_count == 1'd1)) begin
                main_sdram_twtrcon_ready <= 1'd1;
            end
        end
    end
    builder_basesoc_litedramcore_multiplexer_state <= builder_basesoc_litedramcore_multiplexer_next_state;
    builder_basesoc_litedramcore_new_master_wdata_ready <= ((((1'd0 | ((builder_basesoc_litedramcore_roundrobin0_grant == 1'd0) & main_sdram_interface_bank0_wdata_ready)) | ((builder_basesoc_litedramcore_roundrobin1_grant == 1'd0) & main_sdram_interface_bank1_wdata_ready)) | ((builder_basesoc_litedramcore_roundrobin2_grant == 1'd0) & main_sdram_interface_bank2_wdata_ready)) | ((builder_basesoc_litedramcore_roundrobin3_grant == 1'd0) & main_sdram_interface_bank3_wdata_ready));
    builder_basesoc_litedramcore_new_master_rdata_valid0 <= ((((1'd0 | ((builder_basesoc_litedramcore_roundrobin0_grant == 1'd0) & main_sdram_interface_bank0_rdata_valid)) | ((builder_basesoc_litedramcore_roundrobin1_grant == 1'd0) & main_sdram_interface_bank1_rdata_valid)) | ((builder_basesoc_litedramcore_roundrobin2_grant == 1'd0) & main_sdram_interface_bank2_rdata_valid)) | ((builder_basesoc_litedramcore_roundrobin3_grant == 1'd0) & main_sdram_interface_bank3_rdata_valid));
    builder_basesoc_litedramcore_new_master_rdata_valid1 <= builder_basesoc_litedramcore_new_master_rdata_valid0;
    builder_basesoc_litedramcore_new_master_rdata_valid2 <= builder_basesoc_litedramcore_new_master_rdata_valid1;
    builder_basesoc_litedramcore_new_master_rdata_valid3 <= builder_basesoc_litedramcore_new_master_rdata_valid2;
    main_adr_offset_r <= main_wb_sdram_adr[1:0];
    builder_basesoc_fullmemorywe_state <= builder_basesoc_fullmemorywe_next_state;
    builder_basesoc_litedramnativeportconverter_state <= builder_basesoc_litedramnativeportconverter_next_state;
    if (main_wishbone_bridge_count_litedramnativeportconverter_next_value_ce) begin
        main_wishbone_bridge_count <= main_wishbone_bridge_count_litedramnativeportconverter_next_value;
    end
    if ((main_wishbone_bridge_wdata_converter_converter_source_valid & main_wishbone_bridge_wdata_converter_converter_source_ready)) begin
        if (main_wishbone_bridge_wdata_converter_converter_last) begin
            main_wishbone_bridge_wdata_converter_converter_mux <= 1'd0;
        end else begin
            main_wishbone_bridge_wdata_converter_converter_mux <= (main_wishbone_bridge_wdata_converter_converter_mux + 1'd1);
        end
    end
    if (main_wishbone_bridge_rdata_converter_converter_source_ready) begin
        main_wishbone_bridge_rdata_converter_converter_strobe_all <= 1'd0;
    end
    if (main_wishbone_bridge_rdata_converter_converter_load_part) begin
        if (((main_wishbone_bridge_rdata_converter_converter_demux == 3'd7) | main_wishbone_bridge_rdata_converter_converter_sink_last)) begin
            main_wishbone_bridge_rdata_converter_converter_demux <= 1'd0;
            main_wishbone_bridge_rdata_converter_converter_strobe_all <= 1'd1;
        end else begin
            main_wishbone_bridge_rdata_converter_converter_demux <= (main_wishbone_bridge_rdata_converter_converter_demux + 1'd1);
        end
    end
    if ((main_wishbone_bridge_rdata_converter_converter_source_valid & main_wishbone_bridge_rdata_converter_converter_source_ready)) begin
        if ((main_wishbone_bridge_rdata_converter_converter_sink_valid & main_wishbone_bridge_rdata_converter_converter_sink_ready)) begin
            main_wishbone_bridge_rdata_converter_converter_source_first <= main_wishbone_bridge_rdata_converter_converter_sink_first;
            main_wishbone_bridge_rdata_converter_converter_source_last <= main_wishbone_bridge_rdata_converter_converter_sink_last;
        end else begin
            main_wishbone_bridge_rdata_converter_converter_source_first <= 1'd0;
            main_wishbone_bridge_rdata_converter_converter_source_last <= 1'd0;
        end
    end else begin
        if ((main_wishbone_bridge_rdata_converter_converter_sink_valid & main_wishbone_bridge_rdata_converter_converter_sink_ready)) begin
            main_wishbone_bridge_rdata_converter_converter_source_first <= (main_wishbone_bridge_rdata_converter_converter_sink_first | main_wishbone_bridge_rdata_converter_converter_source_first);
            main_wishbone_bridge_rdata_converter_converter_source_last <= (main_wishbone_bridge_rdata_converter_converter_sink_last | main_wishbone_bridge_rdata_converter_converter_source_last);
        end
    end
    if (main_wishbone_bridge_rdata_converter_converter_load_part) begin
        case (main_wishbone_bridge_rdata_converter_converter_demux)
            1'd0: begin
                main_wishbone_bridge_rdata_converter_converter_source_payload_data[15:0] <= main_wishbone_bridge_rdata_converter_converter_sink_payload_data;
            end
            1'd1: begin
                main_wishbone_bridge_rdata_converter_converter_source_payload_data[31:16] <= main_wishbone_bridge_rdata_converter_converter_sink_payload_data;
            end
            2'd2: begin
                main_wishbone_bridge_rdata_converter_converter_source_payload_data[47:32] <= main_wishbone_bridge_rdata_converter_converter_sink_payload_data;
            end
            2'd3: begin
                main_wishbone_bridge_rdata_converter_converter_source_payload_data[63:48] <= main_wishbone_bridge_rdata_converter_converter_sink_payload_data;
            end
            3'd4: begin
                main_wishbone_bridge_rdata_converter_converter_source_payload_data[79:64] <= main_wishbone_bridge_rdata_converter_converter_sink_payload_data;
            end
            3'd5: begin
                main_wishbone_bridge_rdata_converter_converter_source_payload_data[95:80] <= main_wishbone_bridge_rdata_converter_converter_sink_payload_data;
            end
            3'd6: begin
                main_wishbone_bridge_rdata_converter_converter_source_payload_data[111:96] <= main_wishbone_bridge_rdata_converter_converter_sink_payload_data;
            end
            3'd7: begin
                main_wishbone_bridge_rdata_converter_converter_source_payload_data[127:112] <= main_wishbone_bridge_rdata_converter_converter_sink_payload_data;
            end
        endcase
    end
    if (main_wishbone_bridge_rdata_converter_converter_load_part) begin
        main_wishbone_bridge_rdata_converter_converter_source_payload_valid_token_count <= (main_wishbone_bridge_rdata_converter_converter_demux + 1'd1);
    end
    builder_basesoc_fsm_state <= builder_basesoc_fsm_next_state;
    if (main_wishbone_bridge_aborted_fsm_next_value_ce) begin
        main_wishbone_bridge_aborted <= main_wishbone_bridge_aborted_fsm_next_value;
    end
    basesoc_clk_divider1 <= (basesoc_clk_divider1 + 1'd1);
    if (basesoc_clk_rise) begin
        spisdcard_clk <= basesoc_clk_enable;
    end else begin
        if (basesoc_clk_fall) begin
            basesoc_clk_divider1 <= 1'd0;
            spisdcard_clk <= 1'd0;
        end
    end
    spisdcard_cs_n <= (~(basesoc_cs & (basesoc_xfer_enable | (basesoc_cs_mode == 1'd1))));
    if (basesoc_mosi_latch) begin
        basesoc_mosi_data <= basesoc_mosi;
        basesoc_mosi_sel <= 3'd7;
    end else begin
        if (basesoc_clk_fall) begin
            if (basesoc_xfer_enable) begin
                spisdcard_mosi <= builder_sync_f_self;
            end
            basesoc_mosi_sel <= (basesoc_mosi_sel - 1'd1);
        end
    end
    if (basesoc_clk_rise) begin
        if (basesoc_loopback) begin
            basesoc_miso_data <= {basesoc_miso_data, spisdcard_mosi};
        end else begin
            basesoc_miso_data <= {basesoc_miso_data, spisdcard_miso};
        end
    end
    if (basesoc_miso_latch) begin
        basesoc_miso <= basesoc_miso_data;
    end
    builder_basesoc_spimaster_state <= builder_basesoc_spimaster_next_state;
    if (basesoc_count_spimaster_next_value_ce) begin
        basesoc_count <= basesoc_count_spimaster_next_value;
    end
    builder_basesoc_wishbone2csr_state <= builder_basesoc_wishbone2csr_next_state;
    if (builder_basesoc_dat_w_wishbone2csr_next_value_ce0) begin
        builder_basesoc_dat_w <= builder_basesoc_dat_w_wishbone2csr_next_value0;
    end
    if (builder_basesoc_adr_wishbone2csr_next_value_ce1) begin
        builder_basesoc_adr <= builder_basesoc_adr_wishbone2csr_next_value1;
    end
    if (builder_basesoc_we_wishbone2csr_next_value_ce2) begin
        builder_basesoc_we <= builder_basesoc_we_wishbone2csr_next_value2;
    end
    builder_csr_bankarray_interface0_bank_bus_dat_r <= 1'd0;
    if (builder_csr_bankarray_csrbank0_sel) begin
        case (builder_csr_bankarray_interface0_bank_bus_adr[8:0])
            1'd0: begin
                builder_csr_bankarray_interface0_bank_bus_dat_r <= builder_csr_bankarray_csrbank0_reset0_w;
            end
            1'd1: begin
                builder_csr_bankarray_interface0_bank_bus_dat_r <= builder_csr_bankarray_csrbank0_scratch0_w;
            end
            2'd2: begin
                builder_csr_bankarray_interface0_bank_bus_dat_r <= builder_csr_bankarray_csrbank0_bus_errors_w;
            end
        endcase
    end
    if (builder_csr_bankarray_csrbank0_reset0_re) begin
        main_reset_storage[1:0] <= builder_csr_bankarray_csrbank0_reset0_r;
    end
    main_reset_re <= builder_csr_bankarray_csrbank0_reset0_re;
    if (builder_csr_bankarray_csrbank0_scratch0_re) begin
        main_scratch_storage[31:0] <= builder_csr_bankarray_csrbank0_scratch0_r;
    end
    main_scratch_re <= builder_csr_bankarray_csrbank0_scratch0_re;
    main_bus_errors_re <= builder_csr_bankarray_csrbank0_bus_errors_re;
    builder_csr_bankarray_sel_r <= builder_csr_bankarray_sel;
    builder_csr_bankarray_interface1_bank_bus_dat_r <= 1'd0;
    if (builder_csr_bankarray_csrbank1_sel) begin
        case (builder_csr_bankarray_interface1_bank_bus_adr[8:0])
            1'd0: begin
                builder_csr_bankarray_interface1_bank_bus_dat_r <= builder_csr_bankarray_csrbank1_out0_w;
            end
        endcase
    end
    if (builder_csr_bankarray_csrbank1_out0_re) begin
        main_storage[7:0] <= builder_csr_bankarray_csrbank1_out0_r;
    end
    main_re <= builder_csr_bankarray_csrbank1_out0_re;
    builder_csr_bankarray_interface2_bank_bus_dat_r <= 1'd0;
    if (builder_csr_bankarray_csrbank2_sel) begin
        case (builder_csr_bankarray_interface2_bank_bus_adr[8:0])
            1'd0: begin
                builder_csr_bankarray_interface2_bank_bus_dat_r <= builder_csr_bankarray_csrbank2_dfii_control0_w;
            end
            1'd1: begin
                builder_csr_bankarray_interface2_bank_bus_dat_r <= builder_csr_bankarray_csrbank2_dfii_pi0_command0_w;
            end
            2'd2: begin
                builder_csr_bankarray_interface2_bank_bus_dat_r <= main_sdram_command_issue_w;
            end
            2'd3: begin
                builder_csr_bankarray_interface2_bank_bus_dat_r <= builder_csr_bankarray_csrbank2_dfii_pi0_address0_w;
            end
            3'd4: begin
                builder_csr_bankarray_interface2_bank_bus_dat_r <= builder_csr_bankarray_csrbank2_dfii_pi0_baddress0_w;
            end
            3'd5: begin
                builder_csr_bankarray_interface2_bank_bus_dat_r <= builder_csr_bankarray_csrbank2_dfii_pi0_wrdata0_w;
            end
            3'd6: begin
                builder_csr_bankarray_interface2_bank_bus_dat_r <= builder_csr_bankarray_csrbank2_dfii_pi0_rddata_w;
            end
        endcase
    end
    if (builder_csr_bankarray_csrbank2_dfii_control0_re) begin
        main_sdram_storage[3:0] <= builder_csr_bankarray_csrbank2_dfii_control0_r;
    end
    main_sdram_re <= builder_csr_bankarray_csrbank2_dfii_control0_re;
    if (builder_csr_bankarray_csrbank2_dfii_pi0_command0_re) begin
        main_sdram_command_storage[7:0] <= builder_csr_bankarray_csrbank2_dfii_pi0_command0_r;
    end
    main_sdram_command_re <= builder_csr_bankarray_csrbank2_dfii_pi0_command0_re;
    if (builder_csr_bankarray_csrbank2_dfii_pi0_address0_re) begin
        main_sdram_address_storage[12:0] <= builder_csr_bankarray_csrbank2_dfii_pi0_address0_r;
    end
    main_sdram_address_re <= builder_csr_bankarray_csrbank2_dfii_pi0_address0_re;
    if (builder_csr_bankarray_csrbank2_dfii_pi0_baddress0_re) begin
        main_sdram_baddress_storage[1:0] <= builder_csr_bankarray_csrbank2_dfii_pi0_baddress0_r;
    end
    main_sdram_baddress_re <= builder_csr_bankarray_csrbank2_dfii_pi0_baddress0_re;
    if (builder_csr_bankarray_csrbank2_dfii_pi0_wrdata0_re) begin
        main_sdram_wrdata_storage[15:0] <= builder_csr_bankarray_csrbank2_dfii_pi0_wrdata0_r;
    end
    main_sdram_wrdata_re <= builder_csr_bankarray_csrbank2_dfii_pi0_wrdata0_re;
    main_sdram_rddata_re <= builder_csr_bankarray_csrbank2_dfii_pi0_rddata_re;
    builder_csr_bankarray_interface3_bank_bus_dat_r <= 1'd0;
    if (builder_csr_bankarray_csrbank3_sel) begin
        case (builder_csr_bankarray_interface3_bank_bus_adr[8:0])
            1'd0: begin
                builder_csr_bankarray_interface3_bank_bus_dat_r <= builder_csr_bankarray_csrbank3_control0_w;
            end
            1'd1: begin
                builder_csr_bankarray_interface3_bank_bus_dat_r <= builder_csr_bankarray_csrbank3_status_w;
            end
            2'd2: begin
                builder_csr_bankarray_interface3_bank_bus_dat_r <= builder_csr_bankarray_csrbank3_mosi0_w;
            end
            2'd3: begin
                builder_csr_bankarray_interface3_bank_bus_dat_r <= builder_csr_bankarray_csrbank3_miso_w;
            end
            3'd4: begin
                builder_csr_bankarray_interface3_bank_bus_dat_r <= builder_csr_bankarray_csrbank3_cs0_w;
            end
            3'd5: begin
                builder_csr_bankarray_interface3_bank_bus_dat_r <= builder_csr_bankarray_csrbank3_loopback0_w;
            end
            3'd6: begin
                builder_csr_bankarray_interface3_bank_bus_dat_r <= builder_csr_bankarray_csrbank3_clk_divider0_w;
            end
        endcase
    end
    if (builder_csr_bankarray_csrbank3_control0_re) begin
        basesoc_control_storage[15:0] <= builder_csr_bankarray_csrbank3_control0_r;
    end
    basesoc_control_re <= builder_csr_bankarray_csrbank3_control0_re;
    basesoc_status_re <= builder_csr_bankarray_csrbank3_status_re;
    if (builder_csr_bankarray_csrbank3_mosi0_re) begin
        basesoc_mosi_storage[7:0] <= builder_csr_bankarray_csrbank3_mosi0_r;
    end
    basesoc_mosi_re <= builder_csr_bankarray_csrbank3_mosi0_re;
    basesoc_miso_re <= builder_csr_bankarray_csrbank3_miso_re;
    if (builder_csr_bankarray_csrbank3_cs0_re) begin
        basesoc_cs_storage[16:0] <= builder_csr_bankarray_csrbank3_cs0_r;
    end
    basesoc_cs_re <= builder_csr_bankarray_csrbank3_cs0_re;
    if (builder_csr_bankarray_csrbank3_loopback0_re) begin
        basesoc_loopback_storage <= builder_csr_bankarray_csrbank3_loopback0_r;
    end
    basesoc_loopback_re <= builder_csr_bankarray_csrbank3_loopback0_re;
    if (builder_csr_bankarray_csrbank3_clk_divider0_re) begin
        basesoc_storage[15:0] <= builder_csr_bankarray_csrbank3_clk_divider0_r;
    end
    basesoc_re <= builder_csr_bankarray_csrbank3_clk_divider0_re;
    builder_csr_bankarray_interface4_bank_bus_dat_r <= 1'd0;
    if (builder_csr_bankarray_csrbank4_sel) begin
        case (builder_csr_bankarray_interface4_bank_bus_adr[8:0])
            1'd0: begin
                builder_csr_bankarray_interface4_bank_bus_dat_r <= builder_csr_bankarray_csrbank4_load0_w;
            end
            1'd1: begin
                builder_csr_bankarray_interface4_bank_bus_dat_r <= builder_csr_bankarray_csrbank4_reload0_w;
            end
            2'd2: begin
                builder_csr_bankarray_interface4_bank_bus_dat_r <= builder_csr_bankarray_csrbank4_en0_w;
            end
            2'd3: begin
                builder_csr_bankarray_interface4_bank_bus_dat_r <= builder_csr_bankarray_csrbank4_update_value0_w;
            end
            3'd4: begin
                builder_csr_bankarray_interface4_bank_bus_dat_r <= builder_csr_bankarray_csrbank4_value_w;
            end
            3'd5: begin
                builder_csr_bankarray_interface4_bank_bus_dat_r <= builder_csr_bankarray_csrbank4_ev_status_w;
            end
            3'd6: begin
                builder_csr_bankarray_interface4_bank_bus_dat_r <= builder_csr_bankarray_csrbank4_ev_pending_w;
            end
            3'd7: begin
                builder_csr_bankarray_interface4_bank_bus_dat_r <= builder_csr_bankarray_csrbank4_ev_enable0_w;
            end
        endcase
    end
    if (builder_csr_bankarray_csrbank4_load0_re) begin
        main_load_storage[31:0] <= builder_csr_bankarray_csrbank4_load0_r;
    end
    main_load_re <= builder_csr_bankarray_csrbank4_load0_re;
    if (builder_csr_bankarray_csrbank4_reload0_re) begin
        main_reload_storage[31:0] <= builder_csr_bankarray_csrbank4_reload0_r;
    end
    main_reload_re <= builder_csr_bankarray_csrbank4_reload0_re;
    if (builder_csr_bankarray_csrbank4_en0_re) begin
        main_en_storage <= builder_csr_bankarray_csrbank4_en0_r;
    end
    main_en_re <= builder_csr_bankarray_csrbank4_en0_re;
    if (builder_csr_bankarray_csrbank4_update_value0_re) begin
        main_update_value_storage <= builder_csr_bankarray_csrbank4_update_value0_r;
    end
    main_update_value_re <= builder_csr_bankarray_csrbank4_update_value0_re;
    main_value_re <= builder_csr_bankarray_csrbank4_value_re;
    main_status_re <= builder_csr_bankarray_csrbank4_ev_status_re;
    if (builder_csr_bankarray_csrbank4_ev_pending_re) begin
        main_pending_r <= builder_csr_bankarray_csrbank4_ev_pending_r;
    end
    main_pending_re <= builder_csr_bankarray_csrbank4_ev_pending_re;
    if (builder_csr_bankarray_csrbank4_ev_enable0_re) begin
        main_enable_storage <= builder_csr_bankarray_csrbank4_ev_enable0_r;
    end
    main_enable_re <= builder_csr_bankarray_csrbank4_ev_enable0_re;
    builder_csr_bankarray_interface5_bank_bus_dat_r <= 1'd0;
    if (builder_csr_bankarray_csrbank5_sel) begin
        case (builder_csr_bankarray_interface5_bank_bus_adr[8:0])
            1'd0: begin
                builder_csr_bankarray_interface5_bank_bus_dat_r <= main_uartcrossover_rxtx_w;
            end
            1'd1: begin
                builder_csr_bankarray_interface5_bank_bus_dat_r <= builder_csr_bankarray_csrbank5_txfull_w;
            end
            2'd2: begin
                builder_csr_bankarray_interface5_bank_bus_dat_r <= builder_csr_bankarray_csrbank5_rxempty_w;
            end
            2'd3: begin
                builder_csr_bankarray_interface5_bank_bus_dat_r <= builder_csr_bankarray_csrbank5_ev_status_w;
            end
            3'd4: begin
                builder_csr_bankarray_interface5_bank_bus_dat_r <= builder_csr_bankarray_csrbank5_ev_pending_w;
            end
            3'd5: begin
                builder_csr_bankarray_interface5_bank_bus_dat_r <= builder_csr_bankarray_csrbank5_ev_enable0_w;
            end
            3'd6: begin
                builder_csr_bankarray_interface5_bank_bus_dat_r <= builder_csr_bankarray_csrbank5_txempty_w;
            end
            3'd7: begin
                builder_csr_bankarray_interface5_bank_bus_dat_r <= builder_csr_bankarray_csrbank5_rxfull_w;
            end
            4'd8: begin
                builder_csr_bankarray_interface5_bank_bus_dat_r <= main_xover_rxtx_w;
            end
            4'd9: begin
                builder_csr_bankarray_interface5_bank_bus_dat_r <= builder_csr_bankarray_csrbank5_xover_txfull_w;
            end
            4'd10: begin
                builder_csr_bankarray_interface5_bank_bus_dat_r <= builder_csr_bankarray_csrbank5_xover_rxempty_w;
            end
            4'd11: begin
                builder_csr_bankarray_interface5_bank_bus_dat_r <= builder_csr_bankarray_csrbank5_xover_ev_status_w;
            end
            4'd12: begin
                builder_csr_bankarray_interface5_bank_bus_dat_r <= builder_csr_bankarray_csrbank5_xover_ev_pending_w;
            end
            4'd13: begin
                builder_csr_bankarray_interface5_bank_bus_dat_r <= builder_csr_bankarray_csrbank5_xover_ev_enable0_w;
            end
            4'd14: begin
                builder_csr_bankarray_interface5_bank_bus_dat_r <= builder_csr_bankarray_csrbank5_xover_txempty_w;
            end
            4'd15: begin
                builder_csr_bankarray_interface5_bank_bus_dat_r <= builder_csr_bankarray_csrbank5_xover_rxfull_w;
            end
        endcase
    end
    main_uartcrossover_txfull_re <= builder_csr_bankarray_csrbank5_txfull_re;
    main_uartcrossover_rxempty_re <= builder_csr_bankarray_csrbank5_rxempty_re;
    main_uartcrossover_status_re <= builder_csr_bankarray_csrbank5_ev_status_re;
    if (builder_csr_bankarray_csrbank5_ev_pending_re) begin
        main_uartcrossover_pending_r[1:0] <= builder_csr_bankarray_csrbank5_ev_pending_r;
    end
    main_uartcrossover_pending_re <= builder_csr_bankarray_csrbank5_ev_pending_re;
    if (builder_csr_bankarray_csrbank5_ev_enable0_re) begin
        main_uartcrossover_enable_storage[1:0] <= builder_csr_bankarray_csrbank5_ev_enable0_r;
    end
    main_uartcrossover_enable_re <= builder_csr_bankarray_csrbank5_ev_enable0_re;
    main_uartcrossover_txempty_re <= builder_csr_bankarray_csrbank5_txempty_re;
    main_uartcrossover_rxfull_re <= builder_csr_bankarray_csrbank5_rxfull_re;
    main_xover_txfull_re <= builder_csr_bankarray_csrbank5_xover_txfull_re;
    main_xover_rxempty_re <= builder_csr_bankarray_csrbank5_xover_rxempty_re;
    main_xover_status_re <= builder_csr_bankarray_csrbank5_xover_ev_status_re;
    if (builder_csr_bankarray_csrbank5_xover_ev_pending_re) begin
        main_xover_pending_r[1:0] <= builder_csr_bankarray_csrbank5_xover_ev_pending_r;
    end
    main_xover_pending_re <= builder_csr_bankarray_csrbank5_xover_ev_pending_re;
    if (builder_csr_bankarray_csrbank5_xover_ev_enable0_re) begin
        main_xover_enable_storage[1:0] <= builder_csr_bankarray_csrbank5_xover_ev_enable0_r;
    end
    main_xover_enable_re <= builder_csr_bankarray_csrbank5_xover_ev_enable0_re;
    main_xover_txempty_re <= builder_csr_bankarray_csrbank5_xover_txempty_re;
    main_xover_rxfull_re <= builder_csr_bankarray_csrbank5_xover_rxfull_re;
    if (sys_rst) begin
        main_reset_storage <= 2'd0;
        main_reset_re <= 1'd0;
        main_scratch_storage <= 32'd305419896;
        main_scratch_re <= 1'd0;
        main_bus_errors_re <= 1'd0;
        main_bus_errors <= 32'd0;
        main_cpu_vexriscv_debug_reset <= 1'd0;
        main_cpu_vexriscv_ibus_err <= 1'd0;
        main_cpu_vexriscv_dbus_err <= 1'd0;
        main_cpu_vexriscv_i_cmd_valid <= 1'd0;
        main_cpu_vexriscv_i_cmd_payload_wr <= 1'd0;
        main_cpu_vexriscv_i_cmd_payload_address <= 8'd0;
        main_cpu_vexriscv_i_cmd_payload_data <= 32'd0;
        main_cpu_vexriscv_reset_debug_logic <= 1'd0;
        main_cpu_vexriscv_transfer_complete <= 1'd0;
        main_cpu_vexriscv_transfer_in_progress <= 1'd0;
        main_cpu_vexriscv_transfer_wait_for_ack <= 1'd0;
        main_cpu_vexriscv_debug_bus_ack <= 1'd0;
        main_basesoc_ram_bus_ack <= 1'd0;
        main_ram_bus_ram_bus_ack <= 1'd0;
        serial_tx <= 1'd1;
        main_basesoc_tx_tick <= 1'd0;
        main_basesoc_rx_tick <= 1'd0;
        main_basesoc_rx_rx_d <= 1'd0;
        main_basesoc_incr <= 1'd0;
        main_basesoc_count <= 22'd4000000;
        main_uartcrossover_txfull_re <= 1'd0;
        main_uartcrossover_rxempty_re <= 1'd0;
        main_uartcrossover_tx_pending <= 1'd0;
        main_uartcrossover_tx_trigger_d <= 1'd0;
        main_uartcrossover_rx_pending <= 1'd0;
        main_uartcrossover_rx_trigger_d <= 1'd0;
        main_uartcrossover_status_re <= 1'd0;
        main_uartcrossover_pending_re <= 1'd0;
        main_uartcrossover_pending_r <= 2'd0;
        main_uartcrossover_enable_storage <= 2'd0;
        main_uartcrossover_enable_re <= 1'd0;
        main_uartcrossover_txempty_re <= 1'd0;
        main_uartcrossover_rxfull_re <= 1'd0;
        main_uartcrossover_tx_fifo_readable <= 1'd0;
        main_uartcrossover_tx_fifo_level0 <= 5'd0;
        main_uartcrossover_tx_fifo_produce <= 4'd0;
        main_uartcrossover_tx_fifo_consume <= 4'd0;
        main_uartcrossover_rx_fifo_readable <= 1'd0;
        main_uartcrossover_rx_fifo_level0 <= 5'd0;
        main_uartcrossover_rx_fifo_produce <= 4'd0;
        main_uartcrossover_rx_fifo_consume <= 4'd0;
        main_xover_txfull_re <= 1'd0;
        main_xover_rxempty_re <= 1'd0;
        main_xover_tx_pending <= 1'd0;
        main_xover_tx_trigger_d <= 1'd0;
        main_xover_rx_pending <= 1'd0;
        main_xover_rx_trigger_d <= 1'd0;
        main_xover_status_re <= 1'd0;
        main_xover_pending_re <= 1'd0;
        main_xover_pending_r <= 2'd0;
        main_xover_enable_storage <= 2'd0;
        main_xover_enable_re <= 1'd0;
        main_xover_txempty_re <= 1'd0;
        main_xover_rxfull_re <= 1'd0;
        main_xover_pipe_valid_source_valid <= 1'd0;
        main_xover_pipe_valid_source_payload_data <= 8'd0;
        main_xover_rx_fifo_readable <= 1'd0;
        main_xover_rx_fifo_level0 <= 5'd0;
        main_xover_rx_fifo_produce <= 4'd0;
        main_xover_rx_fifo_consume <= 4'd0;
        main_load_storage <= 32'd0;
        main_load_re <= 1'd0;
        main_reload_storage <= 32'd0;
        main_reload_re <= 1'd0;
        main_en_storage <= 1'd0;
        main_en_re <= 1'd0;
        main_update_value_storage <= 1'd0;
        main_update_value_re <= 1'd0;
        main_value_status <= 32'd0;
        main_value_re <= 1'd0;
        main_zero_pending <= 1'd0;
        main_zero_trigger_d <= 1'd0;
        main_status_re <= 1'd0;
        main_pending_re <= 1'd0;
        main_pending_r <= 1'd0;
        main_enable_storage <= 1'd0;
        main_enable_re <= 1'd0;
        main_value <= 32'd0;
        main_dfi_p0_rddata_valid <= 1'd0;
        main_rddata_en <= 3'd0;
        main_sdram_storage <= 4'd1;
        main_sdram_re <= 1'd0;
        main_sdram_command_storage <= 8'd0;
        main_sdram_command_re <= 1'd0;
        main_sdram_address_re <= 1'd0;
        main_sdram_baddress_re <= 1'd0;
        main_sdram_wrdata_re <= 1'd0;
        main_sdram_rddata_status <= 16'd0;
        main_sdram_rddata_re <= 1'd0;
        main_sdram_dfi_p0_address <= 13'd0;
        main_sdram_dfi_p0_bank <= 2'd0;
        main_sdram_dfi_p0_cas_n <= 1'd1;
        main_sdram_dfi_p0_cs_n <= 1'd1;
        main_sdram_dfi_p0_ras_n <= 1'd1;
        main_sdram_dfi_p0_we_n <= 1'd1;
        main_sdram_dfi_p0_wrdata_en <= 1'd0;
        main_sdram_dfi_p0_rddata_en <= 1'd0;
        main_sdram_cmd_payload_a <= 13'd0;
        main_sdram_cmd_payload_ba <= 2'd0;
        main_sdram_cmd_payload_cas <= 1'd0;
        main_sdram_cmd_payload_ras <= 1'd0;
        main_sdram_cmd_payload_we <= 1'd0;
        main_sdram_timer_count1 <= 9'd312;
        main_sdram_postponer_req_o <= 1'd0;
        main_sdram_postponer_count <= 1'd0;
        main_sdram_sequencer_done1 <= 1'd0;
        main_sdram_sequencer_trigger <= 3'd0;
        main_sdram_sequencer_count <= 1'd0;
        main_sdram_bankmachine0_level <= 4'd0;
        main_sdram_bankmachine0_produce <= 3'd0;
        main_sdram_bankmachine0_consume <= 3'd0;
        main_sdram_bankmachine0_pipe_valid_source_valid <= 1'd0;
        main_sdram_bankmachine0_pipe_valid_source_payload_we <= 1'd0;
        main_sdram_bankmachine0_pipe_valid_source_payload_addr <= 22'd0;
        main_sdram_bankmachine0_row <= 13'd0;
        main_sdram_bankmachine0_row_opened <= 1'd0;
        main_sdram_bankmachine0_twtpcon_ready <= 1'd0;
        main_sdram_bankmachine0_twtpcon_count <= 2'd0;
        main_sdram_bankmachine0_trccon_ready <= 1'd0;
        main_sdram_bankmachine0_trccon_count <= 2'd0;
        main_sdram_bankmachine0_trascon_ready <= 1'd0;
        main_sdram_bankmachine0_trascon_count <= 1'd0;
        main_sdram_bankmachine1_level <= 4'd0;
        main_sdram_bankmachine1_produce <= 3'd0;
        main_sdram_bankmachine1_consume <= 3'd0;
        main_sdram_bankmachine1_pipe_valid_source_valid <= 1'd0;
        main_sdram_bankmachine1_pipe_valid_source_payload_we <= 1'd0;
        main_sdram_bankmachine1_pipe_valid_source_payload_addr <= 22'd0;
        main_sdram_bankmachine1_row <= 13'd0;
        main_sdram_bankmachine1_row_opened <= 1'd0;
        main_sdram_bankmachine1_twtpcon_ready <= 1'd0;
        main_sdram_bankmachine1_twtpcon_count <= 2'd0;
        main_sdram_bankmachine1_trccon_ready <= 1'd0;
        main_sdram_bankmachine1_trccon_count <= 2'd0;
        main_sdram_bankmachine1_trascon_ready <= 1'd0;
        main_sdram_bankmachine1_trascon_count <= 1'd0;
        main_sdram_bankmachine2_level <= 4'd0;
        main_sdram_bankmachine2_produce <= 3'd0;
        main_sdram_bankmachine2_consume <= 3'd0;
        main_sdram_bankmachine2_pipe_valid_source_valid <= 1'd0;
        main_sdram_bankmachine2_pipe_valid_source_payload_we <= 1'd0;
        main_sdram_bankmachine2_pipe_valid_source_payload_addr <= 22'd0;
        main_sdram_bankmachine2_row <= 13'd0;
        main_sdram_bankmachine2_row_opened <= 1'd0;
        main_sdram_bankmachine2_twtpcon_ready <= 1'd0;
        main_sdram_bankmachine2_twtpcon_count <= 2'd0;
        main_sdram_bankmachine2_trccon_ready <= 1'd0;
        main_sdram_bankmachine2_trccon_count <= 2'd0;
        main_sdram_bankmachine2_trascon_ready <= 1'd0;
        main_sdram_bankmachine2_trascon_count <= 1'd0;
        main_sdram_bankmachine3_level <= 4'd0;
        main_sdram_bankmachine3_produce <= 3'd0;
        main_sdram_bankmachine3_consume <= 3'd0;
        main_sdram_bankmachine3_pipe_valid_source_valid <= 1'd0;
        main_sdram_bankmachine3_pipe_valid_source_payload_we <= 1'd0;
        main_sdram_bankmachine3_pipe_valid_source_payload_addr <= 22'd0;
        main_sdram_bankmachine3_row <= 13'd0;
        main_sdram_bankmachine3_row_opened <= 1'd0;
        main_sdram_bankmachine3_twtpcon_ready <= 1'd0;
        main_sdram_bankmachine3_twtpcon_count <= 2'd0;
        main_sdram_bankmachine3_trccon_ready <= 1'd0;
        main_sdram_bankmachine3_trccon_count <= 2'd0;
        main_sdram_bankmachine3_trascon_ready <= 1'd0;
        main_sdram_bankmachine3_trascon_count <= 1'd0;
        main_sdram_choose_cmd_grant <= 2'd0;
        main_sdram_choose_req_grant <= 2'd0;
        main_sdram_trrdcon_ready <= 1'd0;
        main_sdram_trrdcon_count <= 1'd0;
        main_sdram_tccdcon_ready <= 1'd0;
        main_sdram_tccdcon_count <= 1'd0;
        main_sdram_twtrcon_ready <= 1'd0;
        main_sdram_twtrcon_count <= 3'd0;
        main_sdram_time0 <= 5'd0;
        main_sdram_time1 <= 4'd0;
        main_wishbone_bridge_count <= 3'd0;
        main_wishbone_bridge_wdata_converter_converter_mux <= 3'd0;
        main_wishbone_bridge_rdata_converter_converter_source_payload_data <= 128'd0;
        main_wishbone_bridge_rdata_converter_converter_source_payload_valid_token_count <= 4'd0;
        main_wishbone_bridge_rdata_converter_converter_demux <= 3'd0;
        main_wishbone_bridge_rdata_converter_converter_strobe_all <= 1'd0;
        main_wishbone_bridge_aborted <= 1'd0;
        main_storage <= 8'd0;
        main_re <= 1'd0;
        spisdcard_clk <= 1'd0;
        spisdcard_mosi <= 1'd0;
        spisdcard_cs_n <= 1'd0;
        basesoc_miso <= 8'd0;
        basesoc_control_storage <= 16'd0;
        basesoc_control_re <= 1'd0;
        basesoc_status_re <= 1'd0;
        basesoc_mosi_re <= 1'd0;
        basesoc_miso_re <= 1'd0;
        basesoc_cs_storage <= 17'd1;
        basesoc_cs_re <= 1'd0;
        basesoc_loopback_storage <= 1'd0;
        basesoc_loopback_re <= 1'd0;
        basesoc_count <= 3'd0;
        basesoc_clk_divider1 <= 16'd0;
        basesoc_mosi_data <= 8'd0;
        basesoc_mosi_sel <= 3'd0;
        basesoc_miso_data <= 8'd0;
        basesoc_storage <= 16'd100;
        basesoc_re <= 1'd0;
        builder_basesoc_we <= 1'd0;
        builder_grant <= 2'd0;
        builder_slaves <= 5'd0;
        builder_count <= 20'd1000000;
        builder_csr_bankarray_sel_r <= 1'd0;
        builder_basesoc_rs232phytx_state <= 1'd0;
        builder_basesoc_rs232phyrx_state <= 1'd0;
        builder_basesoc_uartbone_state <= 3'd0;
        builder_basesoc_litedramcore_refresher_state <= 2'd0;
        builder_basesoc_litedramcore_bankmachine0_state <= 3'd0;
        builder_basesoc_litedramcore_bankmachine1_state <= 3'd0;
        builder_basesoc_litedramcore_bankmachine2_state <= 3'd0;
        builder_basesoc_litedramcore_bankmachine3_state <= 3'd0;
        builder_basesoc_litedramcore_multiplexer_state <= 3'd0;
        builder_basesoc_litedramcore_new_master_wdata_ready <= 1'd0;
        builder_basesoc_litedramcore_new_master_rdata_valid0 <= 1'd0;
        builder_basesoc_litedramcore_new_master_rdata_valid1 <= 1'd0;
        builder_basesoc_litedramcore_new_master_rdata_valid2 <= 1'd0;
        builder_basesoc_litedramcore_new_master_rdata_valid3 <= 1'd0;
        builder_basesoc_fullmemorywe_state <= 2'd0;
        builder_basesoc_litedramnativeportconverter_state <= 1'd0;
        builder_basesoc_fsm_state <= 2'd0;
        builder_basesoc_spimaster_state <= 2'd0;
        builder_basesoc_wishbone2csr_state <= 2'd0;
    end
    builder_regs0 <= serial_rx;
    builder_regs1 <= builder_regs0;
end


//------------------------------------------------------------------------------
// Specialized Logic
//------------------------------------------------------------------------------

//------------------------------------------------------------------------------
// Memory rom: 7240-words x 32-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: ---- | 
reg [31:0] rom[0:7239];
initial begin
	$readmemh("radiona_ulx3s_custom_rom.init", rom);
end
reg [31:0] rom_dat0;
always @(posedge sys_clk) begin
	rom_dat0 <= rom[main_basesoc_adr];
end
assign main_basesoc_dat_r = rom_dat0;


//------------------------------------------------------------------------------
// Memory sram: 2048-words x 32-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: Sync | Mode: Write-First | Write-Granularity: 8 
reg [31:0] sram[0:2047];
initial begin
	$readmemh("radiona_ulx3s_custom_sram.init", sram);
end
reg [10:0] sram_adr0;
always @(posedge sys_clk) begin
	if (main_ram_we[0])
		sram[main_ram_adr][7:0] <= main_ram_dat_w[7:0];
	if (main_ram_we[1])
		sram[main_ram_adr][15:8] <= main_ram_dat_w[15:8];
	if (main_ram_we[2])
		sram[main_ram_adr][23:16] <= main_ram_dat_w[23:16];
	if (main_ram_we[3])
		sram[main_ram_adr][31:24] <= main_ram_dat_w[31:24];
	sram_adr0 <= main_ram_adr;
end
assign main_ram_dat_r = sram[sram_adr0];


//------------------------------------------------------------------------------
// Memory mem: 39-words x 8-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: ---- | 
reg [7:0] mem[0:38];
initial begin
	$readmemh("radiona_ulx3s_custom_mem.init", mem);
end
reg [5:0] mem_adr0;
always @(posedge sys_clk) begin
	mem_adr0 <= builder_csr_bankarray_adr;
end
assign builder_csr_bankarray_dat_r = mem[mem_adr0];


//------------------------------------------------------------------------------
// Memory storage: 16-words x 10-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: Sync | Mode: Read-First  | Write-Granularity: 10 
// Port 1 | Read: Sync  | Write: ---- | 
reg [9:0] storage[0:15];
reg [9:0] storage_dat0;
reg [9:0] storage_dat1;
always @(posedge sys_clk) begin
	if (main_uartcrossover_tx_fifo_wrport_we)
		storage[main_uartcrossover_tx_fifo_wrport_adr] <= main_uartcrossover_tx_fifo_wrport_dat_w;
	storage_dat0 <= storage[main_uartcrossover_tx_fifo_wrport_adr];
end
always @(posedge sys_clk) begin
	if (main_uartcrossover_tx_fifo_rdport_re)
		storage_dat1 <= storage[main_uartcrossover_tx_fifo_rdport_adr];
end
assign main_uartcrossover_tx_fifo_wrport_dat_r = storage_dat0;
assign main_uartcrossover_tx_fifo_rdport_dat_r = storage_dat1;


//------------------------------------------------------------------------------
// Memory storage_1: 16-words x 10-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: Sync | Mode: Read-First  | Write-Granularity: 10 
// Port 1 | Read: Sync  | Write: ---- | 
reg [9:0] storage_1[0:15];
reg [9:0] storage_1_dat0;
reg [9:0] storage_1_dat1;
always @(posedge sys_clk) begin
	if (main_uartcrossover_rx_fifo_wrport_we)
		storage_1[main_uartcrossover_rx_fifo_wrport_adr] <= main_uartcrossover_rx_fifo_wrport_dat_w;
	storage_1_dat0 <= storage_1[main_uartcrossover_rx_fifo_wrport_adr];
end
always @(posedge sys_clk) begin
	if (main_uartcrossover_rx_fifo_rdport_re)
		storage_1_dat1 <= storage_1[main_uartcrossover_rx_fifo_rdport_adr];
end
assign main_uartcrossover_rx_fifo_wrport_dat_r = storage_1_dat0;
assign main_uartcrossover_rx_fifo_rdport_dat_r = storage_1_dat1;


//------------------------------------------------------------------------------
// Memory storage_2: 16-words x 10-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: Sync | Mode: Read-First  | Write-Granularity: 10 
// Port 1 | Read: Sync  | Write: ---- | 
reg [9:0] storage_2[0:15];
reg [9:0] storage_2_dat0;
reg [9:0] storage_2_dat1;
always @(posedge sys_clk) begin
	if (main_xover_rx_fifo_wrport_we)
		storage_2[main_xover_rx_fifo_wrport_adr] <= main_xover_rx_fifo_wrport_dat_w;
	storage_2_dat0 <= storage_2[main_xover_rx_fifo_wrport_adr];
end
always @(posedge sys_clk) begin
	if (main_xover_rx_fifo_rdport_re)
		storage_2_dat1 <= storage_2[main_xover_rx_fifo_rdport_adr];
end
assign main_xover_rx_fifo_wrport_dat_r = storage_2_dat0;
assign main_xover_rx_fifo_rdport_dat_r = storage_2_dat1;


//------------------------------------------------------------------------------
// Memory storage_3: 8-words x 25-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: Sync | Mode: Read-First  | Write-Granularity: 25 
// Port 1 | Read: Async | Write: ---- | 
reg [24:0] storage_3[0:7];
reg [24:0] storage_3_dat0;
always @(posedge sys_clk) begin
	if (main_sdram_bankmachine0_wrport_we)
		storage_3[main_sdram_bankmachine0_wrport_adr] <= main_sdram_bankmachine0_wrport_dat_w;
	storage_3_dat0 <= storage_3[main_sdram_bankmachine0_wrport_adr];
end
always @(posedge sys_clk) begin
end
assign main_sdram_bankmachine0_wrport_dat_r = storage_3_dat0;
assign main_sdram_bankmachine0_rdport_dat_r = storage_3[main_sdram_bankmachine0_rdport_adr];


//------------------------------------------------------------------------------
// Memory storage_4: 8-words x 25-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: Sync | Mode: Read-First  | Write-Granularity: 25 
// Port 1 | Read: Async | Write: ---- | 
reg [24:0] storage_4[0:7];
reg [24:0] storage_4_dat0;
always @(posedge sys_clk) begin
	if (main_sdram_bankmachine1_wrport_we)
		storage_4[main_sdram_bankmachine1_wrport_adr] <= main_sdram_bankmachine1_wrport_dat_w;
	storage_4_dat0 <= storage_4[main_sdram_bankmachine1_wrport_adr];
end
always @(posedge sys_clk) begin
end
assign main_sdram_bankmachine1_wrport_dat_r = storage_4_dat0;
assign main_sdram_bankmachine1_rdport_dat_r = storage_4[main_sdram_bankmachine1_rdport_adr];


//------------------------------------------------------------------------------
// Memory storage_5: 8-words x 25-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: Sync | Mode: Read-First  | Write-Granularity: 25 
// Port 1 | Read: Async | Write: ---- | 
reg [24:0] storage_5[0:7];
reg [24:0] storage_5_dat0;
always @(posedge sys_clk) begin
	if (main_sdram_bankmachine2_wrport_we)
		storage_5[main_sdram_bankmachine2_wrport_adr] <= main_sdram_bankmachine2_wrport_dat_w;
	storage_5_dat0 <= storage_5[main_sdram_bankmachine2_wrport_adr];
end
always @(posedge sys_clk) begin
end
assign main_sdram_bankmachine2_wrport_dat_r = storage_5_dat0;
assign main_sdram_bankmachine2_rdport_dat_r = storage_5[main_sdram_bankmachine2_rdport_adr];


//------------------------------------------------------------------------------
// Memory storage_6: 8-words x 25-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: Sync | Mode: Read-First  | Write-Granularity: 25 
// Port 1 | Read: Async | Write: ---- | 
reg [24:0] storage_6[0:7];
reg [24:0] storage_6_dat0;
always @(posedge sys_clk) begin
	if (main_sdram_bankmachine3_wrport_we)
		storage_6[main_sdram_bankmachine3_wrport_adr] <= main_sdram_bankmachine3_wrport_dat_w;
	storage_6_dat0 <= storage_6[main_sdram_bankmachine3_wrport_adr];
end
always @(posedge sys_clk) begin
end
assign main_sdram_bankmachine3_wrport_dat_r = storage_6_dat0;
assign main_sdram_bankmachine3_rdport_dat_r = storage_6[main_sdram_bankmachine3_rdport_adr];


//------------------------------------------------------------------------------
// Memory tag_mem: 512-words x 24-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: Sync | Mode: Write-First | Write-Granularity: 24 
reg [23:0] tag_mem[0:511];
reg [8:0] tag_mem_adr0;
always @(posedge sys_clk) begin
	if (main_tag_port_we)
		tag_mem[main_tag_port_adr] <= main_tag_port_dat_w;
	tag_mem_adr0 <= main_tag_port_adr;
end
assign main_tag_port_dat_r = tag_mem[tag_mem_adr0];


(* FREQUENCY_PIN_CLKI = "25.0", FREQUENCY_PIN_CLKOP = "40.0", FREQUENCY_PIN_CLKOS = "40.0", ICP_CURRENT = "6", LPF_RESISTOR = "16", MFG_ENABLE_FILTEROPAMP = "1", MFG_GMCREF_SEL = "2" *)
EHXPLLL #(
	.CLKFB_DIV(5'd16),
	.CLKI_DIV(1'd1),
	.CLKOP_CPHASE(4'd9),
	.CLKOP_DIV(4'd10),
	.CLKOP_ENABLE("ENABLED"),
	.CLKOP_FPHASE(1'd0),
	.CLKOS2_CPHASE(1'd0),
	.CLKOS2_DIV(1'd1),
	.CLKOS2_ENABLE("ENABLED"),
	.CLKOS2_FPHASE(1'd0),
	.CLKOS_CPHASE(4'd11),
	.CLKOS_DIV(4'd10),
	.CLKOS_ENABLE("ENABLED"),
	.CLKOS_FPHASE(1'd0),
	.FEEDBK_PATH("INT_OS2")
) EHXPLLL (
	.CLKI(main_clkin),
	.RST(main_reset),
	.STDBY(main_stdby),
	.CLKOP(main_clkout0),
	.CLKOS(main_clkout1),
	.CLKOS2(builder_basesoc_crg_ecp5pll),
	.LOCK(builder_basesoc_crg_locked)
);

VexRiscv VexRiscv(
	.clk(sys_clk),
	.dBusWishbone_ACK(main_cpu_dbus_dbus_ack),
	.dBusWishbone_DAT_MISO(main_cpu_dbus_dbus_dat_r),
	.dBusWishbone_ERR((main_cpu_dbus_dbus_err | main_cpu_vexriscv_dbus_err)),
	.debugReset(sys_rst),
	.debug_bus_cmd_payload_address(main_cpu_vexriscv_i_cmd_payload_address),
	.debug_bus_cmd_payload_data(main_cpu_vexriscv_i_cmd_payload_data),
	.debug_bus_cmd_payload_wr(main_cpu_vexriscv_i_cmd_payload_wr),
	.debug_bus_cmd_valid(main_cpu_vexriscv_i_cmd_valid),
	.externalInterruptArray(main_cpu_interrupt),
	.externalResetVector(main_vexriscv),
	.iBusWishbone_ACK(main_cpu_ibus_ibus_ack),
	.iBusWishbone_DAT_MISO(main_cpu_ibus_ibus_dat_r),
	.iBusWishbone_ERR((main_cpu_ibus_ibus_err | main_cpu_vexriscv_ibus_err)),
	.reset(((sys_rst | main_cpu_reset) | main_cpu_vexriscv_debug_reset)),
	.softwareInterrupt(1'd0),
	.timerInterrupt(1'd0),
	.dBusWishbone_ADR(main_cpu_dbus_dbus_adr),
	.dBusWishbone_BTE(main_cpu_dbus_dbus_bte),
	.dBusWishbone_CTI(main_cpu_dbus_dbus_cti),
	.dBusWishbone_CYC(main_cpu_dbus_dbus_cyc),
	.dBusWishbone_DAT_MOSI(main_cpu_dbus_dbus_dat_w),
	.dBusWishbone_SEL(main_cpu_dbus_dbus_sel),
	.dBusWishbone_STB(main_cpu_dbus_dbus_stb),
	.dBusWishbone_WE(main_cpu_dbus_dbus_we),
	.debug_bus_cmd_ready(main_cpu_vexriscv_o_cmd_ready),
	.debug_bus_rsp_data(main_cpu_vexriscv_o_rsp_data),
	.debug_resetOut(main_cpu_vexriscv_o_resetOut),
	.iBusWishbone_ADR(main_cpu_ibus_ibus_adr),
	.iBusWishbone_BTE(main_cpu_ibus_ibus_bte),
	.iBusWishbone_CTI(main_cpu_ibus_ibus_cti),
	.iBusWishbone_CYC(main_cpu_ibus_ibus_cyc),
	.iBusWishbone_DAT_MOSI(main_cpu_ibus_ibus_dat_w),
	.iBusWishbone_SEL(main_cpu_ibus_ibus_sel),
	.iBusWishbone_STB(main_cpu_ibus_ibus_stb),
	.iBusWishbone_WE(main_cpu_ibus_ibus_we)
);

//------------------------------------------------------------------------------
// Memory data_mem_grain0: 512-words x 8-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: Sync | Mode: Write-First | Write-Granularity: 8 
reg [7:0] data_mem_grain0[0:511];
reg [8:0] data_mem_grain0_adr0;
always @(posedge sys_clk) begin
	if (main_data_port_we[0])
		data_mem_grain0[main_data_port_adr] <= main_data_port_dat_w[7:0];
	data_mem_grain0_adr0 <= main_data_port_adr;
end
assign main_data_port_dat_r[7:0] = data_mem_grain0[data_mem_grain0_adr0];


//------------------------------------------------------------------------------
// Memory data_mem_grain1: 512-words x 8-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: Sync | Mode: Write-First | Write-Granularity: 8 
reg [7:0] data_mem_grain1[0:511];
reg [8:0] data_mem_grain1_adr0;
always @(posedge sys_clk) begin
	if (main_data_port_we[1])
		data_mem_grain1[main_data_port_adr] <= main_data_port_dat_w[15:8];
	data_mem_grain1_adr0 <= main_data_port_adr;
end
assign main_data_port_dat_r[15:8] = data_mem_grain1[data_mem_grain1_adr0];


//------------------------------------------------------------------------------
// Memory data_mem_grain2: 512-words x 8-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: Sync | Mode: Write-First | Write-Granularity: 8 
reg [7:0] data_mem_grain2[0:511];
reg [8:0] data_mem_grain2_adr0;
always @(posedge sys_clk) begin
	if (main_data_port_we[2])
		data_mem_grain2[main_data_port_adr] <= main_data_port_dat_w[23:16];
	data_mem_grain2_adr0 <= main_data_port_adr;
end
assign main_data_port_dat_r[23:16] = data_mem_grain2[data_mem_grain2_adr0];


//------------------------------------------------------------------------------
// Memory data_mem_grain3: 512-words x 8-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: Sync | Mode: Write-First | Write-Granularity: 8 
reg [7:0] data_mem_grain3[0:511];
reg [8:0] data_mem_grain3_adr0;
always @(posedge sys_clk) begin
	if (main_data_port_we[3])
		data_mem_grain3[main_data_port_adr] <= main_data_port_dat_w[31:24];
	data_mem_grain3_adr0 <= main_data_port_adr;
end
assign main_data_port_dat_r[31:24] = data_mem_grain3[data_mem_grain3_adr0];


//------------------------------------------------------------------------------
// Memory data_mem_grain4: 512-words x 8-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: Sync | Mode: Write-First | Write-Granularity: 8 
reg [7:0] data_mem_grain4[0:511];
reg [8:0] data_mem_grain4_adr0;
always @(posedge sys_clk) begin
	if (main_data_port_we[4])
		data_mem_grain4[main_data_port_adr] <= main_data_port_dat_w[39:32];
	data_mem_grain4_adr0 <= main_data_port_adr;
end
assign main_data_port_dat_r[39:32] = data_mem_grain4[data_mem_grain4_adr0];


//------------------------------------------------------------------------------
// Memory data_mem_grain5: 512-words x 8-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: Sync | Mode: Write-First | Write-Granularity: 8 
reg [7:0] data_mem_grain5[0:511];
reg [8:0] data_mem_grain5_adr0;
always @(posedge sys_clk) begin
	if (main_data_port_we[5])
		data_mem_grain5[main_data_port_adr] <= main_data_port_dat_w[47:40];
	data_mem_grain5_adr0 <= main_data_port_adr;
end
assign main_data_port_dat_r[47:40] = data_mem_grain5[data_mem_grain5_adr0];


//------------------------------------------------------------------------------
// Memory data_mem_grain6: 512-words x 8-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: Sync | Mode: Write-First | Write-Granularity: 8 
reg [7:0] data_mem_grain6[0:511];
reg [8:0] data_mem_grain6_adr0;
always @(posedge sys_clk) begin
	if (main_data_port_we[6])
		data_mem_grain6[main_data_port_adr] <= main_data_port_dat_w[55:48];
	data_mem_grain6_adr0 <= main_data_port_adr;
end
assign main_data_port_dat_r[55:48] = data_mem_grain6[data_mem_grain6_adr0];


//------------------------------------------------------------------------------
// Memory data_mem_grain7: 512-words x 8-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: Sync | Mode: Write-First | Write-Granularity: 8 
reg [7:0] data_mem_grain7[0:511];
reg [8:0] data_mem_grain7_adr0;
always @(posedge sys_clk) begin
	if (main_data_port_we[7])
		data_mem_grain7[main_data_port_adr] <= main_data_port_dat_w[63:56];
	data_mem_grain7_adr0 <= main_data_port_adr;
end
assign main_data_port_dat_r[63:56] = data_mem_grain7[data_mem_grain7_adr0];


//------------------------------------------------------------------------------
// Memory data_mem_grain8: 512-words x 8-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: Sync | Mode: Write-First | Write-Granularity: 8 
reg [7:0] data_mem_grain8[0:511];
reg [8:0] data_mem_grain8_adr0;
always @(posedge sys_clk) begin
	if (main_data_port_we[8])
		data_mem_grain8[main_data_port_adr] <= main_data_port_dat_w[71:64];
	data_mem_grain8_adr0 <= main_data_port_adr;
end
assign main_data_port_dat_r[71:64] = data_mem_grain8[data_mem_grain8_adr0];


//------------------------------------------------------------------------------
// Memory data_mem_grain9: 512-words x 8-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: Sync | Mode: Write-First | Write-Granularity: 8 
reg [7:0] data_mem_grain9[0:511];
reg [8:0] data_mem_grain9_adr0;
always @(posedge sys_clk) begin
	if (main_data_port_we[9])
		data_mem_grain9[main_data_port_adr] <= main_data_port_dat_w[79:72];
	data_mem_grain9_adr0 <= main_data_port_adr;
end
assign main_data_port_dat_r[79:72] = data_mem_grain9[data_mem_grain9_adr0];


//------------------------------------------------------------------------------
// Memory data_mem_grain10: 512-words x 8-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: Sync | Mode: Write-First | Write-Granularity: 8 
reg [7:0] data_mem_grain10[0:511];
reg [8:0] data_mem_grain10_adr0;
always @(posedge sys_clk) begin
	if (main_data_port_we[10])
		data_mem_grain10[main_data_port_adr] <= main_data_port_dat_w[87:80];
	data_mem_grain10_adr0 <= main_data_port_adr;
end
assign main_data_port_dat_r[87:80] = data_mem_grain10[data_mem_grain10_adr0];


//------------------------------------------------------------------------------
// Memory data_mem_grain11: 512-words x 8-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: Sync | Mode: Write-First | Write-Granularity: 8 
reg [7:0] data_mem_grain11[0:511];
reg [8:0] data_mem_grain11_adr0;
always @(posedge sys_clk) begin
	if (main_data_port_we[11])
		data_mem_grain11[main_data_port_adr] <= main_data_port_dat_w[95:88];
	data_mem_grain11_adr0 <= main_data_port_adr;
end
assign main_data_port_dat_r[95:88] = data_mem_grain11[data_mem_grain11_adr0];


//------------------------------------------------------------------------------
// Memory data_mem_grain12: 512-words x 8-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: Sync | Mode: Write-First | Write-Granularity: 8 
reg [7:0] data_mem_grain12[0:511];
reg [8:0] data_mem_grain12_adr0;
always @(posedge sys_clk) begin
	if (main_data_port_we[12])
		data_mem_grain12[main_data_port_adr] <= main_data_port_dat_w[103:96];
	data_mem_grain12_adr0 <= main_data_port_adr;
end
assign main_data_port_dat_r[103:96] = data_mem_grain12[data_mem_grain12_adr0];


//------------------------------------------------------------------------------
// Memory data_mem_grain13: 512-words x 8-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: Sync | Mode: Write-First | Write-Granularity: 8 
reg [7:0] data_mem_grain13[0:511];
reg [8:0] data_mem_grain13_adr0;
always @(posedge sys_clk) begin
	if (main_data_port_we[13])
		data_mem_grain13[main_data_port_adr] <= main_data_port_dat_w[111:104];
	data_mem_grain13_adr0 <= main_data_port_adr;
end
assign main_data_port_dat_r[111:104] = data_mem_grain13[data_mem_grain13_adr0];


//------------------------------------------------------------------------------
// Memory data_mem_grain14: 512-words x 8-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: Sync | Mode: Write-First | Write-Granularity: 8 
reg [7:0] data_mem_grain14[0:511];
reg [8:0] data_mem_grain14_adr0;
always @(posedge sys_clk) begin
	if (main_data_port_we[14])
		data_mem_grain14[main_data_port_adr] <= main_data_port_dat_w[119:112];
	data_mem_grain14_adr0 <= main_data_port_adr;
end
assign main_data_port_dat_r[119:112] = data_mem_grain14[data_mem_grain14_adr0];


//------------------------------------------------------------------------------
// Memory data_mem_grain15: 512-words x 8-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: Sync | Mode: Write-First | Write-Granularity: 8 
reg [7:0] data_mem_grain15[0:511];
reg [8:0] data_mem_grain15_adr0;
always @(posedge sys_clk) begin
	if (main_data_port_we[15])
		data_mem_grain15[main_data_port_adr] <= main_data_port_dat_w[127:120];
	data_mem_grain15_adr0 <= main_data_port_adr;
end
assign main_data_port_dat_r[127:120] = data_mem_grain15[data_mem_grain15_adr0];


FD1S3BX FD1S3BX(
	.CK(sys_clk),
	.D(1'd0),
	.PD((~main_locked)),
	.Q(builder_rst10)
);

FD1S3BX FD1S3BX_1(
	.CK(sys_clk),
	.D(builder_rst10),
	.PD((~main_locked)),
	.Q(sys_rst)
);

FD1S3BX FD1S3BX_2(
	.CK(sys_ps_clk),
	.D(1'd0),
	.PD((~main_locked)),
	.Q(builder_rst11)
);

FD1S3BX FD1S3BX_3(
	.CK(sys_ps_clk),
	.D(builder_rst11),
	.PD((~main_locked)),
	.Q(sys_ps_rst)
);

ODDRX1F ODDRX1F(
	.D0(1'd1),
	.D1(1'd0),
	.SCLK(sys_ps_clk),
	.Q(sdram_clock)
);

OFS1P3BX OFS1P3BX(
	.D(main_dfi_p0_cs_n),
	.PD(1'd0),
	.SCLK(sys_clk),
	.SP(1'd1),
	.Q(sdram_cs_n)
);

OFS1P3BX OFS1P3BX_1(
	.D(main_dfi_p0_address[0]),
	.PD(1'd0),
	.SCLK(sys_clk),
	.SP(1'd1),
	.Q(sdram_a[0])
);

OFS1P3BX OFS1P3BX_2(
	.D(main_dfi_p0_address[1]),
	.PD(1'd0),
	.SCLK(sys_clk),
	.SP(1'd1),
	.Q(sdram_a[1])
);

OFS1P3BX OFS1P3BX_3(
	.D(main_dfi_p0_address[2]),
	.PD(1'd0),
	.SCLK(sys_clk),
	.SP(1'd1),
	.Q(sdram_a[2])
);

OFS1P3BX OFS1P3BX_4(
	.D(main_dfi_p0_address[3]),
	.PD(1'd0),
	.SCLK(sys_clk),
	.SP(1'd1),
	.Q(sdram_a[3])
);

OFS1P3BX OFS1P3BX_5(
	.D(main_dfi_p0_address[4]),
	.PD(1'd0),
	.SCLK(sys_clk),
	.SP(1'd1),
	.Q(sdram_a[4])
);

OFS1P3BX OFS1P3BX_6(
	.D(main_dfi_p0_address[5]),
	.PD(1'd0),
	.SCLK(sys_clk),
	.SP(1'd1),
	.Q(sdram_a[5])
);

OFS1P3BX OFS1P3BX_7(
	.D(main_dfi_p0_address[6]),
	.PD(1'd0),
	.SCLK(sys_clk),
	.SP(1'd1),
	.Q(sdram_a[6])
);

OFS1P3BX OFS1P3BX_8(
	.D(main_dfi_p0_address[7]),
	.PD(1'd0),
	.SCLK(sys_clk),
	.SP(1'd1),
	.Q(sdram_a[7])
);

OFS1P3BX OFS1P3BX_9(
	.D(main_dfi_p0_address[8]),
	.PD(1'd0),
	.SCLK(sys_clk),
	.SP(1'd1),
	.Q(sdram_a[8])
);

OFS1P3BX OFS1P3BX_10(
	.D(main_dfi_p0_address[9]),
	.PD(1'd0),
	.SCLK(sys_clk),
	.SP(1'd1),
	.Q(sdram_a[9])
);

OFS1P3BX OFS1P3BX_11(
	.D(main_dfi_p0_address[10]),
	.PD(1'd0),
	.SCLK(sys_clk),
	.SP(1'd1),
	.Q(sdram_a[10])
);

OFS1P3BX OFS1P3BX_12(
	.D(main_dfi_p0_address[11]),
	.PD(1'd0),
	.SCLK(sys_clk),
	.SP(1'd1),
	.Q(sdram_a[11])
);

OFS1P3BX OFS1P3BX_13(
	.D(main_dfi_p0_address[12]),
	.PD(1'd0),
	.SCLK(sys_clk),
	.SP(1'd1),
	.Q(sdram_a[12])
);

OFS1P3BX OFS1P3BX_14(
	.D(main_dfi_p0_bank[0]),
	.PD(1'd0),
	.SCLK(sys_clk),
	.SP(1'd1),
	.Q(sdram_ba[0])
);

OFS1P3BX OFS1P3BX_15(
	.D(main_dfi_p0_bank[1]),
	.PD(1'd0),
	.SCLK(sys_clk),
	.SP(1'd1),
	.Q(sdram_ba[1])
);

OFS1P3BX OFS1P3BX_16(
	.D(main_dfi_p0_ras_n),
	.PD(1'd0),
	.SCLK(sys_clk),
	.SP(1'd1),
	.Q(sdram_ras_n)
);

OFS1P3BX OFS1P3BX_17(
	.D(main_dfi_p0_cas_n),
	.PD(1'd0),
	.SCLK(sys_clk),
	.SP(1'd1),
	.Q(sdram_cas_n)
);

OFS1P3BX OFS1P3BX_18(
	.D(main_dfi_p0_we_n),
	.PD(1'd0),
	.SCLK(sys_clk),
	.SP(1'd1),
	.Q(sdram_we_n)
);

OFS1P3BX OFS1P3BX_19(
	.D(main_dfi_p0_cke),
	.PD(1'd0),
	.SCLK(sys_clk),
	.SP(1'd1),
	.Q(sdram_cke)
);

OFS1P3BX OFS1P3BX_20(
	.D((main_dfi_p0_wrdata_en & main_dfi_p0_wrdata_mask[0])),
	.PD(1'd0),
	.SCLK(sys_clk),
	.SP(1'd1),
	.Q(sdram_dm[0])
);

OFS1P3BX OFS1P3BX_21(
	.D((main_dfi_p0_wrdata_en & main_dfi_p0_wrdata_mask[1])),
	.PD(1'd0),
	.SCLK(sys_clk),
	.SP(1'd1),
	.Q(sdram_dm[1])
);

OFS1P3BX OFS1P3BX_22(
	.D(main_dfi_p0_wrdata[0]),
	.PD(1'd0),
	.SCLK(sys_clk),
	.SP(1'd1),
	.Q(builder_inferedsdrtristate0__o)
);

IFS1P3BX IFS1P3BX(
	.D(builder_inferedsdrtristate0__i),
	.PD(1'd0),
	.SCLK(sys_clk),
	.SP(1'd1),
	.Q(main_dfi_p0_rddata[0])
);

TRELLIS_IO #(
	.DIR("BIDIR")
) TRELLIS_IO (
	.B(sdram_dq[0]),
	.I(builder_inferedsdrtristate0__o),
	.T((~builder_inferedsdrtristate0_oe)),
	.O(builder_inferedsdrtristate0__i)
);

OFS1P3BX OFS1P3BX_23(
	.D(main_dfi_p0_wrdata[1]),
	.PD(1'd0),
	.SCLK(sys_clk),
	.SP(1'd1),
	.Q(builder_inferedsdrtristate1__o)
);

IFS1P3BX IFS1P3BX_1(
	.D(builder_inferedsdrtristate1__i),
	.PD(1'd0),
	.SCLK(sys_clk),
	.SP(1'd1),
	.Q(main_dfi_p0_rddata[1])
);

TRELLIS_IO #(
	.DIR("BIDIR")
) TRELLIS_IO_1 (
	.B(sdram_dq[1]),
	.I(builder_inferedsdrtristate1__o),
	.T((~builder_inferedsdrtristate1_oe)),
	.O(builder_inferedsdrtristate1__i)
);

OFS1P3BX OFS1P3BX_24(
	.D(main_dfi_p0_wrdata[2]),
	.PD(1'd0),
	.SCLK(sys_clk),
	.SP(1'd1),
	.Q(builder_inferedsdrtristate2__o)
);

IFS1P3BX IFS1P3BX_2(
	.D(builder_inferedsdrtristate2__i),
	.PD(1'd0),
	.SCLK(sys_clk),
	.SP(1'd1),
	.Q(main_dfi_p0_rddata[2])
);

TRELLIS_IO #(
	.DIR("BIDIR")
) TRELLIS_IO_2 (
	.B(sdram_dq[2]),
	.I(builder_inferedsdrtristate2__o),
	.T((~builder_inferedsdrtristate2_oe)),
	.O(builder_inferedsdrtristate2__i)
);

OFS1P3BX OFS1P3BX_25(
	.D(main_dfi_p0_wrdata[3]),
	.PD(1'd0),
	.SCLK(sys_clk),
	.SP(1'd1),
	.Q(builder_inferedsdrtristate3__o)
);

IFS1P3BX IFS1P3BX_3(
	.D(builder_inferedsdrtristate3__i),
	.PD(1'd0),
	.SCLK(sys_clk),
	.SP(1'd1),
	.Q(main_dfi_p0_rddata[3])
);

TRELLIS_IO #(
	.DIR("BIDIR")
) TRELLIS_IO_3 (
	.B(sdram_dq[3]),
	.I(builder_inferedsdrtristate3__o),
	.T((~builder_inferedsdrtristate3_oe)),
	.O(builder_inferedsdrtristate3__i)
);

OFS1P3BX OFS1P3BX_26(
	.D(main_dfi_p0_wrdata[4]),
	.PD(1'd0),
	.SCLK(sys_clk),
	.SP(1'd1),
	.Q(builder_inferedsdrtristate4__o)
);

IFS1P3BX IFS1P3BX_4(
	.D(builder_inferedsdrtristate4__i),
	.PD(1'd0),
	.SCLK(sys_clk),
	.SP(1'd1),
	.Q(main_dfi_p0_rddata[4])
);

TRELLIS_IO #(
	.DIR("BIDIR")
) TRELLIS_IO_4 (
	.B(sdram_dq[4]),
	.I(builder_inferedsdrtristate4__o),
	.T((~builder_inferedsdrtristate4_oe)),
	.O(builder_inferedsdrtristate4__i)
);

OFS1P3BX OFS1P3BX_27(
	.D(main_dfi_p0_wrdata[5]),
	.PD(1'd0),
	.SCLK(sys_clk),
	.SP(1'd1),
	.Q(builder_inferedsdrtristate5__o)
);

IFS1P3BX IFS1P3BX_5(
	.D(builder_inferedsdrtristate5__i),
	.PD(1'd0),
	.SCLK(sys_clk),
	.SP(1'd1),
	.Q(main_dfi_p0_rddata[5])
);

TRELLIS_IO #(
	.DIR("BIDIR")
) TRELLIS_IO_5 (
	.B(sdram_dq[5]),
	.I(builder_inferedsdrtristate5__o),
	.T((~builder_inferedsdrtristate5_oe)),
	.O(builder_inferedsdrtristate5__i)
);

OFS1P3BX OFS1P3BX_28(
	.D(main_dfi_p0_wrdata[6]),
	.PD(1'd0),
	.SCLK(sys_clk),
	.SP(1'd1),
	.Q(builder_inferedsdrtristate6__o)
);

IFS1P3BX IFS1P3BX_6(
	.D(builder_inferedsdrtristate6__i),
	.PD(1'd0),
	.SCLK(sys_clk),
	.SP(1'd1),
	.Q(main_dfi_p0_rddata[6])
);

TRELLIS_IO #(
	.DIR("BIDIR")
) TRELLIS_IO_6 (
	.B(sdram_dq[6]),
	.I(builder_inferedsdrtristate6__o),
	.T((~builder_inferedsdrtristate6_oe)),
	.O(builder_inferedsdrtristate6__i)
);

OFS1P3BX OFS1P3BX_29(
	.D(main_dfi_p0_wrdata[7]),
	.PD(1'd0),
	.SCLK(sys_clk),
	.SP(1'd1),
	.Q(builder_inferedsdrtristate7__o)
);

IFS1P3BX IFS1P3BX_7(
	.D(builder_inferedsdrtristate7__i),
	.PD(1'd0),
	.SCLK(sys_clk),
	.SP(1'd1),
	.Q(main_dfi_p0_rddata[7])
);

TRELLIS_IO #(
	.DIR("BIDIR")
) TRELLIS_IO_7 (
	.B(sdram_dq[7]),
	.I(builder_inferedsdrtristate7__o),
	.T((~builder_inferedsdrtristate7_oe)),
	.O(builder_inferedsdrtristate7__i)
);

OFS1P3BX OFS1P3BX_30(
	.D(main_dfi_p0_wrdata[8]),
	.PD(1'd0),
	.SCLK(sys_clk),
	.SP(1'd1),
	.Q(builder_inferedsdrtristate8__o)
);

IFS1P3BX IFS1P3BX_8(
	.D(builder_inferedsdrtristate8__i),
	.PD(1'd0),
	.SCLK(sys_clk),
	.SP(1'd1),
	.Q(main_dfi_p0_rddata[8])
);

TRELLIS_IO #(
	.DIR("BIDIR")
) TRELLIS_IO_8 (
	.B(sdram_dq[8]),
	.I(builder_inferedsdrtristate8__o),
	.T((~builder_inferedsdrtristate8_oe)),
	.O(builder_inferedsdrtristate8__i)
);

OFS1P3BX OFS1P3BX_31(
	.D(main_dfi_p0_wrdata[9]),
	.PD(1'd0),
	.SCLK(sys_clk),
	.SP(1'd1),
	.Q(builder_inferedsdrtristate9__o)
);

IFS1P3BX IFS1P3BX_9(
	.D(builder_inferedsdrtristate9__i),
	.PD(1'd0),
	.SCLK(sys_clk),
	.SP(1'd1),
	.Q(main_dfi_p0_rddata[9])
);

TRELLIS_IO #(
	.DIR("BIDIR")
) TRELLIS_IO_9 (
	.B(sdram_dq[9]),
	.I(builder_inferedsdrtristate9__o),
	.T((~builder_inferedsdrtristate9_oe)),
	.O(builder_inferedsdrtristate9__i)
);

OFS1P3BX OFS1P3BX_32(
	.D(main_dfi_p0_wrdata[10]),
	.PD(1'd0),
	.SCLK(sys_clk),
	.SP(1'd1),
	.Q(builder_inferedsdrtristate10__o)
);

IFS1P3BX IFS1P3BX_10(
	.D(builder_inferedsdrtristate10__i),
	.PD(1'd0),
	.SCLK(sys_clk),
	.SP(1'd1),
	.Q(main_dfi_p0_rddata[10])
);

TRELLIS_IO #(
	.DIR("BIDIR")
) TRELLIS_IO_10 (
	.B(sdram_dq[10]),
	.I(builder_inferedsdrtristate10__o),
	.T((~builder_inferedsdrtristate10_oe)),
	.O(builder_inferedsdrtristate10__i)
);

OFS1P3BX OFS1P3BX_33(
	.D(main_dfi_p0_wrdata[11]),
	.PD(1'd0),
	.SCLK(sys_clk),
	.SP(1'd1),
	.Q(builder_inferedsdrtristate11__o)
);

IFS1P3BX IFS1P3BX_11(
	.D(builder_inferedsdrtristate11__i),
	.PD(1'd0),
	.SCLK(sys_clk),
	.SP(1'd1),
	.Q(main_dfi_p0_rddata[11])
);

TRELLIS_IO #(
	.DIR("BIDIR")
) TRELLIS_IO_11 (
	.B(sdram_dq[11]),
	.I(builder_inferedsdrtristate11__o),
	.T((~builder_inferedsdrtristate11_oe)),
	.O(builder_inferedsdrtristate11__i)
);

OFS1P3BX OFS1P3BX_34(
	.D(main_dfi_p0_wrdata[12]),
	.PD(1'd0),
	.SCLK(sys_clk),
	.SP(1'd1),
	.Q(builder_inferedsdrtristate12__o)
);

IFS1P3BX IFS1P3BX_12(
	.D(builder_inferedsdrtristate12__i),
	.PD(1'd0),
	.SCLK(sys_clk),
	.SP(1'd1),
	.Q(main_dfi_p0_rddata[12])
);

TRELLIS_IO #(
	.DIR("BIDIR")
) TRELLIS_IO_12 (
	.B(sdram_dq[12]),
	.I(builder_inferedsdrtristate12__o),
	.T((~builder_inferedsdrtristate12_oe)),
	.O(builder_inferedsdrtristate12__i)
);

OFS1P3BX OFS1P3BX_35(
	.D(main_dfi_p0_wrdata[13]),
	.PD(1'd0),
	.SCLK(sys_clk),
	.SP(1'd1),
	.Q(builder_inferedsdrtristate13__o)
);

IFS1P3BX IFS1P3BX_13(
	.D(builder_inferedsdrtristate13__i),
	.PD(1'd0),
	.SCLK(sys_clk),
	.SP(1'd1),
	.Q(main_dfi_p0_rddata[13])
);

TRELLIS_IO #(
	.DIR("BIDIR")
) TRELLIS_IO_13 (
	.B(sdram_dq[13]),
	.I(builder_inferedsdrtristate13__o),
	.T((~builder_inferedsdrtristate13_oe)),
	.O(builder_inferedsdrtristate13__i)
);

OFS1P3BX OFS1P3BX_36(
	.D(main_dfi_p0_wrdata[14]),
	.PD(1'd0),
	.SCLK(sys_clk),
	.SP(1'd1),
	.Q(builder_inferedsdrtristate14__o)
);

IFS1P3BX IFS1P3BX_14(
	.D(builder_inferedsdrtristate14__i),
	.PD(1'd0),
	.SCLK(sys_clk),
	.SP(1'd1),
	.Q(main_dfi_p0_rddata[14])
);

TRELLIS_IO #(
	.DIR("BIDIR")
) TRELLIS_IO_14 (
	.B(sdram_dq[14]),
	.I(builder_inferedsdrtristate14__o),
	.T((~builder_inferedsdrtristate14_oe)),
	.O(builder_inferedsdrtristate14__i)
);

OFS1P3BX OFS1P3BX_37(
	.D(main_dfi_p0_wrdata[15]),
	.PD(1'd0),
	.SCLK(sys_clk),
	.SP(1'd1),
	.Q(builder_inferedsdrtristate15__o)
);

IFS1P3BX IFS1P3BX_15(
	.D(builder_inferedsdrtristate15__i),
	.PD(1'd0),
	.SCLK(sys_clk),
	.SP(1'd1),
	.Q(main_dfi_p0_rddata[15])
);

TRELLIS_IO #(
	.DIR("BIDIR")
) TRELLIS_IO_15 (
	.B(sdram_dq[15]),
	.I(builder_inferedsdrtristate15__o),
	.T((~builder_inferedsdrtristate15_oe)),
	.O(builder_inferedsdrtristate15__i)
);

endmodule

// -----------------------------------------------------------------------------
//  Auto-Generated by LiteX on 2023-10-03 19:59:31.
//------------------------------------------------------------------------------
